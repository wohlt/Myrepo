
BMS_Master_Welzmiller_6_2(2).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005ee  00800100  0000340c  000034a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000340c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000340  008006ee  008006ee  00003a8e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003a8e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f0  00000000  00000000  00003abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003ed7  00000000  00000000  00003dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f4d  00000000  00000000  00007c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011d2  00000000  00000000  00008bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a6c  00000000  00000000  00009da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000aa2  00000000  00000000  0000a810  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003431  00000000  00000000  0000b2b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002b8  00000000  00000000  0000e6e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__ctors_end>
       4:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
       8:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
       c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      10:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      14:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      18:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      1c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      20:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      24:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      28:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      2c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      30:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      34:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      38:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__vector_14>
      3c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      40:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      44:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      48:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      4c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      50:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__vector_20>
      54:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      58:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      5c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      60:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      64:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      68:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__vector_26>
      6c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      70:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      74:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      78:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      7c:	db 0d       	add	r29, r11
      7e:	e5 0d       	add	r30, r5
      80:	dd 0d       	add	r29, r13
      82:	00 0e       	add	r0, r16
      84:	d3 0d       	add	r29, r3
      86:	d5 0d       	add	r29, r5
      88:	d7 0d       	add	r29, r7
      8a:	d9 0d       	add	r29, r9
      8c:	df 0d       	add	r29, r15
      8e:	e1 0d       	add	r30, r1
      90:	e3 0d       	add	r30, r3
      92:	f9 0d       	add	r31, r9
      94:	fb 0d       	add	r31, r11
      96:	fd 0d       	add	r31, r13
      98:	ff 0d       	add	r31, r15
      9a:	00 0e       	add	r0, r16
      9c:	00 0e       	add	r0, r16
      9e:	00 0e       	add	r0, r16
      a0:	00 0e       	add	r0, r16
      a2:	00 0e       	add	r0, r16
      a4:	00 0e       	add	r0, r16
      a6:	00 0e       	add	r0, r16
      a8:	00 0e       	add	r0, r16
      aa:	00 0e       	add	r0, r16
      ac:	00 0e       	add	r0, r16
      ae:	00 0e       	add	r0, r16
      b0:	00 0e       	add	r0, r16
      b2:	00 0e       	add	r0, r16
      b4:	00 0e       	add	r0, r16
      b6:	00 0e       	add	r0, r16
      b8:	00 0e       	add	r0, r16
      ba:	00 0e       	add	r0, r16
      bc:	00 0e       	add	r0, r16
      be:	00 0e       	add	r0, r16
      c0:	00 0e       	add	r0, r16
      c2:	00 0e       	add	r0, r16
      c4:	00 0e       	add	r0, r16
      c6:	00 0e       	add	r0, r16
      c8:	00 0e       	add	r0, r16
      ca:	00 0e       	add	r0, r16
      cc:	00 0e       	add	r0, r16
      ce:	00 0e       	add	r0, r16
      d0:	00 0e       	add	r0, r16
      d2:	00 0e       	add	r0, r16
      d4:	00 0e       	add	r0, r16
      d6:	00 0e       	add	r0, r16
      d8:	00 0e       	add	r0, r16
      da:	00 0e       	add	r0, r16
      dc:	00 0e       	add	r0, r16
      de:	00 0e       	add	r0, r16
      e0:	00 0e       	add	r0, r16
      e2:	00 0e       	add	r0, r16
      e4:	00 0e       	add	r0, r16
      e6:	00 0e       	add	r0, r16
      e8:	00 0e       	add	r0, r16
      ea:	00 0e       	add	r0, r16
      ec:	00 0e       	add	r0, r16
      ee:	00 0e       	add	r0, r16
      f0:	00 0e       	add	r0, r16
      f2:	00 0e       	add	r0, r16
      f4:	00 0e       	add	r0, r16
      f6:	00 0e       	add	r0, r16
      f8:	00 0e       	add	r0, r16
      fa:	00 0e       	add	r0, r16
      fc:	00 0e       	add	r0, r16
      fe:	00 0e       	add	r0, r16
     100:	00 0e       	add	r0, r16
     102:	00 0e       	add	r0, r16
     104:	00 0e       	add	r0, r16
     106:	00 0e       	add	r0, r16
     108:	00 0e       	add	r0, r16
     10a:	00 0e       	add	r0, r16
     10c:	00 0e       	add	r0, r16
     10e:	00 0e       	add	r0, r16
     110:	00 0e       	add	r0, r16
     112:	00 0e       	add	r0, r16
     114:	00 0e       	add	r0, r16
     116:	00 0e       	add	r0, r16
     118:	00 0e       	add	r0, r16
     11a:	00 0e       	add	r0, r16
     11c:	00 0e       	add	r0, r16
     11e:	00 0e       	add	r0, r16
     120:	00 0e       	add	r0, r16
     122:	00 0e       	add	r0, r16
     124:	00 0e       	add	r0, r16
     126:	00 0e       	add	r0, r16
     128:	00 0e       	add	r0, r16
     12a:	00 0e       	add	r0, r16
     12c:	00 0e       	add	r0, r16
     12e:	00 0e       	add	r0, r16
     130:	00 0e       	add	r0, r16
     132:	00 0e       	add	r0, r16
     134:	00 0e       	add	r0, r16
     136:	00 0e       	add	r0, r16
     138:	00 0e       	add	r0, r16
     13a:	00 0e       	add	r0, r16
     13c:	00 0e       	add	r0, r16
     13e:	00 0e       	add	r0, r16
     140:	00 0e       	add	r0, r16
     142:	00 0e       	add	r0, r16
     144:	00 0e       	add	r0, r16
     146:	f7 0d       	add	r31, r7
     148:	00 0e       	add	r0, r16
     14a:	f5 0d       	add	r31, r5
     14c:	f3 0d       	add	r31, r3
     14e:	f1 0d       	add	r31, r1
     150:	ef 0d       	add	r30, r15
     152:	ed 0d       	add	r30, r13
     154:	eb 0d       	add	r30, r11
     156:	e9 0d       	add	r30, r9
     158:	e7 0d       	add	r30, r7

0000015a <__ctors_end>:
     15a:	11 24       	eor	r1, r1
     15c:	1f be       	out	0x3f, r1	; 63
     15e:	cf ef       	ldi	r28, 0xFF	; 255
     160:	d0 e1       	ldi	r29, 0x10	; 16
     162:	de bf       	out	0x3e, r29	; 62
     164:	cd bf       	out	0x3d, r28	; 61

00000166 <__do_copy_data>:
     166:	16 e0       	ldi	r17, 0x06	; 6
     168:	a0 e0       	ldi	r26, 0x00	; 0
     16a:	b1 e0       	ldi	r27, 0x01	; 1
     16c:	ec e0       	ldi	r30, 0x0C	; 12
     16e:	f4 e3       	ldi	r31, 0x34	; 52
     170:	02 c0       	rjmp	.+4      	; 0x176 <__do_copy_data+0x10>
     172:	05 90       	lpm	r0, Z+
     174:	0d 92       	st	X+, r0
     176:	ae 3e       	cpi	r26, 0xEE	; 238
     178:	b1 07       	cpc	r27, r17
     17a:	d9 f7       	brne	.-10     	; 0x172 <__do_copy_data+0xc>

0000017c <__do_clear_bss>:
     17c:	2a e0       	ldi	r18, 0x0A	; 10
     17e:	ae ee       	ldi	r26, 0xEE	; 238
     180:	b6 e0       	ldi	r27, 0x06	; 6
     182:	01 c0       	rjmp	.+2      	; 0x186 <.do_clear_bss_start>

00000184 <.do_clear_bss_loop>:
     184:	1d 92       	st	X+, r1

00000186 <.do_clear_bss_start>:
     186:	ae 32       	cpi	r26, 0x2E	; 46
     188:	b2 07       	cpc	r27, r18
     18a:	e1 f7       	brne	.-8      	; 0x184 <.do_clear_bss_loop>
     18c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <main>
     190:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <_exit>

00000194 <__bad_interrupt>:
     194:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000198 <adc_init>:
void adc_init(void) {
 
  uint16_t result;
 
  // reference Voltage = intern Voltage = 5V
  ADMUX = (0<<REFS1) | (1<<REFS0);
     198:	80 e4       	ldi	r24, 0x40	; 64
     19a:	80 93 7c 00 	sts	0x007C, r24
  
  //ADCSRB |= (1<<AREFEN);  //AREF Pin aktivieren - Stabilisierung der Referenzspannung durch externe Kapazität

    
  ADCSRA = (1<<ADPS2)|(0<<ADPS1)|(0<<ADPS0);     // Prescaler auf 16 setzen -> 1 MHz ADC-Takt bei 16 MHz CPU-Takt
     19e:	ea e7       	ldi	r30, 0x7A	; 122
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	84 e0       	ldi	r24, 0x04	; 4
     1a4:	80 83       	st	Z, r24
  ADCSRA |= (1<<ADEN);							 // ADC aktivieren
     1a6:	80 81       	ld	r24, Z
     1a8:	80 68       	ori	r24, 0x80	; 128
     1aa:	80 83       	st	Z, r24
 
  /* nach Aktivieren des ADC wird ein "Dummy-Readout" empfohlen, man liest
     also einen Wert und verwirft diesen, um den ADC "warmlaufen zu lassen" */
 
  ADCSRA |= (1<<ADSC);                  // eine ADC-Wandlung 
     1ac:	80 81       	ld	r24, Z
     1ae:	80 64       	ori	r24, 0x40	; 64
     1b0:	80 83       	st	Z, r24
  while (ADCSRA & (1<<ADSC) ) {}        // auf Abschluss der Konvertierung warten
     1b2:	80 81       	ld	r24, Z
     1b4:	86 fd       	sbrc	r24, 6
     1b6:	fd cf       	rjmp	.-6      	; 0x1b2 <adc_init+0x1a>
  /* ADCW muss einmal gelesen werden, sonst wird Ergebnis der nächsten
     Wandlung nicht übernommen. */
  result = ADCW;
     1b8:	80 91 78 00 	lds	r24, 0x0078
     1bc:	90 91 79 00 	lds	r25, 0x0079
     1c0:	08 95       	ret

000001c2 <adc_background_read_init>:


void adc_background_read_init(uint16_t channelmask)
{	

	adc_channelmask = channelmask;
     1c2:	90 93 f1 06 	sts	0x06F1, r25
     1c6:	80 93 f0 06 	sts	0x06F0, r24
	adc_current_channel = 0;
     1ca:	10 92 f2 06 	sts	0x06F2, r1
	while(!(channelmask & 0x01))
     1ce:	80 fd       	sbrc	r24, 0
     1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <adc_background_read_init+0x26>
     1d2:	21 e0       	ldi	r18, 0x01	; 1
	{
		channelmask >>= 1;
     1d4:	96 95       	lsr	r25
     1d6:	87 95       	ror	r24
     1d8:	31 e0       	ldi	r19, 0x01	; 1
     1da:	32 0f       	add	r19, r18
void adc_background_read_init(uint16_t channelmask)
{	

	adc_channelmask = channelmask;
	adc_current_channel = 0;
	while(!(channelmask & 0x01))
     1dc:	80 fd       	sbrc	r24, 0
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <adc_background_read_init+0x22>
     1e0:	23 2f       	mov	r18, r19
     1e2:	f8 cf       	rjmp	.-16     	; 0x1d4 <adc_background_read_init+0x12>
     1e4:	20 93 f2 06 	sts	0x06F2, r18
		channelmask >>= 1;
		adc_current_channel++;
	}
	
	//start first conversion
	ADMUX = (ADMUX & ~(0x1F)) | (adc_current_channel & 0x1F);	//switch MUX to new channel
     1e8:	ec e7       	ldi	r30, 0x7C	; 124
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	80 81       	ld	r24, Z
     1ee:	90 91 f2 06 	lds	r25, 0x06F2
     1f2:	9f 71       	andi	r25, 0x1F	; 31
     1f4:	80 7e       	andi	r24, 0xE0	; 224
     1f6:	89 2b       	or	r24, r25
     1f8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);												//start single conversion
     1fa:	ea e7       	ldi	r30, 0x7A	; 122
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	80 64       	ori	r24, 0x40	; 64
     202:	80 83       	st	Z, r24
	adc_bgmode_enabled = 1;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	80 93 f3 06 	sts	0x06F3, r24
     20a:	08 95       	ret

0000020c <adc_task>:
}


void adc_task()
{
	if (adc_bgmode_enabled)
     20c:	80 91 f3 06 	lds	r24, 0x06F3
     210:	88 23       	and	r24, r24
     212:	09 f4       	brne	.+2      	; 0x216 <adc_task+0xa>
     214:	47 c0       	rjmp	.+142    	; 0x2a4 <adc_task+0x98>
	{
		if (!(ADCSRA & (1<<ADSC)))	//last conversion completed, ADC inactive
     216:	80 91 7a 00 	lds	r24, 0x007A
     21a:	86 fd       	sbrc	r24, 6
     21c:	43 c0       	rjmp	.+134    	; 0x2a4 <adc_task+0x98>
		{
			adc_buffer[adc_current_channel] = ADCW;			//store converted ADC Value
     21e:	40 91 f2 06 	lds	r20, 0x06F2
     222:	e4 2f       	mov	r30, r20
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	80 91 78 00 	lds	r24, 0x0078
     22a:	90 91 79 00 	lds	r25, 0x0079
     22e:	ee 0f       	add	r30, r30
     230:	ff 1f       	adc	r31, r31
     232:	e2 5f       	subi	r30, 0xF2	; 242
     234:	f8 4f       	sbci	r31, 0xF8	; 248
     236:	91 83       	std	Z+1, r25	; 0x01
     238:	80 83       	st	Z, r24
			adc_flags |= (1<<adc_current_channel);			//set corresponding Flag
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	04 2e       	mov	r0, r20
     240:	02 c0       	rjmp	.+4      	; 0x246 <adc_task+0x3a>
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	0a 94       	dec	r0
     248:	e2 f7       	brpl	.-8      	; 0x242 <adc_task+0x36>
     24a:	20 91 ee 06 	lds	r18, 0x06EE
     24e:	30 91 ef 06 	lds	r19, 0x06EF
     252:	82 2b       	or	r24, r18
     254:	93 2b       	or	r25, r19
     256:	90 93 ef 06 	sts	0x06EF, r25
     25a:	80 93 ee 06 	sts	0x06EE, r24
			
			adc_current_channel++;							//select next channel
			while (!((adc_channelmask >> adc_current_channel) & 0x0001))	//channel not active? -> check channelmask.
     25e:	20 91 f0 06 	lds	r18, 0x06F0
     262:	30 91 f1 06 	lds	r19, 0x06F1
     266:	4f 5f       	subi	r20, 0xFF	; 255
				{
					adc_current_channel++;					//select next channel
				}
				else
				{
					adc_current_channel = 0;
     268:	50 e0       	ldi	r21, 0x00	; 0
		{
			adc_buffer[adc_current_channel] = ADCW;			//store converted ADC Value
			adc_flags |= (1<<adc_current_channel);			//set corresponding Flag
			
			adc_current_channel++;							//select next channel
			while (!((adc_channelmask >> adc_current_channel) & 0x0001))	//channel not active? -> check channelmask.
     26a:	05 c0       	rjmp	.+10     	; 0x276 <adc_task+0x6a>
			{																			
				if (adc_current_channel < 10)				//check for overrun
     26c:	4a 30       	cpi	r20, 0x0A	; 10
     26e:	10 f4       	brcc	.+4      	; 0x274 <adc_task+0x68>
				{
					adc_current_channel++;					//select next channel
     270:	4f 5f       	subi	r20, 0xFF	; 255
     272:	01 c0       	rjmp	.+2      	; 0x276 <adc_task+0x6a>
				}
				else
				{
					adc_current_channel = 0;
     274:	45 2f       	mov	r20, r21
		{
			adc_buffer[adc_current_channel] = ADCW;			//store converted ADC Value
			adc_flags |= (1<<adc_current_channel);			//set corresponding Flag
			
			adc_current_channel++;							//select next channel
			while (!((adc_channelmask >> adc_current_channel) & 0x0001))	//channel not active? -> check channelmask.
     276:	c9 01       	movw	r24, r18
     278:	04 2e       	mov	r0, r20
     27a:	02 c0       	rjmp	.+4      	; 0x280 <adc_task+0x74>
     27c:	96 95       	lsr	r25
     27e:	87 95       	ror	r24
     280:	0a 94       	dec	r0
     282:	e2 f7       	brpl	.-8      	; 0x27c <adc_task+0x70>
     284:	80 ff       	sbrs	r24, 0
     286:	f2 cf       	rjmp	.-28     	; 0x26c <adc_task+0x60>
     288:	40 93 f2 06 	sts	0x06F2, r20
				else
				{
					adc_current_channel = 0;
				}
			}
			ADMUX = (ADMUX & ~(0x1F)) | (adc_current_channel & 0x1F);	//switch MUX to new channel
     28c:	ec e7       	ldi	r30, 0x7C	; 124
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	4f 71       	andi	r20, 0x1F	; 31
     294:	80 7e       	andi	r24, 0xE0	; 224
     296:	48 2b       	or	r20, r24
     298:	40 83       	st	Z, r20
			ADCSRA |= (1<<ADSC);												//start single conversion
     29a:	ea e7       	ldi	r30, 0x7A	; 122
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	80 64       	ori	r24, 0x40	; 64
     2a2:	80 83       	st	Z, r24
     2a4:	08 95       	ret

000002a6 <bmschip_setOvUnVoltage>:
}
// *****************************************************************************************

// *** Funktion zum Festlegen kritischer Spannungsgrenzen **********************************
void bmschip_setOvUnVoltage(uint16_t * undervoltage, uint16_t * overvoltage)
{
     2a6:	dc 01       	movw	r26, r24
     2a8:	fb 01       	movw	r30, r22
	//Spannungen an LTC6804-Format anpassen
	//Aus der 16bit-Zahl wird eine 12Bit-Zahl
	if(*undervoltage > 0)
     2aa:	8d 91       	ld	r24, X+
     2ac:	9c 91       	ld	r25, X
     2ae:	11 97       	sbiw	r26, 0x01	; 1
     2b0:	00 97       	sbiw	r24, 0x00	; 0
     2b2:	51 f0       	breq	.+20     	; 0x2c8 <bmschip_setOvUnVoltage+0x22>
	{
		*undervoltage = (*undervoltage / 16) - 1;	// (Spannung in 100uV / (16 * 100uV)) - 1		
     2b4:	92 95       	swap	r25
     2b6:	82 95       	swap	r24
     2b8:	8f 70       	andi	r24, 0x0F	; 15
     2ba:	89 27       	eor	r24, r25
     2bc:	9f 70       	andi	r25, 0x0F	; 15
     2be:	89 27       	eor	r24, r25
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	11 96       	adiw	r26, 0x01	; 1
     2c4:	9c 93       	st	X, r25
     2c6:	8e 93       	st	-X, r24
	}
	*overvoltage = *overvoltage / 16;	// Spannung in 100uV / (16 * 100uV)
     2c8:	80 81       	ld	r24, Z
     2ca:	91 81       	ldd	r25, Z+1	; 0x01
     2cc:	92 95       	swap	r25
     2ce:	82 95       	swap	r24
     2d0:	8f 70       	andi	r24, 0x0F	; 15
     2d2:	89 27       	eor	r24, r25
     2d4:	9f 70       	andi	r25, 0x0F	; 15
     2d6:	89 27       	eor	r24, r25
     2d8:	91 83       	std	Z+1, r25	; 0x01
     2da:	80 83       	st	Z, r24
		
	//Konfigurationsdaten aktualisieren
	ltc6804.config[0] = 0x24;																			// 00100100 (2) wenn GPIO3 als Input gesetzt werden soll
     2dc:	84 e2       	ldi	r24, 0x24	; 36
     2de:	80 93 29 07 	sts	0x0729, r24
	ltc6804.config[1] = (uint8_t) *undervoltage;														//Ein Byte aus den niedrigeren 8 Bit des 12 Bit UV-Werts
     2e2:	8c 91       	ld	r24, X
     2e4:	80 93 2a 07 	sts	0x072A, r24
	ltc6804.config[2] = (uint8_t) (((*overvoltage & 0x000F) << 4) | ((*undervoltage & 0x0F00) >> 8));	//Ein Byte aus den niedrigeren 4 Bit des 12 Bit OV-Werts und der höheren 4 Bit des 12 Bit UV-Werts
     2e8:	8d 91       	ld	r24, X+
     2ea:	9c 91       	ld	r25, X
     2ec:	11 97       	sbiw	r26, 0x01	; 1
     2ee:	88 27       	eor	r24, r24
     2f0:	9f 70       	andi	r25, 0x0F	; 15
     2f2:	80 81       	ld	r24, Z
     2f4:	82 95       	swap	r24
     2f6:	80 7f       	andi	r24, 0xF0	; 240
     2f8:	89 2b       	or	r24, r25
     2fa:	80 93 2b 07 	sts	0x072B, r24
	ltc6804.config[3] = (uint8_t) ((*overvoltage & 0x0FF0) >> 4);										//Ein Byte aus den höheren 8 Bit des 12 Bit OV-Werts
     2fe:	80 81       	ld	r24, Z
     300:	91 81       	ldd	r25, Z+1	; 0x01
     302:	80 7f       	andi	r24, 0xF0	; 240
     304:	9f 70       	andi	r25, 0x0F	; 15
     306:	92 95       	swap	r25
     308:	82 95       	swap	r24
     30a:	8f 70       	andi	r24, 0x0F	; 15
     30c:	89 27       	eor	r24, r25
     30e:	9f 70       	andi	r25, 0x0F	; 15
     310:	89 27       	eor	r24, r25
     312:	80 93 2c 07 	sts	0x072C, r24
	ltc6804.config[4] = 0x00;
     316:	10 92 2d 07 	sts	0x072D, r1
	ltc6804.config[5] = 0x00;
     31a:	10 92 2e 07 	sts	0x072E, r1
	
	//Zur Fehlerkontrolle ausserhalb dieser Funktion Spannungen nach Runden zurueckrechnen
	*undervoltage = (*undervoltage + 1) * 16;
     31e:	8d 91       	ld	r24, X+
     320:	9c 91       	ld	r25, X
     322:	11 97       	sbiw	r26, 0x01	; 1
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	82 95       	swap	r24
     328:	92 95       	swap	r25
     32a:	90 7f       	andi	r25, 0xF0	; 240
     32c:	98 27       	eor	r25, r24
     32e:	80 7f       	andi	r24, 0xF0	; 240
     330:	98 27       	eor	r25, r24
     332:	8d 93       	st	X+, r24
     334:	9c 93       	st	X, r25
	*overvoltage = *overvoltage * 16;
     336:	80 81       	ld	r24, Z
     338:	91 81       	ldd	r25, Z+1	; 0x01
     33a:	82 95       	swap	r24
     33c:	92 95       	swap	r25
     33e:	90 7f       	andi	r25, 0xF0	; 240
     340:	98 27       	eor	r25, r24
     342:	80 7f       	andi	r24, 0xF0	; 240
     344:	98 27       	eor	r25, r24
     346:	91 83       	std	Z+1, r25	; 0x01
     348:	80 83       	st	Z, r24
     34a:	08 95       	ret

0000034c <bmschip_spi_rw>:
uint8_t bmschip_spi_rw (uint8_t *command, uint8_t size)
{
	uint8_t i;
	
	
	if (spi.locked==0)	//Beginn des Sendens
     34c:	20 91 6c 07 	lds	r18, 0x076C
     350:	21 11       	cpse	r18, r1
     352:	16 c0       	rjmp	.+44     	; 0x380 <bmschip_spi_rw+0x34>
	{
		spi.bytes = size;
     354:	60 93 6a 07 	sts	0x076A, r22
		for (i=0; i<size; i++)
     358:	66 23       	and	r22, r22
     35a:	61 f0       	breq	.+24     	; 0x374 <bmschip_spi_rw+0x28>
     35c:	e8 2f       	mov	r30, r24
     35e:	f9 2f       	mov	r31, r25
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
		{
			spi.tx_buffer.b[i] = command[i];
     364:	21 91       	ld	r18, Z+
     366:	dc 01       	movw	r26, r24
     368:	a6 5b       	subi	r26, 0xB6	; 182
     36a:	b8 4f       	sbci	r27, 0xF8	; 248
     36c:	2c 93       	st	X, r18
     36e:	01 96       	adiw	r24, 0x01	; 1
	
	
	if (spi.locked==0)	//Beginn des Sendens
	{
		spi.bytes = size;
		for (i=0; i<size; i++)
     370:	86 17       	cp	r24, r22
     372:	c0 f3       	brcs	.-16     	; 0x364 <bmschip_spi_rw+0x18>
		{
			spi.tx_buffer.b[i] = command[i];
		}
		SPI_CS_LTC6804_LOW;
     374:	41 98       	cbi	0x08, 1	; 8
		
		while(!(spi_start_transmission()));	//Hier wird spi.locked gesetzt
     376:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <spi_start_transmission>
     37a:	88 23       	and	r24, r24
     37c:	e1 f3       	breq	.-8      	; 0x376 <bmschip_spi_rw+0x2a>
     37e:	0f c0       	rjmp	.+30     	; 0x39e <bmschip_spi_rw+0x52>
	}
	else if (spi.flag==0)	//Weiterschicken
     380:	80 91 6d 07 	lds	r24, 0x076D
     384:	81 11       	cpse	r24, r1
     386:	04 c0       	rjmp	.+8      	; 0x390 <bmschip_spi_rw+0x44>
	{
		spi_task();
     388:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <spi_task>
	}
	else if (spi.flag==1)	//Übertragung fertig
	{
		return 1;
	}
	return 0;
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	08 95       	ret
	}
	else if (spi.flag==0)	//Weiterschicken
	{
		spi_task();
	}
	else if (spi.flag==1)	//Übertragung fertig
     390:	90 91 6d 07 	lds	r25, 0x076D
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	91 30       	cpi	r25, 0x01	; 1
     398:	19 f0       	breq	.+6      	; 0x3a0 <bmschip_spi_rw+0x54>
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	08 95       	ret
	{
		return 1;
	}
	return 0;
     39e:	80 e0       	ldi	r24, 0x00	; 0
	//Achtung! 
	//RX-Array noch uebertragen, damit es nicht ueberschrieben wird
	//NICHT VERGESSEN: 
	//SPI_CS_LTC8604_HIGH und spi.locked = 0 nach vollständiger Uebertragung in der Hauptfkt. setzen
}
     3a0:	08 95       	ret

000003a2 <bmschip_writeDischarge>:
// *****************************************************************************************

// *** Funktion um Konfiguration fuer das Balancing zu veraendern **************************
void bmschip_writeDischarge(uint16_t cells, uint8_t time)
{
	ltc6804.config[4] = (uint8_t) cells;	//zu balancende Zellen eintragen
     3a2:	80 93 2d 07 	sts	0x072D, r24
	ltc6804.config[5] = (uint8_t) (((time & 0x0F) << 4) | ((cells & 0x0F00) >> 8));		//Balancing-time: Manuell
     3a6:	88 27       	eor	r24, r24
     3a8:	9f 70       	andi	r25, 0x0F	; 15
     3aa:	62 95       	swap	r22
     3ac:	60 7f       	andi	r22, 0xF0	; 240
     3ae:	69 2b       	or	r22, r25
     3b0:	60 93 2e 07 	sts	0x072E, r22
     3b4:	08 95       	ret

000003b6 <bmschip_startAdc>:
}
// *****************************************************************************************

// *** Funktion zum Starten der Spannungsmessung *******************************************
void bmschip_startAdc(void)
{
     3b6:	bf 92       	push	r11
     3b8:	cf 92       	push	r12
     3ba:	df 92       	push	r13
     3bc:	ef 92       	push	r14
     3be:	ff 92       	push	r15
     3c0:	0f 93       	push	r16
     3c2:	1f 93       	push	r17
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	00 d0       	rcall	.+0      	; 0x3ca <bmschip_startAdc+0x14>
     3ca:	00 d0       	rcall	.+0      	; 0x3cc <bmschip_startAdc+0x16>
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint8_t cmd[4];
	
	
	cmd[0]=0x00;
     3d0:	19 82       	std	Y+1, r1	; 0x01
	for (i=0; i<slave_boards; i++)
     3d2:	80 91 24 07 	lds	r24, 0x0724
     3d6:	88 23       	and	r24, r24
     3d8:	09 f4       	brne	.+2      	; 0x3dc <bmschip_startAdc+0x26>
     3da:	42 c0       	rjmp	.+132    	; 0x460 <bmschip_startAdc+0xaa>
     3dc:	b1 2c       	mov	r11, r1
	{
		while(!(bmschip_spi_rw(cmd, 1)));	//Dummybyte, um den IsoSPI aufzuwecken
		SPI_CS_LTC6804_HIGH;
		spi.locked = 0;
     3de:	0f 2e       	mov	r0, r31
     3e0:	fc e6       	ldi	r31, 0x6C	; 108
     3e2:	cf 2e       	mov	r12, r31
     3e4:	f7 e0       	ldi	r31, 0x07	; 7
     3e6:	df 2e       	mov	r13, r31
     3e8:	f0 2d       	mov	r31, r0
		wait_count = TCNT1;
     3ea:	04 e8       	ldi	r16, 0x84	; 132
     3ec:	10 e0       	ldi	r17, 0x00	; 0
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
     3ee:	0f 2e       	mov	r0, r31
     3f0:	f6 e8       	ldi	r31, 0x86	; 134
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	f0 2d       	mov	r31, r0
	
	
	cmd[0]=0x00;
	for (i=0; i<slave_boards; i++)
	{
		while(!(bmschip_spi_rw(cmd, 1)));	//Dummybyte, um den IsoSPI aufzuwecken
     3f8:	61 e0       	ldi	r22, 0x01	; 1
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	0e 94 a6 01 	call	0x34c	; 0x34c <bmschip_spi_rw>
     402:	88 23       	and	r24, r24
     404:	c9 f3       	breq	.-14     	; 0x3f8 <bmschip_startAdc+0x42>
		SPI_CS_LTC6804_HIGH;
     406:	41 9a       	sbi	0x08, 1	; 8
		spi.locked = 0;
     408:	f6 01       	movw	r30, r12
     40a:	10 82       	st	Z, r1
		wait_count = TCNT1;
     40c:	f8 01       	movw	r30, r16
     40e:	40 81       	ld	r20, Z
     410:	51 81       	ldd	r21, Z+1	; 0x01
     412:	50 93 28 07 	sts	0x0728, r21
     416:	40 93 27 07 	sts	0x0727, r20
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
     41a:	9a 01       	movw	r18, r20
     41c:	27 5e       	subi	r18, 0xE7	; 231
     41e:	3f 4f       	sbci	r19, 0xFF	; 255
     420:	f8 01       	movw	r30, r16
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	28 17       	cp	r18, r24
     428:	39 07       	cpc	r19, r25
     42a:	28 f0       	brcs	.+10     	; 0x436 <bmschip_startAdc+0x80>
     42c:	80 81       	ld	r24, Z
     42e:	91 81       	ldd	r25, Z+1	; 0x01
     430:	48 17       	cp	r20, r24
     432:	59 07       	cpc	r21, r25
     434:	a8 f3       	brcs	.-22     	; 0x420 <bmschip_startAdc+0x6a>
     436:	f8 01       	movw	r30, r16
     438:	80 81       	ld	r24, Z
     43a:	91 81       	ldd	r25, Z+1	; 0x01
     43c:	84 17       	cp	r24, r20
     43e:	95 07       	cpc	r25, r21
     440:	50 f4       	brcc	.+20     	; 0x456 <bmschip_startAdc+0xa0>
     442:	80 81       	ld	r24, Z
     444:	91 81       	ldd	r25, Z+1	; 0x01
     446:	f7 01       	movw	r30, r14
     448:	60 81       	ld	r22, Z
     44a:	71 81       	ldd	r23, Z+1	; 0x01
     44c:	86 0f       	add	r24, r22
     44e:	97 1f       	adc	r25, r23
     450:	82 17       	cp	r24, r18
     452:	93 07       	cpc	r25, r19
     454:	28 f3       	brcs	.-54     	; 0x420 <bmschip_startAdc+0x6a>
	uint8_t i;
	uint8_t cmd[4];
	
	
	cmd[0]=0x00;
	for (i=0; i<slave_boards; i++)
     456:	b3 94       	inc	r11
     458:	80 91 24 07 	lds	r24, 0x0724
     45c:	b8 16       	cp	r11, r24
     45e:	60 f2       	brcs	.-104    	; 0x3f8 <bmschip_startAdc+0x42>
		wait_count = TCNT1;
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
	}
	
	//Messbefehl
	cmd[0] = 0x03;	// 00000011	ADCV0	Normal-Mode
     460:	83 e0       	ldi	r24, 0x03	; 3
     462:	89 83       	std	Y+1, r24	; 0x01
	cmd[1] = 0x60;	// 01100000	ADCV1	Normal-Mode, Balancing wird unterbrochen während der Messung
     464:	80 e6       	ldi	r24, 0x60	; 96
     466:	8a 83       	std	Y+2, r24	; 0x02
	cmd[2] = 0xF4;	// PEC-High-Byte
     468:	84 ef       	ldi	r24, 0xF4	; 244
     46a:	8b 83       	std	Y+3, r24	; 0x03
	cmd[3] = 0x6C;	// PEC-Low-Byte
     46c:	8c e6       	ldi	r24, 0x6C	; 108
     46e:	8c 83       	std	Y+4, r24	; 0x04
					== 1	Balancing nicht unterbrochen
	CH[2] + CH[1] + CH[0]	== zu messende Zellen je nach Kombination
	*/
	
	//Befehl und PEC schreiben
	while(!(bmschip_spi_rw(cmd, 4)));
     470:	64 e0       	ldi	r22, 0x04	; 4
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 a6 01 	call	0x34c	; 0x34c <bmschip_spi_rw>
     47a:	88 23       	and	r24, r24
     47c:	c9 f3       	breq	.-14     	; 0x470 <bmschip_startAdc+0xba>
	
	SPI_CS_LTC6804_HIGH;
     47e:	41 9a       	sbi	0x08, 1	; 8
	spi.locked=0;
     480:	10 92 6c 07 	sts	0x076C, r1
}
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	1f 91       	pop	r17
     492:	0f 91       	pop	r16
     494:	ff 90       	pop	r15
     496:	ef 90       	pop	r14
     498:	df 90       	pop	r13
     49a:	cf 90       	pop	r12
     49c:	bf 90       	pop	r11
     49e:	08 95       	ret

000004a0 <Pec15>:
	uint16_t remainder = 16;	// PEC seed
	uint16_t address;
	uint8_t i;
	
	
	for (i = 0; i < len; i++)
     4a0:	66 23       	and	r22, r22
     4a2:	e9 f0       	breq	.+58     	; 0x4de <Pec15+0x3e>
     4a4:	58 2f       	mov	r21, r24
     4a6:	e8 2f       	mov	r30, r24
     4a8:	f9 2f       	mov	r31, r25
// *** PEC-Berechnung **********************************************************************
// Code aus dem Datenblatt von LTC6804 übernommen 
// Funktioniert schneller als Berechnung, da Lookup-Table verwendet wird
uint16_t Pec15 (uint8_t *data, uint8_t len)
{
	uint16_t remainder = 16;	// PEC seed
     4aa:	80 e1       	ldi	r24, 0x10	; 16
     4ac:	90 e0       	ldi	r25, 0x00	; 0
	
	
	for (i = 0; i < len; i++)
	{
		//Calculate PEC table address
		address = ((remainder >> 7) ^ data[i]) & 0xFF;
     4ae:	41 91       	ld	r20, Z+
		remainder = (remainder << 8 ) ^ crc15Table[address];
     4b0:	38 2f       	mov	r19, r24
     4b2:	22 27       	eor	r18, r18
	
	
	for (i = 0; i < len; i++)
	{
		//Calculate PEC table address
		address = ((remainder >> 7) ^ data[i]) & 0xFF;
     4b4:	dc 01       	movw	r26, r24
     4b6:	aa 0f       	add	r26, r26
     4b8:	ab 2f       	mov	r26, r27
     4ba:	aa 1f       	adc	r26, r26
     4bc:	bb 0b       	sbc	r27, r27
     4be:	b1 95       	neg	r27
     4c0:	a4 27       	eor	r26, r20
     4c2:	bb 27       	eor	r27, r27
		remainder = (remainder << 8 ) ^ crc15Table[address];
     4c4:	aa 0f       	add	r26, r26
     4c6:	bb 1f       	adc	r27, r27
     4c8:	a6 5f       	subi	r26, 0xF6	; 246
     4ca:	be 4f       	sbci	r27, 0xFE	; 254
     4cc:	8d 91       	ld	r24, X+
     4ce:	9c 91       	ld	r25, X
     4d0:	82 27       	eor	r24, r18
     4d2:	93 27       	eor	r25, r19
     4d4:	2e 2f       	mov	r18, r30
     4d6:	25 1b       	sub	r18, r21
	uint16_t remainder = 16;	// PEC seed
	uint16_t address;
	uint8_t i;
	
	
	for (i = 0; i < len; i++)
     4d8:	26 17       	cp	r18, r22
     4da:	48 f3       	brcs	.-46     	; 0x4ae <Pec15+0xe>
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <Pec15+0x42>
// *** PEC-Berechnung **********************************************************************
// Code aus dem Datenblatt von LTC6804 übernommen 
// Funktioniert schneller als Berechnung, da Lookup-Table verwendet wird
uint16_t Pec15 (uint8_t *data, uint8_t len)
{
	uint16_t remainder = 16;	// PEC seed
     4de:	80 e1       	ldi	r24, 0x10	; 16
     4e0:	90 e0       	ldi	r25, 0x00	; 0
		address = ((remainder >> 7) ^ data[i]) & 0xFF;
		remainder = (remainder << 8 ) ^ crc15Table[address];
	}
	//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
	return (remainder * 2);
}
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	08 95       	ret

000004e8 <bmschip_readConfig>:
}
// *****************************************************************************************

// *** Funktion zum lesen der Konfiguration der Slaves *************************************
uint8_t bmschip_readConfig(uint8_t * cmd, uint8_t size, uint8_t msg)
{
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	8c 01       	movw	r16, r24
     4f8:	d6 2e       	mov	r13, r22
	uint8_t i;
	uint16_t pec;
	
	
	//Befehl und PEC schreiben
	if (msg==0)	//für msg == 0 wird der Command gesendet. Das ist zuerst immer notwendig
     4fa:	44 23       	and	r20, r20
     4fc:	21 f0       	breq	.+8      	; 0x506 <bmschip_readConfig+0x1e>
		cmd[3] = GET_LOW_BYTE(pec);
		while(!(bmschip_spi_rw(cmd, 4)));	//Command
	}
	else	//Konfiguration empfangen
	{
		for(i=4; i<size; i++)
     4fe:	24 e0       	ldi	r18, 0x04	; 4
     500:	26 17       	cp	r18, r22
     502:	98 f0       	brcs	.+38     	; 0x52a <bmschip_readConfig+0x42>
     504:	1f c0       	rjmp	.+62     	; 0x544 <bmschip_readConfig+0x5c>
	
	
	//Befehl und PEC schreiben
	if (msg==0)	//für msg == 0 wird der Command gesendet. Das ist zuerst immer notwendig
	{	
		cmd[0] = 0x00; // RDCFG0
     506:	fc 01       	movw	r30, r24
     508:	10 82       	st	Z, r1
		cmd[1] = 0x02; // RDCFG1
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	81 83       	std	Z+1, r24	; 0x01
		pec = Pec15(cmd, 2);
     50e:	62 e0       	ldi	r22, 0x02	; 2
     510:	c8 01       	movw	r24, r16
     512:	0e 94 50 02 	call	0x4a0	; 0x4a0 <Pec15>
		cmd[2] = GET_HIGH_BYTE(pec);
     516:	f8 01       	movw	r30, r16
     518:	92 83       	std	Z+2, r25	; 0x02
		cmd[3] = GET_LOW_BYTE(pec);
     51a:	83 83       	std	Z+3, r24	; 0x03
		while(!(bmschip_spi_rw(cmd, 4)));	//Command
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	c8 01       	movw	r24, r16
     520:	0e 94 a6 01 	call	0x34c	; 0x34c <bmschip_spi_rw>
     524:	88 23       	and	r24, r24
     526:	d1 f3       	breq	.-12     	; 0x51c <bmschip_readConfig+0x34>
     528:	42 c0       	rjmp	.+132    	; 0x5ae <bmschip_readConfig+0xc6>
     52a:	fc 01       	movw	r30, r24
     52c:	34 96       	adiw	r30, 0x04	; 4
     52e:	8b ef       	ldi	r24, 0xFB	; 251
     530:	86 0f       	add	r24, r22
     532:	98 01       	movw	r18, r16
     534:	28 0f       	add	r18, r24
     536:	31 1d       	adc	r19, r1
     538:	c9 01       	movw	r24, r18
     53a:	05 96       	adiw	r24, 0x05	; 5
	}
	else	//Konfiguration empfangen
	{
		for(i=4; i<size; i++)
		{
			cmd[i] = 0x00;
     53c:	11 92       	st	Z+, r1
		cmd[3] = GET_LOW_BYTE(pec);
		while(!(bmschip_spi_rw(cmd, 4)));	//Command
	}
	else	//Konfiguration empfangen
	{
		for(i=4; i<size; i++)
     53e:	e8 17       	cp	r30, r24
     540:	f9 07       	cpc	r31, r25
     542:	e1 f7       	brne	.-8      	; 0x53c <bmschip_readConfig+0x54>
		{
			cmd[i] = 0x00;
		}
		while(!(bmschip_spi_rw(&cmd[4], 8)));
     544:	e8 01       	movw	r28, r16
     546:	24 96       	adiw	r28, 0x04	; 4
     548:	ec 2e       	mov	r14, r28
     54a:	fd 2e       	mov	r15, r29
     54c:	68 e0       	ldi	r22, 0x08	; 8
     54e:	ce 01       	movw	r24, r28
     550:	0e 94 a6 01 	call	0x34c	; 0x34c <bmschip_spi_rw>
     554:	88 23       	and	r24, r24
     556:	c1 f3       	breq	.-16     	; 0x548 <bmschip_readConfig+0x60>
		for (i=4;i<size;i++)
     558:	34 e0       	ldi	r19, 0x04	; 4
     55a:	3d 15       	cp	r19, r13
     55c:	c0 f4       	brcc	.+48     	; 0x58e <bmschip_readConfig+0xa6>
     55e:	ec 2f       	mov	r30, r28
     560:	fd 2f       	mov	r31, r29
     562:	8b ef       	ldi	r24, 0xFB	; 251
     564:	8d 0d       	add	r24, r13
     566:	a8 01       	movw	r20, r16
     568:	48 0f       	add	r20, r24
     56a:	51 1d       	adc	r21, r1
     56c:	4b 5f       	subi	r20, 0xFB	; 251
     56e:	5f 4f       	sbci	r21, 0xFF	; 255
     570:	2c ef       	ldi	r18, 0xFC	; 252
     572:	3f ef       	ldi	r19, 0xFF	; 255
     574:	20 1b       	sub	r18, r16
     576:	31 0b       	sbc	r19, r17
     578:	d9 01       	movw	r26, r18
     57a:	ae 0f       	add	r26, r30
     57c:	bf 1f       	adc	r27, r31
		{
			cmd[i]=spi.rx_buffer.b[i-4];	//empfangene Konfiguration übernehmen
     57e:	a6 5b       	subi	r26, 0xB6	; 182
     580:	b8 4f       	sbci	r27, 0xF8	; 248
     582:	50 96       	adiw	r26, 0x10	; 16
     584:	8c 91       	ld	r24, X
     586:	81 93       	st	Z+, r24
		for(i=4; i<size; i++)
		{
			cmd[i] = 0x00;
		}
		while(!(bmschip_spi_rw(&cmd[4], 8)));
		for (i=4;i<size;i++)
     588:	e4 17       	cp	r30, r20
     58a:	f5 07       	cpc	r31, r21
     58c:	a9 f7       	brne	.-22     	; 0x578 <bmschip_readConfig+0x90>
		{
			cmd[i]=spi.rx_buffer.b[i-4];	//empfangene Konfiguration übernehmen
		}
		
		//Auswertung
		pec = Pec15(&cmd[4], 6);
     58e:	66 e0       	ldi	r22, 0x06	; 6
     590:	8e 2d       	mov	r24, r14
     592:	9f 2d       	mov	r25, r15
     594:	0e 94 50 02 	call	0x4a0	; 0x4a0 <Pec15>
     598:	38 2f       	mov	r19, r24
		if(GET_HIGH_BYTE(pec) != cmd[10] ||	GET_LOW_BYTE(pec) != cmd[11])
     59a:	f8 01       	movw	r30, r16
     59c:	22 85       	ldd	r18, Z+10	; 0x0a
     59e:	29 13       	cpse	r18, r25
     5a0:	08 c0       	rjmp	.+16     	; 0x5b2 <bmschip_readConfig+0xca>
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	93 85       	ldd	r25, Z+11	; 0x0b
     5a6:	93 13       	cpse	r25, r19
     5a8:	05 c0       	rjmp	.+10     	; 0x5b4 <bmschip_readConfig+0xcc>
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <bmschip_readConfig+0xcc>
		{
			return 1;	//Abbruch falls PEC nicht stimmt
		}
	}
	return 0;
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <bmschip_readConfig+0xcc>
		
		//Auswertung
		pec = Pec15(&cmd[4], 6);
		if(GET_HIGH_BYTE(pec) != cmd[10] ||	GET_LOW_BYTE(pec) != cmd[11])
		{
			return 1;	//Abbruch falls PEC nicht stimmt
     5b2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	df 90       	pop	r13
     5c2:	08 95       	ret

000005c4 <bmschip_writeConfig>:
}
// *****************************************************************************************

// *** Funktion zum Beschreiben der Slaves *************************************************
uint8_t bmschip_writeConfig(void)
{
     5c4:	2f 92       	push	r2
     5c6:	3f 92       	push	r3
     5c8:	4f 92       	push	r4
     5ca:	5f 92       	push	r5
     5cc:	6f 92       	push	r6
     5ce:	7f 92       	push	r7
     5d0:	8f 92       	push	r8
     5d2:	9f 92       	push	r9
     5d4:	af 92       	push	r10
     5d6:	bf 92       	push	r11
     5d8:	cf 92       	push	r12
     5da:	df 92       	push	r13
     5dc:	ef 92       	push	r14
     5de:	ff 92       	push	r15
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	68 97       	sbiw	r28, 0x18	; 24
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
	uint8_t cmd[size], cmdAns[size];
	uint16_t pec;


	//Konfigurationsbefehl
	cmd[0] = 0x00; // WRCFG0
     5f8:	19 82       	std	Y+1, r1	; 0x01
	cmd[1] = 0x01; // WRCFG1
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	8a 83       	std	Y+2, r24	; 0x02
	pec = Pec15(cmd, 2);
     5fe:	62 e0       	ldi	r22, 0x02	; 2
     600:	ce 01       	movw	r24, r28
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	0e 94 50 02 	call	0x4a0	; 0x4a0 <Pec15>
	
	cmd[2] = GET_HIGH_BYTE(pec);
     608:	9b 83       	std	Y+3, r25	; 0x03
	cmd[3] = GET_LOW_BYTE(pec);
     60a:	8c 83       	std	Y+4, r24	; 0x04
	
	//Befehl und PEC schreiben
	for (i=0; i<slave_boards; i++)
     60c:	80 91 24 07 	lds	r24, 0x0724
     610:	88 23       	and	r24, r24
     612:	09 f4       	brne	.+2      	; 0x616 <bmschip_writeConfig+0x52>
     614:	43 c0       	rjmp	.+134    	; 0x69c <bmschip_writeConfig+0xd8>
     616:	b1 2c       	mov	r11, r1
	{
		while(!(bmschip_spi_rw(cmd, 1)));	//Dummybyte, um den IsoSPI aufzuwecken
		
		SPI_CS_LTC6804_HIGH;
		spi.locked=0;
     618:	0f 2e       	mov	r0, r31
     61a:	fc e6       	ldi	r31, 0x6C	; 108
     61c:	cf 2e       	mov	r12, r31
     61e:	f7 e0       	ldi	r31, 0x07	; 7
     620:	df 2e       	mov	r13, r31
     622:	f0 2d       	mov	r31, r0
		wait_count = TCNT1;
     624:	04 e8       	ldi	r16, 0x84	; 132
     626:	10 e0       	ldi	r17, 0x00	; 0
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
     628:	0f 2e       	mov	r0, r31
     62a:	f6 e8       	ldi	r31, 0x86	; 134
     62c:	ef 2e       	mov	r14, r31
     62e:	f1 2c       	mov	r15, r1
     630:	f0 2d       	mov	r31, r0
	cmd[3] = GET_LOW_BYTE(pec);
	
	//Befehl und PEC schreiben
	for (i=0; i<slave_boards; i++)
	{
		while(!(bmschip_spi_rw(cmd, 1)));	//Dummybyte, um den IsoSPI aufzuwecken
     632:	61 e0       	ldi	r22, 0x01	; 1
     634:	ce 01       	movw	r24, r28
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	0e 94 a6 01 	call	0x34c	; 0x34c <bmschip_spi_rw>
     63c:	88 23       	and	r24, r24
     63e:	c9 f3       	breq	.-14     	; 0x632 <bmschip_writeConfig+0x6e>
		
		SPI_CS_LTC6804_HIGH;
     640:	41 9a       	sbi	0x08, 1	; 8
		spi.locked=0;
     642:	d6 01       	movw	r26, r12
     644:	1c 92       	st	X, r1
		wait_count = TCNT1;
     646:	f8 01       	movw	r30, r16
     648:	40 81       	ld	r20, Z
     64a:	51 81       	ldd	r21, Z+1	; 0x01
     64c:	50 93 28 07 	sts	0x0728, r21
     650:	40 93 27 07 	sts	0x0727, r20
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
     654:	9a 01       	movw	r18, r20
     656:	27 5e       	subi	r18, 0xE7	; 231
     658:	3f 4f       	sbci	r19, 0xFF	; 255
     65a:	d8 01       	movw	r26, r16
     65c:	8d 91       	ld	r24, X+
     65e:	9c 91       	ld	r25, X
     660:	11 97       	sbiw	r26, 0x01	; 1
     662:	28 17       	cp	r18, r24
     664:	39 07       	cpc	r19, r25
     666:	28 f0       	brcs	.+10     	; 0x672 <bmschip_writeConfig+0xae>
     668:	8d 91       	ld	r24, X+
     66a:	9c 91       	ld	r25, X
     66c:	48 17       	cp	r20, r24
     66e:	59 07       	cpc	r21, r25
     670:	a0 f3       	brcs	.-24     	; 0x65a <bmschip_writeConfig+0x96>
     672:	f8 01       	movw	r30, r16
     674:	80 81       	ld	r24, Z
     676:	91 81       	ldd	r25, Z+1	; 0x01
     678:	84 17       	cp	r24, r20
     67a:	95 07       	cpc	r25, r21
     67c:	50 f4       	brcc	.+20     	; 0x692 <bmschip_writeConfig+0xce>
     67e:	80 81       	ld	r24, Z
     680:	91 81       	ldd	r25, Z+1	; 0x01
     682:	d7 01       	movw	r26, r14
     684:	6d 91       	ld	r22, X+
     686:	7c 91       	ld	r23, X
     688:	86 0f       	add	r24, r22
     68a:	97 1f       	adc	r25, r23
     68c:	82 17       	cp	r24, r18
     68e:	93 07       	cpc	r25, r19
     690:	20 f3       	brcs	.-56     	; 0x65a <bmschip_writeConfig+0x96>
	
	cmd[2] = GET_HIGH_BYTE(pec);
	cmd[3] = GET_LOW_BYTE(pec);
	
	//Befehl und PEC schreiben
	for (i=0; i<slave_boards; i++)
     692:	b3 94       	inc	r11
     694:	80 91 24 07 	lds	r24, 0x0724
     698:	b8 16       	cp	r11, r24
     69a:	58 f2       	brcs	.-106    	; 0x632 <bmschip_writeConfig+0x6e>
		spi.locked=0;
		wait_count = TCNT1;
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
	
	}	
	while(!(bmschip_spi_rw(cmd, 4)));	//Command schicken
     69c:	64 e0       	ldi	r22, 0x04	; 4
     69e:	ce 01       	movw	r24, r28
     6a0:	01 96       	adiw	r24, 0x01	; 1
     6a2:	0e 94 a6 01 	call	0x34c	; 0x34c <bmschip_spi_rw>
     6a6:	88 23       	and	r24, r24
     6a8:	c9 f3       	breq	.-14     	; 0x69c <bmschip_writeConfig+0xd8>
	
	//CS nicht auf HIGH setzen! 
	//Jetzt Uebertragung der einzelnen Chip-Configs
	spi.locked=0;
     6aa:	10 92 6c 07 	sts	0x076C, r1
	for (i=0;i<slave_boards;i++)
     6ae:	e0 91 24 07 	lds	r30, 0x0724
     6b2:	ee 23       	and	r30, r30
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <bmschip_writeConfig+0xf4>
     6b6:	64 c0       	rjmp	.+200    	; 0x780 <bmschip_writeConfig+0x1bc>
     6b8:	d1 2c       	mov	r13, r1
	{
		if(IS_TRUE(flagBalActiv))		//Abfrage, ob gebalanced werden darf?
     6ba:	0f 2e       	mov	r0, r31
     6bc:	f9 ec       	ldi	r31, 0xC9	; 201
     6be:	8f 2e       	mov	r8, r31
     6c0:	f7 e0       	ldi	r31, 0x07	; 7
     6c2:	9f 2e       	mov	r9, r31
     6c4:	f0 2d       	mov	r31, r0
		{
			bmschip_writeDischarge(bms.balancing.cells[slave_boards-i-1], 0x1);
		}
		else
		{
			ltc6804.config[4]=0x00;
     6c6:	0f 2e       	mov	r0, r31
     6c8:	fd e2       	ldi	r31, 0x2D	; 45
     6ca:	ef 2e       	mov	r14, r31
     6cc:	f7 e0       	ldi	r31, 0x07	; 7
     6ce:	ff 2e       	mov	r15, r31
     6d0:	f0 2d       	mov	r31, r0
			ltc6804.config[5]=0x00;
     6d2:	0e e2       	ldi	r16, 0x2E	; 46
     6d4:	17 e0       	ldi	r17, 0x07	; 7
		}
		//Konfigurationsdaten der einzelnen Slaves 
		cmd[4] = ltc6804.config[0];
     6d6:	0f 2e       	mov	r0, r31
     6d8:	f9 e2       	ldi	r31, 0x29	; 41
     6da:	af 2e       	mov	r10, r31
     6dc:	f7 e0       	ldi	r31, 0x07	; 7
     6de:	bf 2e       	mov	r11, r31
     6e0:	f0 2d       	mov	r31, r0
		cmd[5] = ltc6804.config[1];
		cmd[6] = ltc6804.config[2];
     6e2:	0f 2e       	mov	r0, r31
     6e4:	fb e2       	ldi	r31, 0x2B	; 43
     6e6:	6f 2e       	mov	r6, r31
     6e8:	f7 e0       	ldi	r31, 0x07	; 7
     6ea:	7f 2e       	mov	r7, r31
     6ec:	f0 2d       	mov	r31, r0
		cmd[7] = ltc6804.config[3];
     6ee:	0f 2e       	mov	r0, r31
     6f0:	fc e2       	ldi	r31, 0x2C	; 44
     6f2:	4f 2e       	mov	r4, r31
     6f4:	f7 e0       	ldi	r31, 0x07	; 7
     6f6:	5f 2e       	mov	r5, r31
     6f8:	f0 2d       	mov	r31, r0
		pec = Pec15(&(cmd[4]), 6);
		cmd[10] = GET_HIGH_BYTE(pec);
		cmd[11] = GET_LOW_BYTE(pec);
		
		while(!(bmschip_spi_rw(&cmd[4], 8)));
		spi.locked=0;
     6fa:	0f 2e       	mov	r0, r31
     6fc:	fc e6       	ldi	r31, 0x6C	; 108
     6fe:	2f 2e       	mov	r2, r31
     700:	f7 e0       	ldi	r31, 0x07	; 7
     702:	3f 2e       	mov	r3, r31
     704:	f0 2d       	mov	r31, r0
	//CS nicht auf HIGH setzen! 
	//Jetzt Uebertragung der einzelnen Chip-Configs
	spi.locked=0;
	for (i=0;i<slave_boards;i++)
	{
		if(IS_TRUE(flagBalActiv))		//Abfrage, ob gebalanced werden darf?
     706:	d4 01       	movw	r26, r8
     708:	8c 91       	ld	r24, X
     70a:	86 ff       	sbrs	r24, 6
     70c:	0d c0       	rjmp	.+26     	; 0x728 <bmschip_writeConfig+0x164>
		{
			bmschip_writeDischarge(bms.balancing.cells[slave_boards-i-1], 0x1);
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	ed 19       	sub	r30, r13
     712:	f1 09       	sbc	r31, r1
     714:	ee 0f       	add	r30, r30
     716:	ff 1f       	adc	r31, r31
     718:	e7 5a       	subi	r30, 0xA7	; 167
     71a:	f6 4f       	sbci	r31, 0xF6	; 246
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	80 81       	ld	r24, Z
     720:	91 81       	ldd	r25, Z+1	; 0x01
     722:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <bmschip_writeDischarge>
     726:	04 c0       	rjmp	.+8      	; 0x730 <bmschip_writeConfig+0x16c>
		}
		else
		{
			ltc6804.config[4]=0x00;
     728:	f7 01       	movw	r30, r14
     72a:	10 82       	st	Z, r1
			ltc6804.config[5]=0x00;
     72c:	d8 01       	movw	r26, r16
     72e:	1c 92       	st	X, r1
		}
		//Konfigurationsdaten der einzelnen Slaves 
		cmd[4] = ltc6804.config[0];
     730:	f5 01       	movw	r30, r10
     732:	80 81       	ld	r24, Z
     734:	8d 83       	std	Y+5, r24	; 0x05
		cmd[5] = ltc6804.config[1];
     736:	aa e2       	ldi	r26, 0x2A	; 42
     738:	b7 e0       	ldi	r27, 0x07	; 7
     73a:	8c 91       	ld	r24, X
     73c:	8e 83       	std	Y+6, r24	; 0x06
		cmd[6] = ltc6804.config[2];
     73e:	f3 01       	movw	r30, r6
     740:	80 81       	ld	r24, Z
     742:	8f 83       	std	Y+7, r24	; 0x07
		cmd[7] = ltc6804.config[3];
     744:	d2 01       	movw	r26, r4
     746:	8c 91       	ld	r24, X
     748:	88 87       	std	Y+8, r24	; 0x08
		cmd[8] = ltc6804.config[4];
     74a:	f7 01       	movw	r30, r14
     74c:	80 81       	ld	r24, Z
     74e:	89 87       	std	Y+9, r24	; 0x09
		cmd[9] = ltc6804.config[5];
     750:	d8 01       	movw	r26, r16
     752:	8c 91       	ld	r24, X
     754:	8a 87       	std	Y+10, r24	; 0x0a
		pec = Pec15(&(cmd[4]), 6);
     756:	66 e0       	ldi	r22, 0x06	; 6
     758:	ce 01       	movw	r24, r28
     75a:	05 96       	adiw	r24, 0x05	; 5
     75c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <Pec15>
		cmd[10] = GET_HIGH_BYTE(pec);
     760:	9b 87       	std	Y+11, r25	; 0x0b
		cmd[11] = GET_LOW_BYTE(pec);
     762:	8c 87       	std	Y+12, r24	; 0x0c
		
		while(!(bmschip_spi_rw(&cmd[4], 8)));
     764:	68 e0       	ldi	r22, 0x08	; 8
     766:	ce 01       	movw	r24, r28
     768:	05 96       	adiw	r24, 0x05	; 5
     76a:	0e 94 a6 01 	call	0x34c	; 0x34c <bmschip_spi_rw>
     76e:	88 23       	and	r24, r24
     770:	c9 f3       	breq	.-14     	; 0x764 <bmschip_writeConfig+0x1a0>
		spi.locked=0;
     772:	f1 01       	movw	r30, r2
     774:	10 82       	st	Z, r1
	while(!(bmschip_spi_rw(cmd, 4)));	//Command schicken
	
	//CS nicht auf HIGH setzen! 
	//Jetzt Uebertragung der einzelnen Chip-Configs
	spi.locked=0;
	for (i=0;i<slave_boards;i++)
     776:	d3 94       	inc	r13
     778:	e0 91 24 07 	lds	r30, 0x0724
     77c:	de 16       	cp	r13, r30
     77e:	18 f2       	brcs	.-122    	; 0x706 <bmschip_writeConfig+0x142>
		
		while(!(bmschip_spi_rw(&cmd[4], 8)));
		spi.locked=0;
	}
	
	SPI_CS_LTC6804_HIGH;
     780:	41 9a       	sbi	0x08, 1	; 8
	spi.locked=0;
     782:	10 92 6c 07 	sts	0x076C, r1
	
	//Konfiguration zur Kontrolle lesen
	for (i=0; i<=slave_boards; i++)		//Der Reihe nach wird jetzt die Konfiguration der Boards eingeholt
     786:	b1 2c       	mov	r11, r1
			SPI_CS_LTC6804_HIGH;
			spi.locked=0;
			return 1;
		}
		
		if(IS_FALSE(flagBalActiv))	//nicht beim Balancing, sondern bei Neukonfiguration
     788:	09 ec       	ldi	r16, 0xC9	; 201
     78a:	17 e0       	ldi	r17, 0x07	; 7
			//Gelesene Config auswerten
			if (i != 0) //nicht beim Senden der Konfig
			{
				for(j=5;j<10;j++)	//Erstes Byte vorerst nicht, da beim Lesen an GPIOs NICHT die Konfiguration, sondern die anliegende Spannung ausgegeben wird
				{
					if(cmdAns[j] != ltc6804.config[j-4])
     78c:	0f 2e       	mov	r0, r31
     78e:	fa e2       	ldi	r31, 0x2A	; 42
     790:	cf 2e       	mov	r12, r31
     792:	f7 e0       	ldi	r31, 0x07	; 7
     794:	df 2e       	mov	r13, r31
     796:	f0 2d       	mov	r31, r0
     798:	68 94       	set
     79a:	99 24       	eor	r9, r9
     79c:	91 f8       	bld	r9, 1
     79e:	a1 2c       	mov	r10, r1
						return 1;
					}
				}
			}
		}
		spi.locked = 0; //SPI muss freigegeben werden, wenn current_byte neu gesetzt werden soll
     7a0:	0f 2e       	mov	r0, r31
     7a2:	fc e6       	ldi	r31, 0x6C	; 108
     7a4:	ef 2e       	mov	r14, r31
     7a6:	f7 e0       	ldi	r31, 0x07	; 7
     7a8:	ff 2e       	mov	r15, r31
     7aa:	f0 2d       	mov	r31, r0
	spi.locked=0;
	
	//Konfiguration zur Kontrolle lesen
	for (i=0; i<=slave_boards; i++)		//Der Reihe nach wird jetzt die Konfiguration der Boards eingeholt
	{
		if(bmschip_readConfig(cmdAns, size, i) != 0)		//Konfiguration der Zellen auslesen
     7ac:	4b 2d       	mov	r20, r11
     7ae:	6c e0       	ldi	r22, 0x0C	; 12
     7b0:	ce 01       	movw	r24, r28
     7b2:	0d 96       	adiw	r24, 0x0d	; 13
     7b4:	0e 94 74 02 	call	0x4e8	; 0x4e8 <bmschip_readConfig>
     7b8:	88 23       	and	r24, r24
     7ba:	29 f0       	breq	.+10     	; 0x7c6 <bmschip_writeConfig+0x202>
		{
			SPI_CS_LTC6804_HIGH;
     7bc:	41 9a       	sbi	0x08, 1	; 8
			spi.locked=0;
     7be:	10 92 6c 07 	sts	0x076C, r1
			return 1;
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	2a c0       	rjmp	.+84     	; 0x81a <bmschip_writeConfig+0x256>
		}
		
		if(IS_FALSE(flagBalActiv))	//nicht beim Balancing, sondern bei Neukonfiguration
     7c6:	d8 01       	movw	r26, r16
     7c8:	8c 91       	ld	r24, X
     7ca:	86 fd       	sbrc	r24, 6
     7cc:	1b c0       	rjmp	.+54     	; 0x804 <bmschip_writeConfig+0x240>
		{
			//Gelesene Config auswerten
			if (i != 0) //nicht beim Senden der Konfig
     7ce:	bb 20       	and	r11, r11
     7d0:	c9 f0       	breq	.+50     	; 0x804 <bmschip_writeConfig+0x240>
			{
				for(j=5;j<10;j++)	//Erstes Byte vorerst nicht, da beim Lesen an GPIOs NICHT die Konfiguration, sondern die anliegende Spannung ausgegeben wird
				{
					if(cmdAns[j] != ltc6804.config[j-4])
     7d2:	f6 01       	movw	r30, r12
     7d4:	80 81       	ld	r24, Z
     7d6:	9a 89       	ldd	r25, Y+18	; 0x12
     7d8:	98 13       	cpse	r25, r24
     7da:	0b c0       	rjmp	.+22     	; 0x7f2 <bmschip_writeConfig+0x22e>
     7dc:	fe 01       	movw	r30, r28
     7de:	73 96       	adiw	r30, 0x13	; 19
     7e0:	89 2d       	mov	r24, r9
     7e2:	9a 2d       	mov	r25, r10
     7e4:	31 91       	ld	r19, Z+
     7e6:	dc 01       	movw	r26, r24
     7e8:	a7 5d       	subi	r26, 0xD7	; 215
     7ea:	b8 4f       	sbci	r27, 0xF8	; 248
     7ec:	2c 91       	ld	r18, X
     7ee:	32 17       	cp	r19, r18
     7f0:	29 f0       	breq	.+10     	; 0x7fc <bmschip_writeConfig+0x238>
					{
						SPI_CS_LTC6804_HIGH;
     7f2:	41 9a       	sbi	0x08, 1	; 8
						spi.locked=0;
     7f4:	10 92 6c 07 	sts	0x076C, r1
						return 1;
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	0f c0       	rjmp	.+30     	; 0x81a <bmschip_writeConfig+0x256>
     7fc:	01 96       	adiw	r24, 0x01	; 1
		if(IS_FALSE(flagBalActiv))	//nicht beim Balancing, sondern bei Neukonfiguration
		{
			//Gelesene Config auswerten
			if (i != 0) //nicht beim Senden der Konfig
			{
				for(j=5;j<10;j++)	//Erstes Byte vorerst nicht, da beim Lesen an GPIOs NICHT die Konfiguration, sondern die anliegende Spannung ausgegeben wird
     7fe:	86 30       	cpi	r24, 0x06	; 6
     800:	91 05       	cpc	r25, r1
     802:	81 f7       	brne	.-32     	; 0x7e4 <bmschip_writeConfig+0x220>
						return 1;
					}
				}
			}
		}
		spi.locked = 0; //SPI muss freigegeben werden, wenn current_byte neu gesetzt werden soll
     804:	d7 01       	movw	r26, r14
     806:	1c 92       	st	X, r1
	
	SPI_CS_LTC6804_HIGH;
	spi.locked=0;
	
	//Konfiguration zur Kontrolle lesen
	for (i=0; i<=slave_boards; i++)		//Der Reihe nach wird jetzt die Konfiguration der Boards eingeholt
     808:	b3 94       	inc	r11
     80a:	80 91 24 07 	lds	r24, 0x0724
     80e:	8b 15       	cp	r24, r11
     810:	68 f6       	brcc	.-102    	; 0x7ac <bmschip_writeConfig+0x1e8>
				}
			}
		}
		spi.locked = 0; //SPI muss freigegeben werden, wenn current_byte neu gesetzt werden soll
	}
	SPI_CS_LTC6804_HIGH;
     812:	41 9a       	sbi	0x08, 1	; 8
	spi.locked=0;
     814:	10 92 6c 07 	sts	0x076C, r1

	return 0;
     818:	80 e0       	ldi	r24, 0x00	; 0
}
     81a:	68 96       	adiw	r28, 0x18	; 24
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ff 90       	pop	r15
     830:	ef 90       	pop	r14
     832:	df 90       	pop	r13
     834:	cf 90       	pop	r12
     836:	bf 90       	pop	r11
     838:	af 90       	pop	r10
     83a:	9f 90       	pop	r9
     83c:	8f 90       	pop	r8
     83e:	7f 90       	pop	r7
     840:	6f 90       	pop	r6
     842:	5f 90       	pop	r5
     844:	4f 90       	pop	r4
     846:	3f 90       	pop	r3
     848:	2f 90       	pop	r2
     84a:	08 95       	ret

0000084c <bmschip_init>:
*/
// *****************************************************************************************

// *** Funktion zur Initialisierung der LTC6804 - Slaves ***********************************
void bmschip_init(uint16_t undervoltage, uint16_t overvoltage)
{
     84c:	bf 92       	push	r11
     84e:	cf 92       	push	r12
     850:	df 92       	push	r13
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	1f 92       	push	r1
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
	uint8_t i, cmd=0x00;
     864:	19 82       	std	Y+1, r1	; 0x01
	uint8_t *p_cmd = &cmd;
	
	
	// Befehlsregister fuer Zellspannungen lesen initialisieren
	//Group A
	ltc6804.adcv[0][0] = 0x00;	// 00000000	Konfigurations-Befehl
     866:	10 92 2f 07 	sts	0x072F, r1
	ltc6804.adcv[0][1] = 0x04;	// 00000100	Konfigurations-Befehl
     86a:	84 e0       	ldi	r24, 0x04	; 4
     86c:	80 93 30 07 	sts	0x0730, r24
	ltc6804.adcv[0][2] = 0x07; 	// 00000111 PEC-High-Byte
     870:	97 e0       	ldi	r25, 0x07	; 7
     872:	90 93 31 07 	sts	0x0731, r25
	ltc6804.adcv[0][3] = 0xc2;	// 11000010 PEC-Low-Byte
     876:	92 ec       	ldi	r25, 0xC2	; 194
     878:	90 93 32 07 	sts	0x0732, r25
	//Group B
	ltc6804.adcv[1][0] = 0x00;	// 00000000	Konfigurations-Befehl	
     87c:	10 92 33 07 	sts	0x0733, r1
	ltc6804.adcv[1][1] = 0x06;	// 00000110	Konfigurations-Befehl
     880:	96 e0       	ldi	r25, 0x06	; 6
     882:	90 93 34 07 	sts	0x0734, r25
	ltc6804.adcv[1][2] = 0x9a;	// 10011010 PEC-High-Byte
     886:	9a e9       	ldi	r25, 0x9A	; 154
     888:	90 93 35 07 	sts	0x0735, r25
	ltc6804.adcv[1][3] = 0x94;	// 10010100 PEC-Low-Byte
     88c:	94 e9       	ldi	r25, 0x94	; 148
     88e:	90 93 36 07 	sts	0x0736, r25
	//Group C
	ltc6804.adcv[2][0] = 0x00;	// 00000000	Konfigurations-Befehl
     892:	10 92 37 07 	sts	0x0737, r1
	ltc6804.adcv[2][1] = 0x08;	// 00001000	Konfigurations-Befehl
     896:	98 e0       	ldi	r25, 0x08	; 8
     898:	90 93 38 07 	sts	0x0738, r25
	ltc6804.adcv[2][2] = 0x5e;	// 01011110 PEC-High-Byte
     89c:	9e e5       	ldi	r25, 0x5E	; 94
     89e:	90 93 39 07 	sts	0x0739, r25
	ltc6804.adcv[2][3] = 0x52;	// 01010010 PEC-Low-Byte
     8a2:	92 e5       	ldi	r25, 0x52	; 82
     8a4:	90 93 3a 07 	sts	0x073A, r25
	//Group D
	ltc6804.adcv[3][0] = 0x00;	// 00000000	Konfigurations-Befehl		
     8a8:	10 92 3b 07 	sts	0x073B, r1
	ltc6804.adcv[3][1] = 0x0A;	// 00001010	Konfigurations-Befehl
     8ac:	9a e0       	ldi	r25, 0x0A	; 10
     8ae:	90 93 3c 07 	sts	0x073C, r25
	ltc6804.adcv[3][2] = 0xc3;	// 11000011 PEC-High-Byte
     8b2:	93 ec       	ldi	r25, 0xC3	; 195
     8b4:	90 93 3d 07 	sts	0x073D, r25
	ltc6804.adcv[3][3] = 0x04;	// 00000100 PEC-Low-Byte
     8b8:	80 93 3e 07 	sts	0x073E, r24
	
	for(i=0; i<slave_boards; i++)	//Keine Zelle darf zu Beginn gebalanced werden
     8bc:	90 91 24 07 	lds	r25, 0x0724
     8c0:	99 23       	and	r25, r25
     8c2:	41 f0       	breq	.+16     	; 0x8d4 <bmschip_init+0x88>
     8c4:	eb e5       	ldi	r30, 0x5B	; 91
     8c6:	f9 e0       	ldi	r31, 0x09	; 9
     8c8:	80 e0       	ldi	r24, 0x00	; 0
	{
		bms.balancing.cells[i]= 0x0000;
     8ca:	11 92       	st	Z+, r1
     8cc:	11 92       	st	Z+, r1
	ltc6804.adcv[3][0] = 0x00;	// 00000000	Konfigurations-Befehl		
	ltc6804.adcv[3][1] = 0x0A;	// 00001010	Konfigurations-Befehl
	ltc6804.adcv[3][2] = 0xc3;	// 11000011 PEC-High-Byte
	ltc6804.adcv[3][3] = 0x04;	// 00000100 PEC-Low-Byte
	
	for(i=0; i<slave_boards; i++)	//Keine Zelle darf zu Beginn gebalanced werden
     8ce:	8f 5f       	subi	r24, 0xFF	; 255
     8d0:	89 17       	cp	r24, r25
     8d2:	d8 f3       	brcs	.-10     	; 0x8ca <bmschip_init+0x7e>
	{
		bms.balancing.cells[i]= 0x0000;
	}
	bms.bms_flag = 0x00;	//Alle Flags erst einmal ausschalten
     8d4:	10 92 c9 07 	sts	0x07C9, r1
	
	bms.balancing.undervoltage = UNDERVOLT;	//erwuenschte Unterspannung übertragen
     8d8:	88 ea       	ldi	r24, 0xA8	; 168
     8da:	91 e6       	ldi	r25, 0x61	; 97
     8dc:	90 93 a0 09 	sts	0x09A0, r25
     8e0:	80 93 9f 09 	sts	0x099F, r24
	bms.balancing.overvoltage = OVERVOLT;	//erwuenschte Ueberspannung übertragen
     8e4:	80 e1       	ldi	r24, 0x10	; 16
     8e6:	94 ea       	ldi	r25, 0xA4	; 164
     8e8:	90 93 a2 09 	sts	0x09A2, r25
     8ec:	80 93 a1 09 	sts	0x09A1, r24
	bmschip_setOvUnVoltage(&bms.balancing.undervoltage, &bms.balancing.overvoltage);	//Tatsaechlich moegliche Grenzen für den LTC6804 bestimmen
     8f0:	61 ea       	ldi	r22, 0xA1	; 161
     8f2:	79 e0       	ldi	r23, 0x09	; 9
     8f4:	8f e9       	ldi	r24, 0x9F	; 159
     8f6:	99 e0       	ldi	r25, 0x09	; 9
     8f8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <bmschip_setOvUnVoltage>
	for (i=0; i<slave_boards; i++)
     8fc:	80 91 24 07 	lds	r24, 0x0724
     900:	88 23       	and	r24, r24
     902:	09 f4       	brne	.+2      	; 0x906 <bmschip_init+0xba>
     904:	42 c0       	rjmp	.+132    	; 0x98a <bmschip_init+0x13e>
     906:	b1 2c       	mov	r11, r1
	{
		while(!(bmschip_spi_rw(p_cmd, 1)));	//Dummybyte, um den isoSPI aufzuwecken
		
		SPI_CS_LTC6804_HIGH;
		spi.locked=0;
     908:	0f 2e       	mov	r0, r31
     90a:	fc e6       	ldi	r31, 0x6C	; 108
     90c:	cf 2e       	mov	r12, r31
     90e:	f7 e0       	ldi	r31, 0x07	; 7
     910:	df 2e       	mov	r13, r31
     912:	f0 2d       	mov	r31, r0
		wait_count = TCNT1;
     914:	04 e8       	ldi	r16, 0x84	; 132
     916:	10 e0       	ldi	r17, 0x00	; 0
		while ((((wait_count + 800) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 800))));	//400us
     918:	0f 2e       	mov	r0, r31
     91a:	f6 e8       	ldi	r31, 0x86	; 134
     91c:	ef 2e       	mov	r14, r31
     91e:	f1 2c       	mov	r15, r1
     920:	f0 2d       	mov	r31, r0
	bms.balancing.undervoltage = UNDERVOLT;	//erwuenschte Unterspannung übertragen
	bms.balancing.overvoltage = OVERVOLT;	//erwuenschte Ueberspannung übertragen
	bmschip_setOvUnVoltage(&bms.balancing.undervoltage, &bms.balancing.overvoltage);	//Tatsaechlich moegliche Grenzen für den LTC6804 bestimmen
	for (i=0; i<slave_boards; i++)
	{
		while(!(bmschip_spi_rw(p_cmd, 1)));	//Dummybyte, um den isoSPI aufzuwecken
     922:	61 e0       	ldi	r22, 0x01	; 1
     924:	ce 01       	movw	r24, r28
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	0e 94 a6 01 	call	0x34c	; 0x34c <bmschip_spi_rw>
     92c:	88 23       	and	r24, r24
     92e:	c9 f3       	breq	.-14     	; 0x922 <bmschip_init+0xd6>
		
		SPI_CS_LTC6804_HIGH;
     930:	41 9a       	sbi	0x08, 1	; 8
		spi.locked=0;
     932:	f6 01       	movw	r30, r12
     934:	10 82       	st	Z, r1
		wait_count = TCNT1;
     936:	f8 01       	movw	r30, r16
     938:	40 81       	ld	r20, Z
     93a:	51 81       	ldd	r21, Z+1	; 0x01
     93c:	50 93 28 07 	sts	0x0728, r21
     940:	40 93 27 07 	sts	0x0727, r20
		while ((((wait_count + 800) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 800))));	//400us
     944:	9a 01       	movw	r18, r20
     946:	20 5e       	subi	r18, 0xE0	; 224
     948:	3c 4f       	sbci	r19, 0xFC	; 252
     94a:	f8 01       	movw	r30, r16
     94c:	80 81       	ld	r24, Z
     94e:	91 81       	ldd	r25, Z+1	; 0x01
     950:	28 17       	cp	r18, r24
     952:	39 07       	cpc	r19, r25
     954:	28 f0       	brcs	.+10     	; 0x960 <bmschip_init+0x114>
     956:	80 81       	ld	r24, Z
     958:	91 81       	ldd	r25, Z+1	; 0x01
     95a:	48 17       	cp	r20, r24
     95c:	59 07       	cpc	r21, r25
     95e:	a8 f3       	brcs	.-22     	; 0x94a <bmschip_init+0xfe>
     960:	f8 01       	movw	r30, r16
     962:	80 81       	ld	r24, Z
     964:	91 81       	ldd	r25, Z+1	; 0x01
     966:	84 17       	cp	r24, r20
     968:	95 07       	cpc	r25, r21
     96a:	50 f4       	brcc	.+20     	; 0x980 <bmschip_init+0x134>
     96c:	80 81       	ld	r24, Z
     96e:	91 81       	ldd	r25, Z+1	; 0x01
     970:	f7 01       	movw	r30, r14
     972:	60 81       	ld	r22, Z
     974:	71 81       	ldd	r23, Z+1	; 0x01
     976:	86 0f       	add	r24, r22
     978:	97 1f       	adc	r25, r23
     97a:	82 17       	cp	r24, r18
     97c:	93 07       	cpc	r25, r19
     97e:	28 f3       	brcs	.-54     	; 0x94a <bmschip_init+0xfe>
	bms.bms_flag = 0x00;	//Alle Flags erst einmal ausschalten
	
	bms.balancing.undervoltage = UNDERVOLT;	//erwuenschte Unterspannung übertragen
	bms.balancing.overvoltage = OVERVOLT;	//erwuenschte Ueberspannung übertragen
	bmschip_setOvUnVoltage(&bms.balancing.undervoltage, &bms.balancing.overvoltage);	//Tatsaechlich moegliche Grenzen für den LTC6804 bestimmen
	for (i=0; i<slave_boards; i++)
     980:	b3 94       	inc	r11
     982:	80 91 24 07 	lds	r24, 0x0724
     986:	b8 16       	cp	r11, r24
     988:	60 f2       	brcs	.-104    	; 0x922 <bmschip_init+0xd6>
		SPI_CS_LTC6804_HIGH;
		spi.locked=0;
		wait_count = TCNT1;
		while ((((wait_count + 800) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 800))));	//400us
	}
	bmschip_writeConfig();
     98a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <bmschip_writeConfig>
}
     98e:	0f 90       	pop	r0
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	ff 90       	pop	r15
     99a:	ef 90       	pop	r14
     99c:	df 90       	pop	r13
     99e:	cf 90       	pop	r12
     9a0:	bf 90       	pop	r11
     9a2:	08 95       	ret

000009a4 <bmschip_getVoltages>:
}
// *****************************************************************************************

// *** Funktion zum messen der Zellspannungen **********************************************
uint8_t bmschip_getVoltages(uint16_t *voltage)
{
     9a4:	2f 92       	push	r2
     9a6:	3f 92       	push	r3
     9a8:	4f 92       	push	r4
     9aa:	5f 92       	push	r5
     9ac:	6f 92       	push	r6
     9ae:	7f 92       	push	r7
     9b0:	8f 92       	push	r8
     9b2:	9f 92       	push	r9
     9b4:	af 92       	push	r10
     9b6:	bf 92       	push	r11
     9b8:	cf 92       	push	r12
     9ba:	df 92       	push	r13
     9bc:	ef 92       	push	r14
     9be:	ff 92       	push	r15
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
     9cc:	6a 97       	sbiw	r28, 0x1a	; 26
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	de bf       	out	0x3e, r29	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	cd bf       	out	0x3d, r28	; 61
     9d8:	6c 01       	movw	r12, r24
	uint8_t receive[8];
	uint16_t wait_count;		//Wartezeit für ADC-Messung vom LTC6804
	uint32_t wait_milli;		//Wartezeit in Millisekunden

	// LTC ADC starten
	bmschip_startAdc();
     9da:	0e 94 db 01 	call	0x3b6	; 0x3b6 <bmschip_startAdc>
	
	//LTC ADC Wandlung abwarten (2500us) 
	//1 Zaehlschritt entspricht 0.5us
	wait_count = TCNT1;
     9de:	20 91 84 00 	lds	r18, 0x0084
     9e2:	30 91 85 00 	lds	r19, 0x0085
	wait_milli = millisec_count;
     9e6:	40 91 fc 06 	lds	r20, 0x06FC
     9ea:	50 91 fd 06 	lds	r21, 0x06FD
     9ee:	60 91 fe 06 	lds	r22, 0x06FE
     9f2:	70 91 ff 06 	lds	r23, 0x06FF
	while((wait_milli+2) > millisec_count);	//2000us
     9f6:	4e 5f       	subi	r20, 0xFE	; 254
     9f8:	5f 4f       	sbci	r21, 0xFF	; 255
     9fa:	6f 4f       	sbci	r22, 0xFF	; 255
     9fc:	7f 4f       	sbci	r23, 0xFF	; 255
     9fe:	80 91 fc 06 	lds	r24, 0x06FC
     a02:	90 91 fd 06 	lds	r25, 0x06FD
     a06:	a0 91 fe 06 	lds	r26, 0x06FE
     a0a:	b0 91 ff 06 	lds	r27, 0x06FF
     a0e:	84 17       	cp	r24, r20
     a10:	95 07       	cpc	r25, r21
     a12:	a6 07       	cpc	r26, r22
     a14:	b7 07       	cpc	r27, r23
     a16:	98 f3       	brcs	.-26     	; 0x9fe <bmschip_getVoltages+0x5a>
	while(wait_count >= TCNT1);
     a18:	e4 e8       	ldi	r30, 0x84	; 132
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	80 81       	ld	r24, Z
     a1e:	91 81       	ldd	r25, Z+1	; 0x01
     a20:	28 17       	cp	r18, r24
     a22:	39 07       	cpc	r19, r25
     a24:	d8 f7       	brcc	.-10     	; 0xa1c <bmschip_getVoltages+0x78>
	wait_count = TCNT1;
     a26:	40 91 84 00 	lds	r20, 0x0084
     a2a:	50 91 85 00 	lds	r21, 0x0085
	while ((((wait_count + 1000) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 1000)))); //500us
     a2e:	9a 01       	movw	r18, r20
     a30:	28 51       	subi	r18, 0x18	; 24
     a32:	3c 4f       	sbci	r19, 0xFC	; 252
     a34:	e4 e8       	ldi	r30, 0x84	; 132
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	a6 e8       	ldi	r26, 0x86	; 134
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	91 81       	ldd	r25, Z+1	; 0x01
     a40:	28 17       	cp	r18, r24
     a42:	39 07       	cpc	r19, r25
     a44:	28 f0       	brcs	.+10     	; 0xa50 <bmschip_getVoltages+0xac>
     a46:	80 81       	ld	r24, Z
     a48:	91 81       	ldd	r25, Z+1	; 0x01
     a4a:	48 17       	cp	r20, r24
     a4c:	59 07       	cpc	r21, r25
     a4e:	b0 f3       	brcs	.-20     	; 0xa3c <bmschip_getVoltages+0x98>
     a50:	80 81       	ld	r24, Z
     a52:	91 81       	ldd	r25, Z+1	; 0x01
     a54:	84 17       	cp	r24, r20
     a56:	95 07       	cpc	r25, r21
     a58:	50 f4       	brcc	.+20     	; 0xa6e <bmschip_getVoltages+0xca>
     a5a:	80 81       	ld	r24, Z
     a5c:	91 81       	ldd	r25, Z+1	; 0x01
     a5e:	6d 91       	ld	r22, X+
     a60:	7c 91       	ld	r23, X
     a62:	11 97       	sbiw	r26, 0x01	; 1
     a64:	86 0f       	add	r24, r22
     a66:	97 1f       	adc	r25, r23
     a68:	82 17       	cp	r24, r18
     a6a:	93 07       	cpc	r25, r19
     a6c:	38 f3       	brcs	.-50     	; 0xa3c <bmschip_getVoltages+0x98>
		while(!(bmschip_spi_rw(cmd, 4))); //Command schicken
		spi.locked = 0;
		
		for (i=0; i<slave_boards; i++)
		{
			while(!(bmschip_spi_rw(&cmd[4], 8)));
     a6e:	1a 8e       	std	Y+26, r1	; 0x1a
     a70:	19 8e       	std	Y+25, r1	; 0x19
     a72:	18 8e       	std	Y+24, r1	; 0x18
     a74:	1f 8a       	std	Y+23, r1	; 0x17
     a76:	ce 01       	movw	r24, r28
     a78:	05 96       	adiw	r24, 0x05	; 5
     a7a:	9e 8b       	std	Y+22, r25	; 0x16
     a7c:	8d 8b       	std	Y+21, r24	; 0x15
     a7e:	5e 01       	movw	r10, r28
     a80:	9d e0       	ldi	r25, 0x0D	; 13
     a82:	a9 0e       	add	r10, r25
     a84:	b1 1c       	adc	r11, r1
			cmd[i] = 0x00;
		}
		
		// Befehl und PEC schreiben
		while(!(bmschip_spi_rw(cmd, 4))); //Command schicken
		spi.locked = 0;
     a86:	0c e6       	ldi	r16, 0x6C	; 108
     a88:	17 e0       	ldi	r17, 0x07	; 7
		
		for (i=0; i<slave_boards; i++)
     a8a:	21 2c       	mov	r2, r1
		{
			while(!(bmschip_spi_rw(&cmd[4], 8)));
     a8c:	8d 88       	ldd	r8, Y+21	; 0x15
     a8e:	9e 88       	ldd	r9, Y+22	; 0x16
     a90:	5a 2c       	mov	r5, r10
     a92:	6b 2c       	mov	r6, r11
     a94:	31 2c       	mov	r3, r1
     a96:	41 2c       	mov	r4, r1
     a98:	7f c0       	rjmp	.+254    	; 0xb98 <bmschip_getVoltages+0x1f4>
		{
			cmd[i] = ltc6804.adcv[group][i];
		}
		for(i = 4; i < 12; i++)
		{
			cmd[i] = 0x00;
     a9a:	11 92       	st	Z+, r1
	{
		for(i = 0; i < 4; i++)
		{
			cmd[i] = ltc6804.adcv[group][i];
		}
		for(i = 4; i < 12; i++)
     a9c:	ea 15       	cp	r30, r10
     a9e:	fb 05       	cpc	r31, r11
     aa0:	e1 f7       	brne	.-8      	; 0xa9a <bmschip_getVoltages+0xf6>
		{
			cmd[i] = 0x00;
		}
		
		// Befehl und PEC schreiben
		while(!(bmschip_spi_rw(cmd, 4))); //Command schicken
     aa2:	64 e0       	ldi	r22, 0x04	; 4
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	0e 94 a6 01 	call	0x34c	; 0x34c <bmschip_spi_rw>
     aac:	88 23       	and	r24, r24
     aae:	c9 f3       	breq	.-14     	; 0xaa2 <bmschip_getVoltages+0xfe>
		spi.locked = 0;
     ab0:	f8 01       	movw	r30, r16
     ab2:	10 82       	st	Z, r1
		
		for (i=0; i<slave_boards; i++)
     ab4:	80 91 24 07 	lds	r24, 0x0724
     ab8:	88 23       	and	r24, r24
     aba:	09 f4       	brne	.+2      	; 0xabe <bmschip_getVoltages+0x11a>
     abc:	5e c0       	rjmp	.+188    	; 0xb7a <bmschip_getVoltages+0x1d6>
			//Emfangene Daten durch PEC-Berechnung pruefen
			pec = Pec15(&(receive[0]), 6);
			if(pec == ((((uint16_t)receive[6]) << 8) | receive[7]))	//Stimmt der PEC?
			{
				//Jeweilige Zellspannung in die entsprechende Nummer im Array übertragen (Standardmäßig: bms.volt.val[])
				voltage[group * 3 + (i*12)] = (((uint16_t)receive[1]) << 8) | receive[0];		
     abe:	e9 8c       	ldd	r14, Y+25	; 0x19
     ac0:	fa 8c       	ldd	r15, Y+26	; 0x1a
		
		// Befehl und PEC schreiben
		while(!(bmschip_spi_rw(cmd, 4))); //Command schicken
		spi.locked = 0;
		
		for (i=0; i<slave_boards; i++)
     ac2:	72 2c       	mov	r7, r2
		{
			while(!(bmschip_spi_rw(&cmd[4], 8)));
     ac4:	68 e0       	ldi	r22, 0x08	; 8
     ac6:	88 2d       	mov	r24, r8
     ac8:	99 2d       	mov	r25, r9
     aca:	0e 94 a6 01 	call	0x34c	; 0x34c <bmschip_spi_rw>
     ace:	88 23       	and	r24, r24
     ad0:	c9 f3       	breq	.-14     	; 0xac4 <bmschip_getVoltages+0x120>
     ad2:	e5 2d       	mov	r30, r5
     ad4:	f6 2d       	mov	r31, r6
     ad6:	83 2d       	mov	r24, r3
     ad8:	94 2d       	mov	r25, r4
			for (k=0; k<8; k++)
			{
				receive[k] = spi.rx_buffer.b[k];	//Empfangene Werte übernehmen
     ada:	dc 01       	movw	r26, r24
     adc:	a6 5b       	subi	r26, 0xB6	; 182
     ade:	b8 4f       	sbci	r27, 0xF8	; 248
     ae0:	50 96       	adiw	r26, 0x10	; 16
     ae2:	2c 91       	ld	r18, X
     ae4:	21 93       	st	Z+, r18
     ae6:	01 96       	adiw	r24, 0x01	; 1
		spi.locked = 0;
		
		for (i=0; i<slave_boards; i++)
		{
			while(!(bmschip_spi_rw(&cmd[4], 8)));
			for (k=0; k<8; k++)
     ae8:	88 30       	cpi	r24, 0x08	; 8
     aea:	91 05       	cpc	r25, r1
     aec:	b1 f7       	brne	.-20     	; 0xada <bmschip_getVoltages+0x136>
			{
				receive[k] = spi.rx_buffer.b[k];	//Empfangene Werte übernehmen
			}
			
			//Emfangene Daten durch PEC-Berechnung pruefen
			pec = Pec15(&(receive[0]), 6);
     aee:	66 e0       	ldi	r22, 0x06	; 6
     af0:	85 2d       	mov	r24, r5
     af2:	96 2d       	mov	r25, r6
     af4:	0e 94 50 02 	call	0x4a0	; 0x4a0 <Pec15>
			if(pec == ((((uint16_t)receive[6]) << 8) | receive[7]))	//Stimmt der PEC?
     af8:	2b 89       	ldd	r18, Y+19	; 0x13
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	32 2f       	mov	r19, r18
     afe:	22 27       	eor	r18, r18
     b00:	4c 89       	ldd	r20, Y+20	; 0x14
     b02:	24 2b       	or	r18, r20
     b04:	28 17       	cp	r18, r24
     b06:	39 07       	cpc	r19, r25
     b08:	99 f5       	brne	.+102    	; 0xb70 <bmschip_getVoltages+0x1cc>
			{
				//Jeweilige Zellspannung in die entsprechende Nummer im Array übertragen (Standardmäßig: bms.volt.val[])
				voltage[group * 3 + (i*12)] = (((uint16_t)receive[1]) << 8) | receive[0];		
     b0a:	87 2d       	mov	r24, r7
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	fc 01       	movw	r30, r24
     b10:	ee 0f       	add	r30, r30
     b12:	ff 1f       	adc	r31, r31
     b14:	8e 0f       	add	r24, r30
     b16:	9f 1f       	adc	r25, r31
     b18:	fc 01       	movw	r30, r24
     b1a:	ee 0f       	add	r30, r30
     b1c:	ff 1f       	adc	r31, r31
     b1e:	ee 0f       	add	r30, r30
     b20:	ff 1f       	adc	r31, r31
     b22:	ee 0f       	add	r30, r30
     b24:	ff 1f       	adc	r31, r31
     b26:	ee 0d       	add	r30, r14
     b28:	ff 1d       	adc	r31, r15
     b2a:	ec 0d       	add	r30, r12
     b2c:	fd 1d       	adc	r31, r13
     b2e:	8e 85       	ldd	r24, Y+14	; 0x0e
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	98 2f       	mov	r25, r24
     b34:	88 27       	eor	r24, r24
     b36:	2d 85       	ldd	r18, Y+13	; 0x0d
     b38:	82 2b       	or	r24, r18
     b3a:	91 83       	std	Z+1, r25	; 0x01
     b3c:	80 83       	st	Z, r24
				voltage[group * 3 + (i*12) + 1] = (((uint16_t)receive[3]) << 8) | receive[2];
     b3e:	88 89       	ldd	r24, Y+16	; 0x10
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	98 2f       	mov	r25, r24
     b44:	88 27       	eor	r24, r24
     b46:	2f 85       	ldd	r18, Y+15	; 0x0f
     b48:	82 2b       	or	r24, r18
     b4a:	93 83       	std	Z+3, r25	; 0x03
     b4c:	82 83       	std	Z+2, r24	; 0x02
				voltage[group * 3 + (i*12) + 2] = (((uint16_t)receive[5]) << 8) | receive[4];
     b4e:	8a 89       	ldd	r24, Y+18	; 0x12
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	98 2f       	mov	r25, r24
     b54:	88 27       	eor	r24, r24
     b56:	29 89       	ldd	r18, Y+17	; 0x11
     b58:	82 2b       	or	r24, r18
     b5a:	95 83       	std	Z+5, r25	; 0x05
     b5c:	84 83       	std	Z+4, r24	; 0x04
			{
				SPI_CS_LTC6804_HIGH;
				spi.locked = 0;
				return 1;
			}
			spi.locked = 0;
     b5e:	f8 01       	movw	r30, r16
     b60:	10 82       	st	Z, r1
		
		// Befehl und PEC schreiben
		while(!(bmschip_spi_rw(cmd, 4))); //Command schicken
		spi.locked = 0;
		
		for (i=0; i<slave_boards; i++)
     b62:	73 94       	inc	r7
     b64:	80 91 24 07 	lds	r24, 0x0724
     b68:	78 16       	cp	r7, r24
     b6a:	08 f4       	brcc	.+2      	; 0xb6e <bmschip_getVoltages+0x1ca>
     b6c:	ab cf       	rjmp	.-170    	; 0xac4 <bmschip_getVoltages+0x120>
     b6e:	05 c0       	rjmp	.+10     	; 0xb7a <bmschip_getVoltages+0x1d6>
				voltage[group * 3 + (i*12) + 1] = (((uint16_t)receive[3]) << 8) | receive[2];
				voltage[group * 3 + (i*12) + 2] = (((uint16_t)receive[5]) << 8) | receive[4];
			}
			else
			{
				SPI_CS_LTC6804_HIGH;
     b70:	41 9a       	sbi	0x08, 1	; 8
				spi.locked = 0;
     b72:	10 92 6c 07 	sts	0x076C, r1
				return 1;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	2b c0       	rjmp	.+86     	; 0xbd0 <bmschip_getVoltages+0x22c>
			}
			spi.locked = 0;
		}
		SPI_CS_LTC6804_HIGH;
     b7a:	41 9a       	sbi	0x08, 1	; 8
		spi.locked = 0;
     b7c:	f8 01       	movw	r30, r16
     b7e:	10 82       	st	Z, r1
     b80:	8f 89       	ldd	r24, Y+23	; 0x17
     b82:	98 8d       	ldd	r25, Y+24	; 0x18
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	98 8f       	std	Y+24, r25	; 0x18
     b88:	8f 8b       	std	Y+23, r24	; 0x17
     b8a:	e9 8d       	ldd	r30, Y+25	; 0x19
     b8c:	fa 8d       	ldd	r31, Y+26	; 0x1a
     b8e:	36 96       	adiw	r30, 0x06	; 6
     b90:	fa 8f       	std	Y+26, r31	; 0x1a
     b92:	e9 8f       	std	Y+25, r30	; 0x19
	while(wait_count >= TCNT1);
	wait_count = TCNT1;
	while ((((wait_count + 1000) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 1000)))); //500us
	
	//LTC Spannungen auslesen
	for(group = 0; group < 4; group++)		
     b94:	04 97       	sbiw	r24, 0x04	; 4
     b96:	d9 f0       	breq	.+54     	; 0xbce <bmschip_getVoltages+0x22a>
	{
		for(i = 0; i < 4; i++)
		{
			cmd[i] = ltc6804.adcv[group][i];
     b98:	ef 89       	ldd	r30, Y+23	; 0x17
     b9a:	f8 8d       	ldd	r31, Y+24	; 0x18
     b9c:	ee 0f       	add	r30, r30
     b9e:	ff 1f       	adc	r31, r31
     ba0:	ee 0f       	add	r30, r30
     ba2:	ff 1f       	adc	r31, r31
     ba4:	e7 5d       	subi	r30, 0xD7	; 215
     ba6:	f8 4f       	sbci	r31, 0xF8	; 248
     ba8:	86 81       	ldd	r24, Z+6	; 0x06
     baa:	89 83       	std	Y+1, r24	; 0x01
     bac:	87 81       	ldd	r24, Z+7	; 0x07
     bae:	8a 83       	std	Y+2, r24	; 0x02
     bb0:	af 89       	ldd	r26, Y+23	; 0x17
     bb2:	b8 8d       	ldd	r27, Y+24	; 0x18
     bb4:	aa 0f       	add	r26, r26
     bb6:	bb 1f       	adc	r27, r27
     bb8:	aa 0f       	add	r26, r26
     bba:	bb 1f       	adc	r27, r27
     bbc:	af 5c       	subi	r26, 0xCF	; 207
     bbe:	b8 4f       	sbci	r27, 0xF8	; 248
     bc0:	8c 91       	ld	r24, X
     bc2:	8b 83       	std	Y+3, r24	; 0x03
     bc4:	81 85       	ldd	r24, Z+9	; 0x09
     bc6:	8c 83       	std	Y+4, r24	; 0x04
     bc8:	fe 01       	movw	r30, r28
     bca:	35 96       	adiw	r30, 0x05	; 5
     bcc:	66 cf       	rjmp	.-308    	; 0xa9a <bmschip_getVoltages+0xf6>
		}
		SPI_CS_LTC6804_HIGH;
		spi.locked = 0;
	}

	return 0;
     bce:	80 e0       	ldi	r24, 0x00	; 0
}
     bd0:	6a 96       	adiw	r28, 0x1a	; 26
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	df 90       	pop	r13
     bea:	cf 90       	pop	r12
     bec:	bf 90       	pop	r11
     bee:	af 90       	pop	r10
     bf0:	9f 90       	pop	r9
     bf2:	8f 90       	pop	r8
     bf4:	7f 90       	pop	r7
     bf6:	6f 90       	pop	r6
     bf8:	5f 90       	pop	r5
     bfa:	4f 90       	pop	r4
     bfc:	3f 90       	pop	r3
     bfe:	2f 90       	pop	r2
     c00:	08 95       	ret

00000c02 <bmschip_startGPIO>:
}
// *****************************************************************************************

// *** Temperaturmessung *******************************************************************
void bmschip_startGPIO(uint8_t pin)
{
     c02:	af 92       	push	r10
     c04:	bf 92       	push	r11
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	00 d0       	rcall	.+0      	; 0xc18 <bmschip_startGPIO+0x16>
     c18:	00 d0       	rcall	.+0      	; 0xc1a <bmschip_startGPIO+0x18>
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	a8 2e       	mov	r10, r24
	uint8_t i;
	uint8_t cmd[4];
	uint16_t pec;
	
	
	cmd[0]=0x00;	
     c20:	19 82       	std	Y+1, r1	; 0x01
	for (i=0; i<slave_boards; i++)
     c22:	80 91 24 07 	lds	r24, 0x0724
     c26:	88 23       	and	r24, r24
     c28:	09 f4       	brne	.+2      	; 0xc2c <bmschip_startGPIO+0x2a>
     c2a:	42 c0       	rjmp	.+132    	; 0xcb0 <bmschip_startGPIO+0xae>
     c2c:	b1 2c       	mov	r11, r1
	{
		while(!(bmschip_spi_rw(cmd, 1)));		//Dummybyte, um den IsoSPI aufzuwecken
		SPI_CS_LTC6804_HIGH;
		spi.locked = 0;
     c2e:	0f 2e       	mov	r0, r31
     c30:	fc e6       	ldi	r31, 0x6C	; 108
     c32:	cf 2e       	mov	r12, r31
     c34:	f7 e0       	ldi	r31, 0x07	; 7
     c36:	df 2e       	mov	r13, r31
     c38:	f0 2d       	mov	r31, r0
		wait_count = TCNT1;
     c3a:	04 e8       	ldi	r16, 0x84	; 132
     c3c:	10 e0       	ldi	r17, 0x00	; 0
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
     c3e:	0f 2e       	mov	r0, r31
     c40:	f6 e8       	ldi	r31, 0x86	; 134
     c42:	ef 2e       	mov	r14, r31
     c44:	f1 2c       	mov	r15, r1
     c46:	f0 2d       	mov	r31, r0
	
	
	cmd[0]=0x00;	
	for (i=0; i<slave_boards; i++)
	{
		while(!(bmschip_spi_rw(cmd, 1)));		//Dummybyte, um den IsoSPI aufzuwecken
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	ce 01       	movw	r24, r28
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	0e 94 a6 01 	call	0x34c	; 0x34c <bmschip_spi_rw>
     c52:	88 23       	and	r24, r24
     c54:	c9 f3       	breq	.-14     	; 0xc48 <bmschip_startGPIO+0x46>
		SPI_CS_LTC6804_HIGH;
     c56:	41 9a       	sbi	0x08, 1	; 8
		spi.locked = 0;
     c58:	f6 01       	movw	r30, r12
     c5a:	10 82       	st	Z, r1
		wait_count = TCNT1;
     c5c:	f8 01       	movw	r30, r16
     c5e:	60 81       	ld	r22, Z
     c60:	71 81       	ldd	r23, Z+1	; 0x01
     c62:	70 93 28 07 	sts	0x0728, r23
     c66:	60 93 27 07 	sts	0x0727, r22
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
     c6a:	ab 01       	movw	r20, r22
     c6c:	47 5e       	subi	r20, 0xE7	; 231
     c6e:	5f 4f       	sbci	r21, 0xFF	; 255
     c70:	f8 01       	movw	r30, r16
     c72:	20 81       	ld	r18, Z
     c74:	31 81       	ldd	r19, Z+1	; 0x01
     c76:	42 17       	cp	r20, r18
     c78:	53 07       	cpc	r21, r19
     c7a:	28 f0       	brcs	.+10     	; 0xc86 <bmschip_startGPIO+0x84>
     c7c:	80 81       	ld	r24, Z
     c7e:	91 81       	ldd	r25, Z+1	; 0x01
     c80:	68 17       	cp	r22, r24
     c82:	79 07       	cpc	r23, r25
     c84:	a8 f3       	brcs	.-22     	; 0xc70 <bmschip_startGPIO+0x6e>
     c86:	f8 01       	movw	r30, r16
     c88:	20 81       	ld	r18, Z
     c8a:	31 81       	ldd	r19, Z+1	; 0x01
     c8c:	26 17       	cp	r18, r22
     c8e:	37 07       	cpc	r19, r23
     c90:	50 f4       	brcc	.+20     	; 0xca6 <bmschip_startGPIO+0xa4>
     c92:	80 81       	ld	r24, Z
     c94:	91 81       	ldd	r25, Z+1	; 0x01
     c96:	f7 01       	movw	r30, r14
     c98:	20 81       	ld	r18, Z
     c9a:	31 81       	ldd	r19, Z+1	; 0x01
     c9c:	82 0f       	add	r24, r18
     c9e:	93 1f       	adc	r25, r19
     ca0:	84 17       	cp	r24, r20
     ca2:	95 07       	cpc	r25, r21
     ca4:	28 f3       	brcs	.-54     	; 0xc70 <bmschip_startGPIO+0x6e>
	uint8_t cmd[4];
	uint16_t pec;
	
	
	cmd[0]=0x00;	
	for (i=0; i<slave_boards; i++)
     ca6:	b3 94       	inc	r11
     ca8:	80 91 24 07 	lds	r24, 0x0724
     cac:	b8 16       	cp	r11, r24
     cae:	60 f2       	brcs	.-104    	; 0xc48 <bmschip_startGPIO+0x46>
		wait_count = TCNT1;
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
	}
	
	//Messbefehl	
	cmd[0] = 0x05; // 00000101	ADAX0	Normal-Mode									
     cb0:	85 e0       	ldi	r24, 0x05	; 5
     cb2:	89 83       	std	Y+1, r24	; 0x01
	cmd[1] = 0x60; // 01100000	ADAX1	Normal-Mode, Balancing wird unterbrochen	
	
	switch(pin)
     cb4:	f3 e0       	ldi	r31, 0x03	; 3
     cb6:	af 16       	cp	r10, r31
     cb8:	d1 f0       	breq	.+52     	; 0xcee <bmschip_startGPIO+0xec>
     cba:	fa 15       	cp	r31, r10
     cbc:	38 f0       	brcs	.+14     	; 0xccc <bmschip_startGPIO+0xca>
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	a8 16       	cp	r10, r24
     cc2:	79 f0       	breq	.+30     	; 0xce2 <bmschip_startGPIO+0xe0>
     cc4:	e2 e0       	ldi	r30, 0x02	; 2
     cc6:	ae 16       	cp	r10, r30
     cc8:	79 f0       	breq	.+30     	; 0xce8 <bmschip_startGPIO+0xe6>
     cca:	08 c0       	rjmp	.+16     	; 0xcdc <bmschip_startGPIO+0xda>
     ccc:	f5 e0       	ldi	r31, 0x05	; 5
     cce:	af 16       	cp	r10, r31
     cd0:	a1 f0       	breq	.+40     	; 0xcfa <bmschip_startGPIO+0xf8>
     cd2:	af 16       	cp	r10, r31
     cd4:	78 f0       	brcs	.+30     	; 0xcf4 <bmschip_startGPIO+0xf2>
     cd6:	86 e0       	ldi	r24, 0x06	; 6
     cd8:	a8 16       	cp	r10, r24
     cda:	91 f0       	breq	.+36     	; 0xd00 <bmschip_startGPIO+0xfe>
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
	}
	
	//Messbefehl	
	cmd[0] = 0x05; // 00000101	ADAX0	Normal-Mode									
	cmd[1] = 0x60; // 01100000	ADAX1	Normal-Mode, Balancing wird unterbrochen	
     cdc:	80 e6       	ldi	r24, 0x60	; 96
     cde:	8a 83       	std	Y+2, r24	; 0x02
     ce0:	11 c0       	rjmp	.+34     	; 0xd04 <bmschip_startGPIO+0x102>
	
	switch(pin)
	{
		case 0:									//Alles		cmd[1] =									= 01100000
				break;
		case 1: cmd[1] |= (1<<0);				//GPIO 1	cmd[1] = 01100000 | 00000001				= 01100001
     ce2:	81 e6       	ldi	r24, 0x61	; 97
     ce4:	8a 83       	std	Y+2, r24	; 0x02
				break;
     ce6:	0e c0       	rjmp	.+28     	; 0xd04 <bmschip_startGPIO+0x102>
		case 2: cmd[1] |= (1<<1);				//GPIO 2	cmd[1] = 01100000 | 00000010				= 01100010
     ce8:	82 e6       	ldi	r24, 0x62	; 98
     cea:	8a 83       	std	Y+2, r24	; 0x02
				break;
     cec:	0b c0       	rjmp	.+22     	; 0xd04 <bmschip_startGPIO+0x102>
		case 3: cmd[1] |= (1<<1) | (1<<0);		//GPIO 3	cmd[1] = 01100000 | 00000010 | 00000001		= 01100011
     cee:	83 e6       	ldi	r24, 0x63	; 99
     cf0:	8a 83       	std	Y+2, r24	; 0x02
				break;
     cf2:	08 c0       	rjmp	.+16     	; 0xd04 <bmschip_startGPIO+0x102>
		case 4: cmd[1] |= (1<<2);				//GPIO 4	cmd[1] = 01100000 | 00000100				= 01100100
     cf4:	84 e6       	ldi	r24, 0x64	; 100
     cf6:	8a 83       	std	Y+2, r24	; 0x02
				break;
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <bmschip_startGPIO+0x102>
		case 5: cmd[1] |= (1<<2) | (1<<0);		//GPIO 5	cmd[1] = 01100000 | 00000100 | 00000001		= 01100101		
     cfa:	85 e6       	ldi	r24, 0x65	; 101
     cfc:	8a 83       	std	Y+2, r24	; 0x02
				break;
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <bmschip_startGPIO+0x102>
		case 6: cmd[1] |= (1<<2) | (1<<1);		//VRef		cmd[1] = 01100000 | 00000100 | 00000010		= 01100110
     d00:	86 e6       	ldi	r24, 0x66	; 102
     d02:	8a 83       	std	Y+2, r24	; 0x02
				break;
	}
	
	pec = Pec15(cmd, 2);
     d04:	62 e0       	ldi	r22, 0x02	; 2
     d06:	ce 01       	movw	r24, r28
     d08:	01 96       	adiw	r24, 0x01	; 1
     d0a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <Pec15>
	cmd[2] = GET_HIGH_BYTE(pec);
     d0e:	9b 83       	std	Y+3, r25	; 0x03
	cmd[3] = GET_LOW_BYTE(pec);
     d10:	8c 83       	std	Y+4, r24	; 0x04
		
	//Befehl und PEC schreiben
	while(!(bmschip_spi_rw(cmd, 4)));
     d12:	64 e0       	ldi	r22, 0x04	; 4
     d14:	ce 01       	movw	r24, r28
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	0e 94 a6 01 	call	0x34c	; 0x34c <bmschip_spi_rw>
     d1c:	88 23       	and	r24, r24
     d1e:	c9 f3       	breq	.-14     	; 0xd12 <bmschip_startGPIO+0x110>
	
	SPI_CS_LTC6804_HIGH;
     d20:	41 9a       	sbi	0x08, 1	; 8
	spi.locked=0;
     d22:	10 92 6c 07 	sts	0x076C, r1
}
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	df 90       	pop	r13
     d3c:	cf 90       	pop	r12
     d3e:	bf 90       	pop	r11
     d40:	af 90       	pop	r10
     d42:	08 95       	ret

00000d44 <bmschip_getTemperature>:
// *****************************************************************************************

// *** Temperaturwerte auslesen ************************************************************
uint8_t bmschip_getTemperature(uint8_t pin)		//vorerst nur GPIO 3 (pin=3)
{
     d44:	2f 92       	push	r2
     d46:	3f 92       	push	r3
     d48:	4f 92       	push	r4
     d4a:	5f 92       	push	r5
     d4c:	6f 92       	push	r6
     d4e:	7f 92       	push	r7
     d50:	8f 92       	push	r8
     d52:	9f 92       	push	r9
     d54:	af 92       	push	r10
     d56:	bf 92       	push	r11
     d58:	cf 92       	push	r12
     d5a:	df 92       	push	r13
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	6e 97       	sbiw	r28, 0x1e	; 30
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
	uint16_t wait_count;		//Wartezeit für ADC-Messung vom LTC6804
	sint32_t max;				//Zwischenwert für Maximaltemperatur im System
	sint64_t x;					//Zwischenwert für Temperaturkennlinie
	
	
	bmschip_startGPIO(pin);		//Spannung an jeweiligem GPIO
     d78:	0e 94 01 06 	call	0xc02	; 0xc02 <bmschip_startGPIO>
	wait_count = TCNT1;
     d7c:	20 91 84 00 	lds	r18, 0x0084
     d80:	30 91 85 00 	lds	r19, 0x0085
	while ((((wait_count + 810) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 900)))); //405us
     d84:	e4 e8       	ldi	r30, 0x84	; 132
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	a9 01       	movw	r20, r18
     d8a:	46 5d       	subi	r20, 0xD6	; 214
     d8c:	5c 4f       	sbci	r21, 0xFC	; 252
     d8e:	a6 e8       	ldi	r26, 0x86	; 134
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	b9 01       	movw	r22, r18
     d94:	6c 57       	subi	r22, 0x7C	; 124
     d96:	7c 4f       	sbci	r23, 0xFC	; 252
     d98:	80 81       	ld	r24, Z
     d9a:	91 81       	ldd	r25, Z+1	; 0x01
     d9c:	48 17       	cp	r20, r24
     d9e:	59 07       	cpc	r21, r25
     da0:	28 f0       	brcs	.+10     	; 0xdac <bmschip_getTemperature+0x68>
     da2:	80 81       	ld	r24, Z
     da4:	91 81       	ldd	r25, Z+1	; 0x01
     da6:	28 17       	cp	r18, r24
     da8:	39 07       	cpc	r19, r25
     daa:	b0 f3       	brcs	.-20     	; 0xd98 <bmschip_getTemperature+0x54>
     dac:	80 81       	ld	r24, Z
     dae:	91 81       	ldd	r25, Z+1	; 0x01
     db0:	82 17       	cp	r24, r18
     db2:	93 07       	cpc	r25, r19
     db4:	50 f4       	brcc	.+20     	; 0xdca <bmschip_getTemperature+0x86>
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	0d 91       	ld	r16, X+
     dbc:	1c 91       	ld	r17, X
     dbe:	11 97       	sbiw	r26, 0x01	; 1
     dc0:	80 0f       	add	r24, r16
     dc2:	91 1f       	adc	r25, r17
     dc4:	86 17       	cp	r24, r22
     dc6:	97 07       	cpc	r25, r23
     dc8:	38 f3       	brcs	.-50     	; 0xd98 <bmschip_getTemperature+0x54>
	
	bmschip_startGPIO(6);		//Spannung an V_REF2
     dca:	86 e0       	ldi	r24, 0x06	; 6
     dcc:	0e 94 01 06 	call	0xc02	; 0xc02 <bmschip_startGPIO>
	wait_count = TCNT1;
     dd0:	20 91 84 00 	lds	r18, 0x0084
     dd4:	30 91 85 00 	lds	r19, 0x0085
	while ((((wait_count + 810) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 900)))); //405us
     dd8:	e4 e8       	ldi	r30, 0x84	; 132
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	a9 01       	movw	r20, r18
     dde:	46 5d       	subi	r20, 0xD6	; 214
     de0:	5c 4f       	sbci	r21, 0xFC	; 252
     de2:	a6 e8       	ldi	r26, 0x86	; 134
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	b9 01       	movw	r22, r18
     de8:	6c 57       	subi	r22, 0x7C	; 124
     dea:	7c 4f       	sbci	r23, 0xFC	; 252
     dec:	80 81       	ld	r24, Z
     dee:	91 81       	ldd	r25, Z+1	; 0x01
     df0:	48 17       	cp	r20, r24
     df2:	59 07       	cpc	r21, r25
     df4:	28 f0       	brcs	.+10     	; 0xe00 <bmschip_getTemperature+0xbc>
     df6:	80 81       	ld	r24, Z
     df8:	91 81       	ldd	r25, Z+1	; 0x01
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	b0 f3       	brcs	.-20     	; 0xdec <bmschip_getTemperature+0xa8>
     e00:	80 81       	ld	r24, Z
     e02:	91 81       	ldd	r25, Z+1	; 0x01
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	50 f4       	brcc	.+20     	; 0xe1e <bmschip_getTemperature+0xda>
     e0a:	80 81       	ld	r24, Z
     e0c:	91 81       	ldd	r25, Z+1	; 0x01
     e0e:	0d 91       	ld	r16, X+
     e10:	1c 91       	ld	r17, X
     e12:	11 97       	sbiw	r26, 0x01	; 1
     e14:	80 0f       	add	r24, r16
     e16:	91 1f       	adc	r25, r17
     e18:	86 17       	cp	r24, r22
     e1a:	97 07       	cpc	r25, r23
     e1c:	38 f3       	brcs	.-50     	; 0xdec <bmschip_getTemperature+0xa8>
	
	//LTC-Temperatur auslesen	
	//Register A lesen
	cmd[0] = 0x00;		//00000000
     e1e:	19 82       	std	Y+1, r1	; 0x01
	cmd[1] = 0x0C;		//00001100
     e20:	8c e0       	ldi	r24, 0x0C	; 12
     e22:	8a 83       	std	Y+2, r24	; 0x02
	pec = Pec15(cmd, 2);
     e24:	62 e0       	ldi	r22, 0x02	; 2
     e26:	ce 01       	movw	r24, r28
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <Pec15>
	cmd[2] = GET_HIGH_BYTE(pec);
     e2e:	9b 83       	std	Y+3, r25	; 0x03
	cmd[3] = GET_LOW_BYTE(pec);
     e30:	8c 83       	std	Y+4, r24	; 0x04
     e32:	7e 01       	movw	r14, r28
     e34:	8d e0       	ldi	r24, 0x0D	; 13
     e36:	e8 0e       	add	r14, r24
     e38:	f1 1c       	adc	r15, r1
     e3a:	fe 01       	movw	r30, r28
     e3c:	35 96       	adiw	r30, 0x05	; 5
	
	for(i = 4; i < 12; i++)
	{
		cmd[i] = 0x00;
     e3e:	11 92       	st	Z+, r1
	cmd[1] = 0x0C;		//00001100
	pec = Pec15(cmd, 2);
	cmd[2] = GET_HIGH_BYTE(pec);
	cmd[3] = GET_LOW_BYTE(pec);
	
	for(i = 4; i < 12; i++)
     e40:	ee 15       	cp	r30, r14
     e42:	ff 05       	cpc	r31, r15
     e44:	e1 f7       	brne	.-8      	; 0xe3e <bmschip_getTemperature+0xfa>
	{
		cmd[i] = 0x00;
	}
	
	while(!(bmschip_spi_rw(cmd, 4))); //Command schicken
     e46:	64 e0       	ldi	r22, 0x04	; 4
     e48:	ce 01       	movw	r24, r28
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	0e 94 a6 01 	call	0x34c	; 0x34c <bmschip_spi_rw>
     e50:	88 23       	and	r24, r24
     e52:	c9 f3       	breq	.-14     	; 0xe46 <bmschip_getTemperature+0x102>
	spi.locked = 0;
     e54:	10 92 6c 07 	sts	0x076C, r1

	//Spannungswerte an GPIO3 in bms.temp.V_temp[] uebertragen
		for(i=0; i<slave_boards; i++)
     e58:	80 91 24 07 	lds	r24, 0x0724
     e5c:	88 23       	and	r24, r24
     e5e:	09 f4       	brne	.+2      	; 0xe62 <bmschip_getTemperature+0x11e>
     e60:	43 c0       	rjmp	.+134    	; 0xee8 <bmschip_getTemperature+0x1a4>
     e62:	d1 2c       	mov	r13, r1
	{
		while(!(bmschip_spi_rw(&cmd[4], 8)));
     e64:	b1 2c       	mov	r11, r1
     e66:	c1 2c       	mov	r12, r1
		{
			SPI_CS_LTC6804_HIGH;
			spi.locked = 0;
			return 1;
		} 
		spi.locked = 0;
     e68:	0c e6       	ldi	r16, 0x6C	; 108
     e6a:	17 e0       	ldi	r17, 0x07	; 7
	spi.locked = 0;

	//Spannungswerte an GPIO3 in bms.temp.V_temp[] uebertragen
		for(i=0; i<slave_boards; i++)
	{
		while(!(bmschip_spi_rw(&cmd[4], 8)));
     e6c:	68 e0       	ldi	r22, 0x08	; 8
     e6e:	ce 01       	movw	r24, r28
     e70:	05 96       	adiw	r24, 0x05	; 5
     e72:	0e 94 a6 01 	call	0x34c	; 0x34c <bmschip_spi_rw>
     e76:	88 23       	and	r24, r24
     e78:	c9 f3       	breq	.-14     	; 0xe6c <bmschip_getTemperature+0x128>
     e7a:	fe 01       	movw	r30, r28
     e7c:	3d 96       	adiw	r30, 0x0d	; 13
     e7e:	8b 2d       	mov	r24, r11
     e80:	9c 2d       	mov	r25, r12
		for (k=0; k<8; k++)
		{
			receive[k] = spi.rx_buffer.b[k];				
     e82:	dc 01       	movw	r26, r24
     e84:	a6 5b       	subi	r26, 0xB6	; 182
     e86:	b8 4f       	sbci	r27, 0xF8	; 248
     e88:	50 96       	adiw	r26, 0x10	; 16
     e8a:	2c 91       	ld	r18, X
     e8c:	21 93       	st	Z+, r18
     e8e:	01 96       	adiw	r24, 0x01	; 1

	//Spannungswerte an GPIO3 in bms.temp.V_temp[] uebertragen
		for(i=0; i<slave_boards; i++)
	{
		while(!(bmschip_spi_rw(&cmd[4], 8)));
		for (k=0; k<8; k++)
     e90:	88 30       	cpi	r24, 0x08	; 8
     e92:	91 05       	cpc	r25, r1
     e94:	b1 f7       	brne	.-20     	; 0xe82 <bmschip_getTemperature+0x13e>
		{
			receive[k] = spi.rx_buffer.b[k];				
		}
		// Emfangene Daten durch Pec-Berechnung pruefen
		pec = Pec15(&(receive[0]), 6);
     e96:	66 e0       	ldi	r22, 0x06	; 6
     e98:	ce 01       	movw	r24, r28
     e9a:	0d 96       	adiw	r24, 0x0d	; 13
     e9c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <Pec15>
		if(pec == ((((uint16_t)receive[6]) << 8) | receive[7]))
     ea0:	2b 89       	ldd	r18, Y+19	; 0x13
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	32 2f       	mov	r19, r18
     ea6:	22 27       	eor	r18, r18
     ea8:	4c 89       	ldd	r20, Y+20	; 0x14
     eaa:	24 2b       	or	r18, r20
     eac:	28 17       	cp	r18, r24
     eae:	39 07       	cpc	r19, r25
     eb0:	b1 f4       	brne	.+44     	; 0xede <bmschip_getTemperature+0x19a>
		{
			bms.temp.V_temp[i] = (((uint16_t)receive[5]) << 8) | receive[4];	//GPIO3
     eb2:	ed 2d       	mov	r30, r13
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	ee 0f       	add	r30, r30
     eb8:	ff 1f       	adc	r31, r31
     eba:	ed 55       	subi	r30, 0x5D	; 93
     ebc:	f6 4f       	sbci	r31, 0xF6	; 246
     ebe:	8a 89       	ldd	r24, Y+18	; 0x12
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	98 2f       	mov	r25, r24
     ec4:	88 27       	eor	r24, r24
     ec6:	29 89       	ldd	r18, Y+17	; 0x11
     ec8:	82 2b       	or	r24, r18
     eca:	91 83       	std	Z+1, r25	; 0x01
     ecc:	80 83       	st	Z, r24
		{
			SPI_CS_LTC6804_HIGH;
			spi.locked = 0;
			return 1;
		} 
		spi.locked = 0;
     ece:	f8 01       	movw	r30, r16
     ed0:	10 82       	st	Z, r1
	
	while(!(bmschip_spi_rw(cmd, 4))); //Command schicken
	spi.locked = 0;

	//Spannungswerte an GPIO3 in bms.temp.V_temp[] uebertragen
		for(i=0; i<slave_boards; i++)
     ed2:	d3 94       	inc	r13
     ed4:	80 91 24 07 	lds	r24, 0x0724
     ed8:	d8 16       	cp	r13, r24
     eda:	40 f2       	brcs	.-112    	; 0xe6c <bmschip_getTemperature+0x128>
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <bmschip_getTemperature+0x1a4>
		{
			bms.temp.V_temp[i] = (((uint16_t)receive[5]) << 8) | receive[4];	//GPIO3
		}
		else
		{
			SPI_CS_LTC6804_HIGH;
     ede:	41 9a       	sbi	0x08, 1	; 8
			spi.locked = 0;
     ee0:	10 92 6c 07 	sts	0x076C, r1
			return 1;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	c2 c1       	rjmp	.+900    	; 0x126c <__stack+0x16d>
		} 
		spi.locked = 0;
	}
	SPI_CS_LTC6804_HIGH;
     ee8:	41 9a       	sbi	0x08, 1	; 8
	spi.locked = 0;
     eea:	10 92 6c 07 	sts	0x076C, r1
		
	//Register B lesen
	cmd[0] = 0x00;		//00000000
     eee:	19 82       	std	Y+1, r1	; 0x01
	cmd[1] = 0x0E;		//00001110
     ef0:	8e e0       	ldi	r24, 0x0E	; 14
     ef2:	8a 83       	std	Y+2, r24	; 0x02
	pec = Pec15(cmd, 2);
     ef4:	62 e0       	ldi	r22, 0x02	; 2
     ef6:	ce 01       	movw	r24, r28
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	0e 94 50 02 	call	0x4a0	; 0x4a0 <Pec15>
	cmd[2] = GET_HIGH_BYTE(pec);
     efe:	9b 83       	std	Y+3, r25	; 0x03
	cmd[3] = GET_LOW_BYTE(pec);
     f00:	8c 83       	std	Y+4, r24	; 0x04
     f02:	fe 01       	movw	r30, r28
     f04:	35 96       	adiw	r30, 0x05	; 5
	
	for(i = 4; i < 12; i++)
	{
		cmd[i] = 0x00;
     f06:	11 92       	st	Z+, r1
	cmd[1] = 0x0E;		//00001110
	pec = Pec15(cmd, 2);
	cmd[2] = GET_HIGH_BYTE(pec);
	cmd[3] = GET_LOW_BYTE(pec);
	
	for(i = 4; i < 12; i++)
     f08:	ee 16       	cp	r14, r30
     f0a:	ff 06       	cpc	r15, r31
     f0c:	e1 f7       	brne	.-8      	; 0xf06 <bmschip_getTemperature+0x1c2>
	{
		cmd[i] = 0x00;
	}
	
	while(!(bmschip_spi_rw(cmd, 4))); //Command schicken
     f0e:	64 e0       	ldi	r22, 0x04	; 4
     f10:	ce 01       	movw	r24, r28
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	0e 94 a6 01 	call	0x34c	; 0x34c <bmschip_spi_rw>
     f18:	88 23       	and	r24, r24
     f1a:	c9 f3       	breq	.-14     	; 0xf0e <bmschip_getTemperature+0x1ca>
	spi.locked = 0;
     f1c:	10 92 6c 07 	sts	0x076C, r1

	//Spannungswerte von V_REF2 in bms.temp.V_temp[] uebertragen
	for(i=0; i<slave_boards; i++)
     f20:	80 91 24 07 	lds	r24, 0x0724
     f24:	88 23       	and	r24, r24
     f26:	09 f4       	brne	.+2      	; 0xf2a <bmschip_getTemperature+0x1e6>
     f28:	47 c0       	rjmp	.+142    	; 0xfb8 <bmschip_getTemperature+0x274>
     f2a:	f1 2c       	mov	r15, r1
	{
		while(!(bmschip_spi_rw(&cmd[4], 8)));
     f2c:	d1 2c       	mov	r13, r1
     f2e:	e1 2c       	mov	r14, r1
			usart_transmit_string("F2");
			SPI_CS_LTC6804_HIGH;
			spi.locked = 0;
			return 1;
		}
		spi.locked = 0;
     f30:	0c e6       	ldi	r16, 0x6C	; 108
     f32:	17 e0       	ldi	r17, 0x07	; 7
	spi.locked = 0;

	//Spannungswerte von V_REF2 in bms.temp.V_temp[] uebertragen
	for(i=0; i<slave_boards; i++)
	{
		while(!(bmschip_spi_rw(&cmd[4], 8)));
     f34:	68 e0       	ldi	r22, 0x08	; 8
     f36:	ce 01       	movw	r24, r28
     f38:	05 96       	adiw	r24, 0x05	; 5
     f3a:	0e 94 a6 01 	call	0x34c	; 0x34c <bmschip_spi_rw>
     f3e:	88 23       	and	r24, r24
     f40:	c9 f3       	breq	.-14     	; 0xf34 <bmschip_getTemperature+0x1f0>
     f42:	fe 01       	movw	r30, r28
     f44:	3d 96       	adiw	r30, 0x0d	; 13
     f46:	8d 2d       	mov	r24, r13
     f48:	9e 2d       	mov	r25, r14
		for (k=0; k<8; k++)
		{
			receive[k] = spi.rx_buffer.b[k];
     f4a:	dc 01       	movw	r26, r24
     f4c:	a6 5b       	subi	r26, 0xB6	; 182
     f4e:	b8 4f       	sbci	r27, 0xF8	; 248
     f50:	50 96       	adiw	r26, 0x10	; 16
     f52:	2c 91       	ld	r18, X
     f54:	21 93       	st	Z+, r18
     f56:	01 96       	adiw	r24, 0x01	; 1

	//Spannungswerte von V_REF2 in bms.temp.V_temp[] uebertragen
	for(i=0; i<slave_boards; i++)
	{
		while(!(bmschip_spi_rw(&cmd[4], 8)));
		for (k=0; k<8; k++)
     f58:	88 30       	cpi	r24, 0x08	; 8
     f5a:	91 05       	cpc	r25, r1
     f5c:	b1 f7       	brne	.-20     	; 0xf4a <bmschip_getTemperature+0x206>
		{
			receive[k] = spi.rx_buffer.b[k];
		}
		//Emfangene Daten durch Pec-Berechnung pruefen
		pec = Pec15(&(receive[0]), 6);
     f5e:	66 e0       	ldi	r22, 0x06	; 6
     f60:	ce 01       	movw	r24, r28
     f62:	0d 96       	adiw	r24, 0x0d	; 13
     f64:	0e 94 50 02 	call	0x4a0	; 0x4a0 <Pec15>
		if(pec == ((((uint16_t)receive[6]) << 8) | receive[7]))
     f68:	2b 89       	ldd	r18, Y+19	; 0x13
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	32 2f       	mov	r19, r18
     f6e:	22 27       	eor	r18, r18
     f70:	4c 89       	ldd	r20, Y+20	; 0x14
     f72:	24 2b       	or	r18, r20
     f74:	28 17       	cp	r18, r24
     f76:	39 07       	cpc	r19, r25
     f78:	b1 f4       	brne	.+44     	; 0xfa6 <bmschip_getTemperature+0x262>
		{
			bms.temp.V_reference[i] = (((uint16_t)receive[5]) << 8) | receive[4];	//V_REF2
     f7a:	ef 2d       	mov	r30, r15
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	ee 0f       	add	r30, r30
     f80:	ff 1f       	adc	r31, r31
     f82:	ed 53       	subi	r30, 0x3D	; 61
     f84:	f6 4f       	sbci	r31, 0xF6	; 246
     f86:	8a 89       	ldd	r24, Y+18	; 0x12
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	98 2f       	mov	r25, r24
     f8c:	88 27       	eor	r24, r24
     f8e:	29 89       	ldd	r18, Y+17	; 0x11
     f90:	82 2b       	or	r24, r18
     f92:	91 83       	std	Z+1, r25	; 0x01
     f94:	80 83       	st	Z, r24
			usart_transmit_string("F2");
			SPI_CS_LTC6804_HIGH;
			spi.locked = 0;
			return 1;
		}
		spi.locked = 0;
     f96:	f8 01       	movw	r30, r16
     f98:	10 82       	st	Z, r1
	
	while(!(bmschip_spi_rw(cmd, 4))); //Command schicken
	spi.locked = 0;

	//Spannungswerte von V_REF2 in bms.temp.V_temp[] uebertragen
	for(i=0; i<slave_boards; i++)
     f9a:	f3 94       	inc	r15
     f9c:	80 91 24 07 	lds	r24, 0x0724
     fa0:	f8 16       	cp	r15, r24
     fa2:	40 f2       	brcs	.-112    	; 0xf34 <bmschip_getTemperature+0x1f0>
     fa4:	09 c0       	rjmp	.+18     	; 0xfb8 <bmschip_getTemperature+0x274>
		{
			bms.temp.V_reference[i] = (((uint16_t)receive[5]) << 8) | receive[4];	//V_REF2
		}
		else
		{
			usart_transmit_string("F2");
     fa6:	87 e0       	ldi	r24, 0x07	; 7
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
			SPI_CS_LTC6804_HIGH;
     fae:	41 9a       	sbi	0x08, 1	; 8
			spi.locked = 0;
     fb0:	10 92 6c 07 	sts	0x076C, r1
			return 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	5a c1       	rjmp	.+692    	; 0x126c <__stack+0x16d>
		}
		spi.locked = 0;
	}
	SPI_CS_LTC6804_HIGH;
     fb8:	41 9a       	sbi	0x08, 1	; 8
	spi.locked = 0;
     fba:	10 92 6c 07 	sts	0x076C, r1
		
	//Nachbildung der Thermistorkennlinie und Berechnung der Temperatur
	for(i=0; i<slave_boards; i++)
     fbe:	f0 91 24 07 	lds	r31, 0x0724
     fc2:	fa 8f       	std	Y+26, r31	; 0x1a
     fc4:	ff 23       	and	r31, r31
     fc6:	09 f4       	brne	.+2      	; 0xfca <bmschip_getTemperature+0x286>
     fc8:	44 c1       	rjmp	.+648    	; 0x1252 <__stack+0x153>
     fca:	83 ea       	ldi	r24, 0xA3	; 163
     fcc:	99 e0       	ldi	r25, 0x09	; 9
     fce:	98 8f       	std	Y+24, r25	; 0x18
     fd0:	8f 8b       	std	Y+23, r24	; 0x17
     fd2:	e3 ee       	ldi	r30, 0xE3	; 227
     fd4:	f9 e0       	ldi	r31, 0x09	; 9
     fd6:	fe 8b       	std	Y+22, r31	; 0x16
     fd8:	ed 8b       	std	Y+21, r30	; 0x15
     fda:	19 8e       	std	Y+25, r1	; 0x19
	{
		x = (((sint64_t)bms.temp.V_temp[i])*1000000)/(sint64_t)bms.temp.V_reference[i];	
     fdc:	ef 89       	ldd	r30, Y+23	; 0x17
     fde:	f8 8d       	ldd	r31, Y+24	; 0x18
     fe0:	21 90       	ld	r2, Z+
     fe2:	31 90       	ld	r3, Z+
     fe4:	f8 8f       	std	Y+24, r31	; 0x18
     fe6:	ef 8b       	std	Y+23, r30	; 0x17
     fe8:	22 2d       	mov	r18, r2
     fea:	33 2d       	mov	r19, r3
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	05 e0       	ldi	r16, 0x05	; 5
     ffa:	0e 94 82 19 	call	0x3304	; 0x3304 <__ashldi3>
     ffe:	a2 2c       	mov	r10, r2
    1000:	b3 2c       	mov	r11, r3
    1002:	c1 2c       	mov	r12, r1
    1004:	d1 2c       	mov	r13, r1
    1006:	e1 2c       	mov	r14, r1
    1008:	f1 2c       	mov	r15, r1
    100a:	00 e0       	ldi	r16, 0x00	; 0
    100c:	10 e0       	ldi	r17, 0x00	; 0
    100e:	0e 94 a4 19 	call	0x3348	; 0x3348 <__subdi3>
    1012:	a2 2e       	mov	r10, r18
    1014:	b3 2e       	mov	r11, r19
    1016:	c4 2e       	mov	r12, r20
    1018:	d5 2e       	mov	r13, r21
    101a:	e6 2e       	mov	r14, r22
    101c:	f7 2e       	mov	r15, r23
    101e:	e8 2f       	mov	r30, r24
    1020:	19 2f       	mov	r17, r25
    1022:	06 e0       	ldi	r16, 0x06	; 6
    1024:	0e 94 82 19 	call	0x3304	; 0x3304 <__ashldi3>
    1028:	0e 2f       	mov	r16, r30
    102a:	0e 94 a4 19 	call	0x3348	; 0x3348 <__subdi3>
    102e:	03 e0       	ldi	r16, 0x03	; 3
    1030:	0e 94 82 19 	call	0x3304	; 0x3304 <__ashldi3>
    1034:	a2 2c       	mov	r10, r2
    1036:	b3 2c       	mov	r11, r3
    1038:	c1 2c       	mov	r12, r1
    103a:	d1 2c       	mov	r13, r1
    103c:	e1 2c       	mov	r14, r1
    103e:	f1 2c       	mov	r15, r1
    1040:	00 e0       	ldi	r16, 0x00	; 0
    1042:	10 e0       	ldi	r17, 0x00	; 0
    1044:	0e 94 9b 19 	call	0x3336	; 0x3336 <__adddi3>
    1048:	06 e0       	ldi	r16, 0x06	; 6
    104a:	0e 94 82 19 	call	0x3304	; 0x3304 <__ashldi3>
    104e:	ef 89       	ldd	r30, Y+23	; 0x17
    1050:	f8 8d       	ldd	r31, Y+24	; 0x18
    1052:	26 8c       	ldd	r2, Z+30	; 0x1e
    1054:	37 8c       	ldd	r3, Z+31	; 0x1f
    1056:	a2 2c       	mov	r10, r2
    1058:	b3 2c       	mov	r11, r3
    105a:	00 e0       	ldi	r16, 0x00	; 0
    105c:	0e 94 ad 18 	call	0x315a	; 0x315a <__divdi3>
    1060:	e2 2e       	mov	r14, r18
    1062:	f3 2e       	mov	r15, r19
    1064:	04 2f       	mov	r16, r20
    1066:	15 2f       	mov	r17, r21
    1068:	b6 2f       	mov	r27, r22
    106a:	a7 2f       	mov	r26, r23
    106c:	f8 2f       	mov	r31, r24
    106e:	d9 2e       	mov	r13, r25
		
		if(x>=780000)
    1070:	2f 3d       	cpi	r18, 0xDF	; 223
    1072:	e6 ee       	ldi	r30, 0xE6	; 230
    1074:	3e 07       	cpc	r19, r30
    1076:	eb e0       	ldi	r30, 0x0B	; 11
    1078:	4e 07       	cpc	r20, r30
    107a:	51 05       	cpc	r21, r1
    107c:	61 05       	cpc	r22, r1
    107e:	71 05       	cpc	r23, r1
    1080:	81 05       	cpc	r24, r1
    1082:	91 05       	cpc	r25, r1
    1084:	11 f1       	breq	.+68     	; 0x10ca <bmschip_getTemperature+0x386>
    1086:	0c f1       	brlt	.+66     	; 0x10ca <bmschip_getTemperature+0x386>
		{
			bms.temp.temp_transmit[i] = (sint32_t)((x-780000)/(-70));		
    1088:	20 5e       	subi	r18, 0xE0	; 224
    108a:	36 4e       	sbci	r19, 0xE6	; 230
    108c:	4b 40       	sbci	r20, 0x0B	; 11
    108e:	51 09       	sbc	r21, r1
    1090:	61 09       	sbc	r22, r1
    1092:	71 09       	sbc	r23, r1
    1094:	81 09       	sbc	r24, r1
    1096:	91 09       	sbc	r25, r1
    1098:	0f 2e       	mov	r0, r31
    109a:	fa eb       	ldi	r31, 0xBA	; 186
    109c:	af 2e       	mov	r10, r31
    109e:	f0 2d       	mov	r31, r0
    10a0:	bb 24       	eor	r11, r11
    10a2:	ba 94       	dec	r11
    10a4:	cc 24       	eor	r12, r12
    10a6:	ca 94       	dec	r12
    10a8:	dd 24       	eor	r13, r13
    10aa:	da 94       	dec	r13
    10ac:	ee 24       	eor	r14, r14
    10ae:	ea 94       	dec	r14
    10b0:	ff 24       	eor	r15, r15
    10b2:	fa 94       	dec	r15
    10b4:	0f ef       	ldi	r16, 0xFF	; 255
    10b6:	1f ef       	ldi	r17, 0xFF	; 255
    10b8:	0e 94 ad 18 	call	0x315a	; 0x315a <__divdi3>
    10bc:	ed 89       	ldd	r30, Y+21	; 0x15
    10be:	fe 89       	ldd	r31, Y+22	; 0x16
    10c0:	20 83       	st	Z, r18
    10c2:	31 83       	std	Z+1, r19	; 0x01
    10c4:	42 83       	std	Z+2, r20	; 0x02
    10c6:	53 83       	std	Z+3, r21	; 0x03
    10c8:	92 c0       	rjmp	.+292    	; 0x11ee <__stack+0xef>
		}
		else if(x>=340000)
    10ca:	2e 2d       	mov	r18, r14
    10cc:	3f 2d       	mov	r19, r15
    10ce:	40 2f       	mov	r20, r16
    10d0:	51 2f       	mov	r21, r17
    10d2:	6b 2f       	mov	r22, r27
    10d4:	7a 2f       	mov	r23, r26
    10d6:	8f 2f       	mov	r24, r31
    10d8:	9d 2d       	mov	r25, r13
    10da:	2f 31       	cpi	r18, 0x1F	; 31
    10dc:	e0 e3       	ldi	r30, 0x30	; 48
    10de:	3e 07       	cpc	r19, r30
    10e0:	e5 e0       	ldi	r30, 0x05	; 5
    10e2:	4e 07       	cpc	r20, r30
    10e4:	51 05       	cpc	r21, r1
    10e6:	61 05       	cpc	r22, r1
    10e8:	71 05       	cpc	r23, r1
    10ea:	81 05       	cpc	r24, r1
    10ec:	91 05       	cpc	r25, r1
    10ee:	11 f1       	breq	.+68     	; 0x1134 <__stack+0x35>
    10f0:	0c f1       	brlt	.+66     	; 0x1134 <__stack+0x35>
		{
			bms.temp.temp_transmit[i] = (sint32_t)((x-780000)/(-110));		
    10f2:	20 5e       	subi	r18, 0xE0	; 224
    10f4:	36 4e       	sbci	r19, 0xE6	; 230
    10f6:	4b 40       	sbci	r20, 0x0B	; 11
    10f8:	51 09       	sbc	r21, r1
    10fa:	61 09       	sbc	r22, r1
    10fc:	71 09       	sbc	r23, r1
    10fe:	81 09       	sbc	r24, r1
    1100:	91 09       	sbc	r25, r1
    1102:	0f 2e       	mov	r0, r31
    1104:	f2 e9       	ldi	r31, 0x92	; 146
    1106:	af 2e       	mov	r10, r31
    1108:	f0 2d       	mov	r31, r0
    110a:	bb 24       	eor	r11, r11
    110c:	ba 94       	dec	r11
    110e:	cc 24       	eor	r12, r12
    1110:	ca 94       	dec	r12
    1112:	dd 24       	eor	r13, r13
    1114:	da 94       	dec	r13
    1116:	ee 24       	eor	r14, r14
    1118:	ea 94       	dec	r14
    111a:	ff 24       	eor	r15, r15
    111c:	fa 94       	dec	r15
    111e:	0f ef       	ldi	r16, 0xFF	; 255
    1120:	1f ef       	ldi	r17, 0xFF	; 255
    1122:	0e 94 ad 18 	call	0x315a	; 0x315a <__divdi3>
    1126:	ed 89       	ldd	r30, Y+21	; 0x15
    1128:	fe 89       	ldd	r31, Y+22	; 0x16
    112a:	20 83       	st	Z, r18
    112c:	31 83       	std	Z+1, r19	; 0x01
    112e:	42 83       	std	Z+2, r20	; 0x02
    1130:	53 83       	std	Z+3, r21	; 0x03
    1132:	5d c0       	rjmp	.+186    	; 0x11ee <__stack+0xef>
		}
		else if(x<183000)
    1134:	2e 2d       	mov	r18, r14
    1136:	3f 2d       	mov	r19, r15
    1138:	40 2f       	mov	r20, r16
    113a:	51 2f       	mov	r21, r17
    113c:	6b 2f       	mov	r22, r27
    113e:	7a 2f       	mov	r23, r26
    1140:	8f 2f       	mov	r24, r31
    1142:	9d 2d       	mov	r25, r13
    1144:	27 3d       	cpi	r18, 0xD7	; 215
    1146:	ea ec       	ldi	r30, 0xCA	; 202
    1148:	3e 07       	cpc	r19, r30
    114a:	e2 e0       	ldi	r30, 0x02	; 2
    114c:	4e 07       	cpc	r20, r30
    114e:	51 05       	cpc	r21, r1
    1150:	61 05       	cpc	r22, r1
    1152:	71 05       	cpc	r23, r1
    1154:	81 05       	cpc	r24, r1
    1156:	91 05       	cpc	r25, r1
    1158:	09 f0       	breq	.+2      	; 0x115c <__stack+0x5d>
    115a:	0c f5       	brge	.+66     	; 0x119e <__stack+0x9f>
		{
			bms.temp.temp_transmit[i] = (sint32_t)((x-490000)/(-51));		
    115c:	20 51       	subi	r18, 0x10	; 16
    115e:	3a 47       	sbci	r19, 0x7A	; 122
    1160:	47 40       	sbci	r20, 0x07	; 7
    1162:	51 09       	sbc	r21, r1
    1164:	61 09       	sbc	r22, r1
    1166:	71 09       	sbc	r23, r1
    1168:	81 09       	sbc	r24, r1
    116a:	91 09       	sbc	r25, r1
    116c:	0f 2e       	mov	r0, r31
    116e:	fd ec       	ldi	r31, 0xCD	; 205
    1170:	af 2e       	mov	r10, r31
    1172:	f0 2d       	mov	r31, r0
    1174:	bb 24       	eor	r11, r11
    1176:	ba 94       	dec	r11
    1178:	cc 24       	eor	r12, r12
    117a:	ca 94       	dec	r12
    117c:	dd 24       	eor	r13, r13
    117e:	da 94       	dec	r13
    1180:	ee 24       	eor	r14, r14
    1182:	ea 94       	dec	r14
    1184:	ff 24       	eor	r15, r15
    1186:	fa 94       	dec	r15
    1188:	0f ef       	ldi	r16, 0xFF	; 255
    118a:	1f ef       	ldi	r17, 0xFF	; 255
    118c:	0e 94 ad 18 	call	0x315a	; 0x315a <__divdi3>
    1190:	ed 89       	ldd	r30, Y+21	; 0x15
    1192:	fe 89       	ldd	r31, Y+22	; 0x16
    1194:	20 83       	st	Z, r18
    1196:	31 83       	std	Z+1, r19	; 0x01
    1198:	42 83       	std	Z+2, r20	; 0x02
    119a:	53 83       	std	Z+3, r21	; 0x03
    119c:	28 c0       	rjmp	.+80     	; 0x11ee <__stack+0xef>
		}
		else
		{
			bms.temp.temp_transmit[i] = (sint32_t)((x-645000)/(-77));		
    119e:	2e 2d       	mov	r18, r14
    11a0:	3f 2d       	mov	r19, r15
    11a2:	40 2f       	mov	r20, r16
    11a4:	51 2f       	mov	r21, r17
    11a6:	6b 2f       	mov	r22, r27
    11a8:	7a 2f       	mov	r23, r26
    11aa:	8f 2f       	mov	r24, r31
    11ac:	9d 2d       	mov	r25, r13
    11ae:	28 58       	subi	r18, 0x88	; 136
    11b0:	37 4d       	sbci	r19, 0xD7	; 215
    11b2:	49 40       	sbci	r20, 0x09	; 9
    11b4:	51 09       	sbc	r21, r1
    11b6:	61 09       	sbc	r22, r1
    11b8:	71 09       	sbc	r23, r1
    11ba:	81 09       	sbc	r24, r1
    11bc:	91 09       	sbc	r25, r1
    11be:	0f 2e       	mov	r0, r31
    11c0:	f3 eb       	ldi	r31, 0xB3	; 179
    11c2:	af 2e       	mov	r10, r31
    11c4:	f0 2d       	mov	r31, r0
    11c6:	bb 24       	eor	r11, r11
    11c8:	ba 94       	dec	r11
    11ca:	cc 24       	eor	r12, r12
    11cc:	ca 94       	dec	r12
    11ce:	dd 24       	eor	r13, r13
    11d0:	da 94       	dec	r13
    11d2:	ee 24       	eor	r14, r14
    11d4:	ea 94       	dec	r14
    11d6:	ff 24       	eor	r15, r15
    11d8:	fa 94       	dec	r15
    11da:	0f ef       	ldi	r16, 0xFF	; 255
    11dc:	1f ef       	ldi	r17, 0xFF	; 255
    11de:	0e 94 ad 18 	call	0x315a	; 0x315a <__divdi3>
    11e2:	ed 89       	ldd	r30, Y+21	; 0x15
    11e4:	fe 89       	ldd	r31, Y+22	; 0x16
    11e6:	20 83       	st	Z, r18
    11e8:	31 83       	std	Z+1, r19	; 0x01
    11ea:	42 83       	std	Z+2, r20	; 0x02
    11ec:	53 83       	std	Z+3, r21	; 0x03
	}
	SPI_CS_LTC6804_HIGH;
	spi.locked = 0;
		
	//Nachbildung der Thermistorkennlinie und Berechnung der Temperatur
	for(i=0; i<slave_boards; i++)
    11ee:	f9 8d       	ldd	r31, Y+25	; 0x19
    11f0:	ff 5f       	subi	r31, 0xFF	; 255
    11f2:	f9 8f       	std	Y+25, r31	; 0x19
    11f4:	8d 89       	ldd	r24, Y+21	; 0x15
    11f6:	9e 89       	ldd	r25, Y+22	; 0x16
    11f8:	04 96       	adiw	r24, 0x04	; 4
    11fa:	9e 8b       	std	Y+22, r25	; 0x16
    11fc:	8d 8b       	std	Y+21, r24	; 0x15
    11fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1200:	f9 17       	cp	r31, r25
    1202:	08 f4       	brcc	.+2      	; 0x1206 <__stack+0x107>
    1204:	eb ce       	rjmp	.-554    	; 0xfdc <bmschip_getTemperature+0x298>
			bms.temp.temp_transmit[i] = (sint32_t)((x-645000)/(-77));		
		}
	}
	
	//Maximaltemperatur
	x = bms.temp.temp_transmit[0];	
    1206:	40 91 e3 09 	lds	r20, 0x09E3
    120a:	50 91 e4 09 	lds	r21, 0x09E4
    120e:	60 91 e5 09 	lds	r22, 0x09E5
    1212:	70 91 e6 09 	lds	r23, 0x09E6
	for(i=1;i<slave_boards; i++)
    1216:	92 30       	cpi	r25, 0x02	; 2
    1218:	e0 f0       	brcs	.+56     	; 0x1252 <__stack+0x153>
    121a:	e7 ee       	ldi	r30, 0xE7	; 231
    121c:	f9 e0       	ldi	r31, 0x09	; 9
    121e:	21 e0       	ldi	r18, 0x01	; 1
    1220:	39 2f       	mov	r19, r25
    1222:	1b 8d       	ldd	r17, Y+27	; 0x1b
    1224:	0c 8d       	ldd	r16, Y+28	; 0x1c
    1226:	fd 8c       	ldd	r15, Y+29	; 0x1d
    1228:	ee 8c       	ldd	r14, Y+30	; 0x1e
	{
		if(x < bms.temp.temp_transmit[i])
    122a:	81 91       	ld	r24, Z+
    122c:	91 91       	ld	r25, Z+
    122e:	a1 91       	ld	r26, Z+
    1230:	b1 91       	ld	r27, Z+
    1232:	48 17       	cp	r20, r24
    1234:	59 07       	cpc	r21, r25
    1236:	6a 07       	cpc	r22, r26
    1238:	7b 07       	cpc	r23, r27
    123a:	24 f4       	brge	.+8      	; 0x1244 <__stack+0x145>
		{
			max = bms.temp.temp_transmit[i];
    123c:	18 2f       	mov	r17, r24
    123e:	09 2f       	mov	r16, r25
    1240:	fa 2e       	mov	r15, r26
    1242:	eb 2e       	mov	r14, r27
		}
	}
	
	//Maximaltemperatur
	x = bms.temp.temp_transmit[0];	
	for(i=1;i<slave_boards; i++)
    1244:	2f 5f       	subi	r18, 0xFF	; 255
    1246:	23 13       	cpse	r18, r19
    1248:	f0 cf       	rjmp	.-32     	; 0x122a <__stack+0x12b>
    124a:	1b 8f       	std	Y+27, r17	; 0x1b
    124c:	0c 8f       	std	Y+28, r16	; 0x1c
    124e:	fd 8e       	std	Y+29, r15	; 0x1d
    1250:	ee 8e       	std	Y+30, r14	; 0x1e
		if(x < bms.temp.temp_transmit[i])
		{
			max = bms.temp.temp_transmit[i];
		}
	}
	bms.temp.temp_max = max;
    1252:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1254:	e0 93 23 0a 	sts	0x0A23, r30
    1258:	fc 8d       	ldd	r31, Y+28	; 0x1c
    125a:	f0 93 24 0a 	sts	0x0A24, r31
    125e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1260:	80 93 25 0a 	sts	0x0A25, r24
    1264:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1266:	90 93 26 0a 	sts	0x0A26, r25
	return 0;
    126a:	80 e0       	ldi	r24, 0x00	; 0
}
    126c:	6e 96       	adiw	r28, 0x1e	; 30
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	ff 90       	pop	r15
    1282:	ef 90       	pop	r14
    1284:	df 90       	pop	r13
    1286:	cf 90       	pop	r12
    1288:	bf 90       	pop	r11
    128a:	af 90       	pop	r10
    128c:	9f 90       	pop	r9
    128e:	8f 90       	pop	r8
    1290:	7f 90       	pop	r7
    1292:	6f 90       	pop	r6
    1294:	5f 90       	pop	r5
    1296:	4f 90       	pop	r4
    1298:	3f 90       	pop	r3
    129a:	2f 90       	pop	r2
    129c:	08 95       	ret

0000129e <Zellen_pro_Board>:
// *****************************************************************************************

// *** Zellbelegung bestimmen **************************************************************
void Zellen_pro_Board(uint8_t *Cells)
{
    129e:	ff 92       	push	r15
    12a0:	0f 93       	push	r16
    12a2:	1f 93       	push	r17
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
	uint8_t i, i1;


	for(i=0; i<slave_boards; i++)
    12a8:	20 91 24 07 	lds	r18, 0x0724
    12ac:	22 23       	and	r18, r18
    12ae:	61 f1       	breq	.+88     	; 0x1308 <Zellen_pro_Board+0x6a>
    12b0:	10 e0       	ldi	r17, 0x00	; 0
	{
		Cells[i] = 0;
		for(i1=0; i1<12; i1++)
		{
			if(cells_per_board[i] & (1<<i1))
    12b2:	f1 2c       	mov	r15, r1
    12b4:	00 e0       	ldi	r16, 0x00	; 0
    12b6:	a1 e0       	ldi	r26, 0x01	; 1
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
	uint8_t i, i1;


	for(i=0; i<slave_boards; i++)
	{
		Cells[i] = 0;
    12ba:	21 2f       	mov	r18, r17
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	fc 01       	movw	r30, r24
    12c0:	e2 0f       	add	r30, r18
    12c2:	f3 1f       	adc	r31, r19
    12c4:	10 82       	st	Z, r1
		for(i1=0; i1<12; i1++)
		{
			if(cells_per_board[i] & (1<<i1))
    12c6:	e9 01       	movw	r28, r18
    12c8:	cc 0f       	add	r28, r28
    12ca:	dd 1f       	adc	r29, r29
    12cc:	c6 5f       	subi	r28, 0xF6	; 246
    12ce:	dc 4f       	sbci	r29, 0xFC	; 252
    12d0:	68 81       	ld	r22, Y
    12d2:	79 81       	ldd	r23, Y+1	; 0x01
    12d4:	2f 2d       	mov	r18, r15
    12d6:	30 2f       	mov	r19, r16
    12d8:	ad 01       	movw	r20, r26
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <Zellen_pro_Board+0x44>
    12de:	44 0f       	add	r20, r20
    12e0:	55 1f       	adc	r21, r21
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <Zellen_pro_Board+0x40>
    12e6:	46 23       	and	r20, r22
    12e8:	57 23       	and	r21, r23
    12ea:	45 2b       	or	r20, r21
    12ec:	19 f0       	breq	.+6      	; 0x12f4 <Zellen_pro_Board+0x56>
			{	
				Cells[i]++;
    12ee:	40 81       	ld	r20, Z
    12f0:	4f 5f       	subi	r20, 0xFF	; 255
    12f2:	40 83       	st	Z, r20
    12f4:	2f 5f       	subi	r18, 0xFF	; 255
    12f6:	3f 4f       	sbci	r19, 0xFF	; 255


	for(i=0; i<slave_boards; i++)
	{
		Cells[i] = 0;
		for(i1=0; i1<12; i1++)
    12f8:	2c 30       	cpi	r18, 0x0C	; 12
    12fa:	31 05       	cpc	r19, r1
    12fc:	69 f7       	brne	.-38     	; 0x12d8 <Zellen_pro_Board+0x3a>
void Zellen_pro_Board(uint8_t *Cells)
{
	uint8_t i, i1;


	for(i=0; i<slave_boards; i++)
    12fe:	1f 5f       	subi	r17, 0xFF	; 255
    1300:	20 91 24 07 	lds	r18, 0x0724
    1304:	12 17       	cp	r17, r18
    1306:	c8 f2       	brcs	.-78     	; 0x12ba <Zellen_pro_Board+0x1c>
			{	
				Cells[i]++;
			}
		}
	}	
}
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	ff 90       	pop	r15
    1312:	08 95       	ret

00001314 <bmschip_evaluate>:
}
// *****************************************************************************************

// *** Auswertung der Zellspannungen *******************************************************
void bmschip_evaluate(uint16_t * pvolatages, uint16_t * pmaxVolt, uint16_t * pminVolt, uint16_t * pavgVolt, uint8_t * numofcells)
{
    1314:	2f 92       	push	r2
    1316:	3f 92       	push	r3
    1318:	4f 92       	push	r4
    131a:	5f 92       	push	r5
    131c:	6f 92       	push	r6
    131e:	7f 92       	push	r7
    1320:	8f 92       	push	r8
    1322:	9f 92       	push	r9
    1324:	af 92       	push	r10
    1326:	bf 92       	push	r11
    1328:	cf 92       	push	r12
    132a:	df 92       	push	r13
    132c:	ef 92       	push	r14
    132e:	ff 92       	push	r15
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	61 97       	sbiw	r28, 0x11	; 17
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	5c 01       	movw	r10, r24
    134a:	7f 83       	std	Y+7, r23	; 0x07
    134c:	6e 83       	std	Y+6, r22	; 0x06
    134e:	59 87       	std	Y+9, r21	; 0x09
    1350:	48 87       	std	Y+8, r20	; 0x08
    1352:	3b 87       	std	Y+11, r19	; 0x0b
    1354:	2a 87       	std	Y+10, r18	; 0x0a
    1356:	1d 87       	std	Y+13, r17	; 0x0d
    1358:	0c 87       	std	Y+12, r16	; 0x0c
	//Rückgabe Min, Max, Avg
	*pmaxVolt = maxVolt;
	*pminVolt = minVolt;
	*pavgVolt = (uint16_t)avgVolt;
	*numofcells = actNr;
}
    135a:	2d b7       	in	r18, 0x3d	; 61
    135c:	3e b7       	in	r19, 0x3e	; 62
    135e:	3f 87       	std	Y+15, r19	; 0x0f
    1360:	2e 87       	std	Y+14, r18	; 0x0e
// *** Auswertung der Zellspannungen *******************************************************
void bmschip_evaluate(uint16_t * pvolatages, uint16_t * pmaxVolt, uint16_t * pminVolt, uint16_t * pavgVolt, uint8_t * numofcells)
{
	uint16_t minVolt = 50000, maxVolt = 0;
	uint32_t avgVolt = 0;
	uint8_t i, i1, actNr = 0, Cells[slave_boards];
    1362:	80 91 24 07 	lds	r24, 0x0724
    1366:	4d b7       	in	r20, 0x3d	; 61
    1368:	5e b7       	in	r21, 0x3e	; 62
    136a:	48 1b       	sub	r20, r24
    136c:	51 09       	sbc	r21, r1
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	5e bf       	out	0x3e, r21	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	4d bf       	out	0x3d, r20	; 61
    1378:	0d b7       	in	r16, 0x3d	; 61
    137a:	1e b7       	in	r17, 0x3e	; 62
    137c:	0f 5f       	subi	r16, 0xFF	; 255
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
	
	
	//Bestimmung der Zellenanzahl pro Board
	Zellen_pro_Board(Cells);
    1380:	c8 01       	movw	r24, r16
    1382:	0e 94 4f 09 	call	0x129e	; 0x129e <Zellen_pro_Board>
		
	//Bestimmung Min, Max, Avg
	for(i=0; i<slave_boards;i++)
    1386:	80 91 24 07 	lds	r24, 0x0724
    138a:	88 23       	and	r24, r24
    138c:	09 f4       	brne	.+2      	; 0x1390 <bmschip_evaluate+0x7c>
    138e:	73 c0       	rjmp	.+230    	; 0x1476 <bmschip_evaluate+0x162>
    1390:	aa e0       	ldi	r26, 0x0A	; 10
    1392:	b3 e0       	ldi	r27, 0x03	; 3
    1394:	bb 83       	std	Y+3, r27	; 0x03
    1396:	aa 83       	std	Y+2, r26	; 0x02
    1398:	18 01       	movw	r2, r16
    139a:	81 50       	subi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	f8 01       	movw	r30, r16
    13a2:	e8 0f       	add	r30, r24
    13a4:	f9 1f       	adc	r31, r25
    13a6:	fd 83       	std	Y+5, r31	; 0x05
    13a8:	ec 83       	std	Y+4, r30	; 0x04
    13aa:	61 2c       	mov	r6, r1
    13ac:	71 2c       	mov	r7, r1
    13ae:	81 2c       	mov	r8, r1
    13b0:	91 2c       	mov	r9, r1
// *** Auswertung der Zellspannungen *******************************************************
void bmschip_evaluate(uint16_t * pvolatages, uint16_t * pmaxVolt, uint16_t * pminVolt, uint16_t * pavgVolt, uint8_t * numofcells)
{
	uint16_t minVolt = 50000, maxVolt = 0;
	uint32_t avgVolt = 0;
	uint8_t i, i1, actNr = 0, Cells[slave_boards];
    13b2:	19 82       	std	Y+1, r1	; 0x01

// *** Auswertung der Zellspannungen *******************************************************
void bmschip_evaluate(uint16_t * pvolatages, uint16_t * pmaxVolt, uint16_t * pminVolt, uint16_t * pavgVolt, uint8_t * numofcells)
{
	uint16_t minVolt = 50000, maxVolt = 0;
	uint32_t avgVolt = 0;
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	cb 01       	movw	r24, r22
// *****************************************************************************************

// *** Auswertung der Zellspannungen *******************************************************
void bmschip_evaluate(uint16_t * pvolatages, uint16_t * pmaxVolt, uint16_t * pminVolt, uint16_t * pavgVolt, uint8_t * numofcells)
{
	uint16_t minVolt = 50000, maxVolt = 0;
    13ba:	e1 2c       	mov	r14, r1
    13bc:	f1 2c       	mov	r15, r1
    13be:	0f 2e       	mov	r0, r31
    13c0:	f0 e5       	ldi	r31, 0x50	; 80
    13c2:	cf 2e       	mov	r12, r31
    13c4:	f3 ec       	ldi	r31, 0xC3	; 195
    13c6:	df 2e       	mov	r13, r31
    13c8:	f0 2d       	mov	r31, r0
	for(i=0; i<slave_boards;i++)
	{
		for(i1=0; i1<12; i1++)
		{
			//Average Voltage bestimmen
			if(cells_per_board[i] & (1<<i1))
    13ca:	01 e0       	ldi	r16, 0x01	; 1
    13cc:	10 e0       	ldi	r17, 0x00	; 0
    13ce:	9b 01       	movw	r18, r22
    13d0:	ac 01       	movw	r20, r24
    13d2:	b4 01       	movw	r22, r8
    13d4:	25 01       	movw	r4, r10
    13d6:	3f c0       	rjmp	.+126    	; 0x1456 <bmschip_evaluate+0x142>
    13d8:	98 01       	movw	r18, r16
    13da:	08 2e       	mov	r0, r24
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <bmschip_evaluate+0xce>
    13de:	22 0f       	add	r18, r18
    13e0:	33 1f       	adc	r19, r19
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <bmschip_evaluate+0xca>
    13e6:	48 89       	ldd	r20, Y+16	; 0x10
    13e8:	59 89       	ldd	r21, Y+17	; 0x11
    13ea:	24 23       	and	r18, r20
    13ec:	35 23       	and	r19, r21
    13ee:	21 15       	cp	r18, r1
    13f0:	31 05       	cpc	r19, r1
    13f2:	d1 f0       	breq	.+52     	; 0x1428 <bmschip_evaluate+0x114>
			{
				avgVolt += pvolatages[(i*12)+i1];
    13f4:	40 81       	ld	r20, Z
    13f6:	51 81       	ldd	r21, Z+1	; 0x01
    13f8:	84 0e       	add	r8, r20
    13fa:	95 1e       	adc	r9, r21
    13fc:	a1 1c       	adc	r10, r1
    13fe:	b1 1c       	adc	r11, r1
    1400:	af 01       	movw	r20, r30
    1402:	46 0f       	add	r20, r22
    1404:	57 1f       	adc	r21, r23
    1406:	46 0d       	add	r20, r6
    1408:	57 1d       	adc	r21, r7
			}
			
			//Min Voltage bestimmen
			if((pvolatages[(i*12)+i1] < minVolt) && (cells_per_board[i] & (1<<i1)))		//Minimalspannung
    140a:	da 01       	movw	r26, r20
    140c:	4d 91       	ld	r20, X+
    140e:	5c 91       	ld	r21, X
    1410:	4c 15       	cp	r20, r12
    1412:	5d 05       	cpc	r21, r13
    1414:	30 f0       	brcs	.+12     	; 0x1422 <bmschip_evaluate+0x10e>
			{
				minVolt = pvolatages[(i*12)+i1];
			}
			
			//Max Voltage bestimmen
			else if((pvolatages[(i*12)+i1] > maxVolt) && (cells_per_board[i] & (1<<i1)))	//Maximalspannung
    1416:	e4 16       	cp	r14, r20
    1418:	f5 06       	cpc	r15, r21
    141a:	30 f4       	brcc	.+12     	; 0x1428 <bmschip_evaluate+0x114>
    141c:	23 2b       	or	r18, r19
    141e:	19 f4       	brne	.+6      	; 0x1426 <bmschip_evaluate+0x112>
    1420:	03 c0       	rjmp	.+6      	; 0x1428 <bmschip_evaluate+0x114>
			{
				avgVolt += pvolatages[(i*12)+i1];
			}
			
			//Min Voltage bestimmen
			if((pvolatages[(i*12)+i1] < minVolt) && (cells_per_board[i] & (1<<i1)))		//Minimalspannung
    1422:	6a 01       	movw	r12, r20
    1424:	01 c0       	rjmp	.+2      	; 0x1428 <bmschip_evaluate+0x114>
    1426:	7a 01       	movw	r14, r20
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	32 96       	adiw	r30, 0x02	; 2
	Zellen_pro_Board(Cells);
		
	//Bestimmung Min, Max, Avg
	for(i=0; i<slave_boards;i++)
	{
		for(i1=0; i1<12; i1++)
    142c:	8c 30       	cpi	r24, 0x0C	; 12
    142e:	91 05       	cpc	r25, r1
    1430:	99 f6       	brne	.-90     	; 0x13d8 <bmschip_evaluate+0xc4>
    1432:	a5 01       	movw	r20, r10
    1434:	94 01       	movw	r18, r8
			else if((pvolatages[(i*12)+i1] > maxVolt) && (cells_per_board[i] & (1<<i1)))	//Maximalspannung
			{
				maxVolt = pvolatages[(i*12)+i1];
			}
		}
		actNr += Cells[i];	//Merken, wie viele Zellen man hat
    1436:	f1 01       	movw	r30, r2
    1438:	81 91       	ld	r24, Z+
    143a:	1f 01       	movw	r2, r30
    143c:	f9 81       	ldd	r31, Y+1	; 0x01
    143e:	f8 0f       	add	r31, r24
    1440:	f9 83       	std	Y+1, r31	; 0x01
    1442:	68 51       	subi	r22, 0x18	; 24
    1444:	71 09       	sbc	r23, r1
    1446:	88 e1       	ldi	r24, 0x18	; 24
    1448:	68 0e       	add	r6, r24
    144a:	71 1c       	adc	r7, r1
	
	//Bestimmung der Zellenanzahl pro Board
	Zellen_pro_Board(Cells);
		
	//Bestimmung Min, Max, Avg
	for(i=0; i<slave_boards;i++)
    144c:	ac 81       	ldd	r26, Y+4	; 0x04
    144e:	bd 81       	ldd	r27, Y+5	; 0x05
    1450:	2a 16       	cp	r2, r26
    1452:	3b 06       	cpc	r3, r27
    1454:	e9 f0       	breq	.+58     	; 0x1490 <bmschip_evaluate+0x17c>
	{
		for(i1=0; i1<12; i1++)
		{
			//Average Voltage bestimmen
			if(cells_per_board[i] & (1<<i1))
    1456:	ea 81       	ldd	r30, Y+2	; 0x02
    1458:	fb 81       	ldd	r31, Y+3	; 0x03
    145a:	a1 91       	ld	r26, Z+
    145c:	b1 91       	ld	r27, Z+
    145e:	fb 83       	std	Y+3, r31	; 0x03
    1460:	ea 83       	std	Y+2, r30	; 0x02
    1462:	f2 01       	movw	r30, r4
    1464:	e6 1b       	sub	r30, r22
    1466:	f7 0b       	sbc	r31, r23
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	b9 8b       	std	Y+17, r27	; 0x11
    146e:	a8 8b       	std	Y+16, r26	; 0x10
    1470:	49 01       	movw	r8, r18
    1472:	5a 01       	movw	r10, r20
    1474:	b1 cf       	rjmp	.-158    	; 0x13d8 <bmschip_evaluate+0xc4>
// *** Auswertung der Zellspannungen *******************************************************
void bmschip_evaluate(uint16_t * pvolatages, uint16_t * pmaxVolt, uint16_t * pminVolt, uint16_t * pavgVolt, uint8_t * numofcells)
{
	uint16_t minVolt = 50000, maxVolt = 0;
	uint32_t avgVolt = 0;
	uint8_t i, i1, actNr = 0, Cells[slave_boards];
    1476:	19 82       	std	Y+1, r1	; 0x01

// *** Auswertung der Zellspannungen *******************************************************
void bmschip_evaluate(uint16_t * pvolatages, uint16_t * pmaxVolt, uint16_t * pminVolt, uint16_t * pavgVolt, uint8_t * numofcells)
{
	uint16_t minVolt = 50000, maxVolt = 0;
	uint32_t avgVolt = 0;
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	cb 01       	movw	r24, r22
// *****************************************************************************************

// *** Auswertung der Zellspannungen *******************************************************
void bmschip_evaluate(uint16_t * pvolatages, uint16_t * pmaxVolt, uint16_t * pminVolt, uint16_t * pavgVolt, uint8_t * numofcells)
{
	uint16_t minVolt = 50000, maxVolt = 0;
    147e:	e1 2c       	mov	r14, r1
    1480:	f1 2c       	mov	r15, r1
    1482:	0f 2e       	mov	r0, r31
    1484:	f0 e5       	ldi	r31, 0x50	; 80
    1486:	cf 2e       	mov	r12, r31
    1488:	f3 ec       	ldi	r31, 0xC3	; 195
    148a:	df 2e       	mov	r13, r31
    148c:	f0 2d       	mov	r31, r0
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <bmschip_evaluate+0x180>
    1490:	c5 01       	movw	r24, r10
    1492:	b4 01       	movw	r22, r8
		actNr += Cells[i];	//Merken, wie viele Zellen man hat
	}
	avgVolt /= actNr;	//Mittelwertbildung
	
	//Rückgabe Min, Max, Avg
	*pmaxVolt = maxVolt;
    1494:	ae 81       	ldd	r26, Y+6	; 0x06
    1496:	bf 81       	ldd	r27, Y+7	; 0x07
    1498:	ed 92       	st	X+, r14
    149a:	fc 92       	st	X, r15
	*pminVolt = minVolt;
    149c:	e8 85       	ldd	r30, Y+8	; 0x08
    149e:	f9 85       	ldd	r31, Y+9	; 0x09
    14a0:	d1 82       	std	Z+1, r13	; 0x01
    14a2:	c0 82       	st	Z, r12
				maxVolt = pvolatages[(i*12)+i1];
			}
		}
		actNr += Cells[i];	//Merken, wie viele Zellen man hat
	}
	avgVolt /= actNr;	//Mittelwertbildung
    14a4:	f9 81       	ldd	r31, Y+1	; 0x01
    14a6:	2f 2f       	mov	r18, r31
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	50 e0       	ldi	r21, 0x00	; 0
    14ae:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__udivmodsi4>
	
	//Rückgabe Min, Max, Avg
	*pmaxVolt = maxVolt;
	*pminVolt = minVolt;
	*pavgVolt = (uint16_t)avgVolt;
    14b2:	aa 85       	ldd	r26, Y+10	; 0x0a
    14b4:	bb 85       	ldd	r27, Y+11	; 0x0b
    14b6:	2d 93       	st	X+, r18
    14b8:	3c 93       	st	X, r19
	*numofcells = actNr;
    14ba:	29 81       	ldd	r18, Y+1	; 0x01
    14bc:	ec 85       	ldd	r30, Y+12	; 0x0c
    14be:	fd 85       	ldd	r31, Y+13	; 0x0d
    14c0:	20 83       	st	Z, r18
}
    14c2:	4e 85       	ldd	r20, Y+14	; 0x0e
    14c4:	5f 85       	ldd	r21, Y+15	; 0x0f
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	5e bf       	out	0x3e, r21	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	4d bf       	out	0x3d, r20	; 61
    14d0:	61 96       	adiw	r28, 0x11	; 17
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	ff 90       	pop	r15
    14e6:	ef 90       	pop	r14
    14e8:	df 90       	pop	r13
    14ea:	cf 90       	pop	r12
    14ec:	bf 90       	pop	r11
    14ee:	af 90       	pop	r10
    14f0:	9f 90       	pop	r9
    14f2:	8f 90       	pop	r8
    14f4:	7f 90       	pop	r7
    14f6:	6f 90       	pop	r6
    14f8:	5f 90       	pop	r5
    14fa:	4f 90       	pop	r4
    14fc:	3f 90       	pop	r3
    14fe:	2f 90       	pop	r2
    1500:	08 95       	ret

00001502 <bmschip_checkBalancing>:
// minVolt:	Kleinste Spannung im System
// voltDiff: Different, ab welcher gebalanced werden darf
// undervoltage: Unterspannungsgrenze

void bmschip_checkBalancing(uint16_t *pvoltages, uint16_t minVolt, uint16_t undervoltage, uint16_t *pcells)
{
    1502:	2f 92       	push	r2
    1504:	3f 92       	push	r3
    1506:	5f 92       	push	r5
    1508:	6f 92       	push	r6
    150a:	7f 92       	push	r7
    150c:	8f 92       	push	r8
    150e:	9f 92       	push	r9
    1510:	af 92       	push	r10
    1512:	bf 92       	push	r11
    1514:	cf 92       	push	r12
    1516:	df 92       	push	r13
    1518:	ef 92       	push	r14
    151a:	ff 92       	push	r15
    151c:	0f 93       	push	r16
    151e:	1f 93       	push	r17
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	00 d0       	rcall	.+0      	; 0x1526 <bmschip_checkBalancing+0x24>
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	5c 01       	movw	r10, r24
    152c:	8b 01       	movw	r16, r22
    152e:	7a 01       	movw	r14, r20
    1530:	49 01       	movw	r8, r18
			}
		}
		pcells[k] = cells;
	}
	
}
    1532:	2d b6       	in	r2, 0x3d	; 61
    1534:	3e b6       	in	r3, 0x3e	; 62
// undervoltage: Unterspannungsgrenze

void bmschip_checkBalancing(uint16_t *pvoltages, uint16_t minVolt, uint16_t undervoltage, uint16_t *pcells)
{
	uint16_t cells;
	uint8_t i, k, Cells[slave_boards];
    1536:	80 91 24 07 	lds	r24, 0x0724
    153a:	2d b7       	in	r18, 0x3d	; 61
    153c:	3e b7       	in	r19, 0x3e	; 62
    153e:	28 1b       	sub	r18, r24
    1540:	31 09       	sbc	r19, r1
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	3e bf       	out	0x3e, r19	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	2d bf       	out	0x3d, r18	; 61
	
	
	//Bestimmung der Zellenanzahl pro Board
	Zellen_pro_Board(Cells);
    154c:	8d b7       	in	r24, 0x3d	; 61
    154e:	9e b7       	in	r25, 0x3e	; 62
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	0e 94 4f 09 	call	0x129e	; 0x129e <Zellen_pro_Board>

	for(k=0; k<slave_boards; k++)
    1556:	80 91 24 07 	lds	r24, 0x0724
    155a:	88 23       	and	r24, r24
    155c:	09 f4       	brne	.+2      	; 0x1560 <bmschip_checkBalancing+0x5e>
    155e:	58 c0       	rjmp	.+176    	; 0x1610 <bmschip_checkBalancing+0x10e>
    1560:	71 2c       	mov	r7, r1
	{
		cells = 0x0000;
		for(i=0; i<12; i++)
		{
			if((pvoltages[(k*12)+i] >= (minVolt + BAL_DIFFERENCE)) && (pvoltages[(k*12)+i] > (undervoltage + BAL_DIFFERENCE)) && (pvoltages[(k*12)+i] > BALANCING_LIMIT))
    1562:	61 2c       	mov	r6, r1
    1564:	51 2c       	mov	r5, r1
    1566:	98 01       	movw	r18, r16
    1568:	2c 59       	subi	r18, 0x9C	; 156
    156a:	3f 4f       	sbci	r19, 0xFF	; 255
    156c:	a7 01       	movw	r20, r14
    156e:	4c 59       	subi	r20, 0x9C	; 156
    1570:	5f 4f       	sbci	r21, 0xFF	; 255
			{
				if(cells_per_board[k] & (1<<i))
    1572:	cc 24       	eor	r12, r12
    1574:	c3 94       	inc	r12
    1576:	d1 2c       	mov	r13, r1
    1578:	30 c0       	rjmp	.+96     	; 0x15da <bmschip_checkBalancing+0xd8>
	for(k=0; k<slave_boards; k++)
	{
		cells = 0x0000;
		for(i=0; i<12; i++)
		{
			if((pvoltages[(k*12)+i] >= (minVolt + BAL_DIFFERENCE)) && (pvoltages[(k*12)+i] > (undervoltage + BAL_DIFFERENCE)) && (pvoltages[(k*12)+i] > BALANCING_LIMIT))
    157a:	01 91       	ld	r16, Z+
    157c:	11 91       	ld	r17, Z+
    157e:	02 17       	cp	r16, r18
    1580:	13 07       	cpc	r17, r19
    1582:	d0 f0       	brcs	.+52     	; 0x15b8 <bmschip_checkBalancing+0xb6>
    1584:	40 17       	cp	r20, r16
    1586:	51 07       	cpc	r21, r17
    1588:	b8 f4       	brcc	.+46     	; 0x15b8 <bmschip_checkBalancing+0xb6>
    158a:	01 33       	cpi	r16, 0x31	; 49
    158c:	15 47       	sbci	r17, 0x75	; 117
    158e:	a0 f0       	brcs	.+40     	; 0x15b8 <bmschip_checkBalancing+0xb6>
			{
				if(cells_per_board[k] & (1<<i))
    1590:	86 01       	movw	r16, r12
    1592:	08 2e       	mov	r0, r24
    1594:	02 c0       	rjmp	.+4      	; 0x159a <bmschip_checkBalancing+0x98>
    1596:	00 0f       	add	r16, r16
    1598:	11 1f       	adc	r17, r17
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <bmschip_checkBalancing+0x94>
    159e:	1a 83       	std	Y+2, r17	; 0x02
    15a0:	09 83       	std	Y+1, r16	; 0x01
    15a2:	d7 01       	movw	r26, r14
    15a4:	0d 91       	ld	r16, X+
    15a6:	1c 91       	ld	r17, X
    15a8:	a9 81       	ldd	r26, Y+1	; 0x01
    15aa:	ba 81       	ldd	r27, Y+2	; 0x02
    15ac:	0a 23       	and	r16, r26
    15ae:	1b 23       	and	r17, r27
    15b0:	01 2b       	or	r16, r17
    15b2:	11 f0       	breq	.+4      	; 0x15b8 <bmschip_checkBalancing+0xb6>
				{
					cells |= (1 << i); 					
    15b4:	6a 2b       	or	r22, r26
    15b6:	7b 2b       	or	r23, r27
    15b8:	01 96       	adiw	r24, 0x01	; 1
	Zellen_pro_Board(Cells);

	for(k=0; k<slave_boards; k++)
	{
		cells = 0x0000;
		for(i=0; i<12; i++)
    15ba:	8c 30       	cpi	r24, 0x0C	; 12
    15bc:	91 05       	cpc	r25, r1
    15be:	e9 f6       	brne	.-70     	; 0x157a <bmschip_checkBalancing+0x78>
				{
					cells |= (1 << i); 					
				}
			}
		}
		pcells[k] = cells;
    15c0:	e7 2d       	mov	r30, r7
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	ee 0f       	add	r30, r30
    15c6:	ff 1f       	adc	r31, r31
    15c8:	e8 0d       	add	r30, r8
    15ca:	f9 1d       	adc	r31, r9
    15cc:	71 83       	std	Z+1, r23	; 0x01
    15ce:	60 83       	st	Z, r22
	
	
	//Bestimmung der Zellenanzahl pro Board
	Zellen_pro_Board(Cells);

	for(k=0; k<slave_boards; k++)
    15d0:	73 94       	inc	r7
    15d2:	80 91 24 07 	lds	r24, 0x0724
    15d6:	78 16       	cp	r7, r24
    15d8:	d8 f4       	brcc	.+54     	; 0x1610 <bmschip_checkBalancing+0x10e>
	{
		cells = 0x0000;
		for(i=0; i<12; i++)
		{
			if((pvoltages[(k*12)+i] >= (minVolt + BAL_DIFFERENCE)) && (pvoltages[(k*12)+i] > (undervoltage + BAL_DIFFERENCE)) && (pvoltages[(k*12)+i] > BALANCING_LIMIT))
    15da:	e7 2c       	mov	r14, r7
    15dc:	f1 2c       	mov	r15, r1
    15de:	f7 01       	movw	r30, r14
    15e0:	ee 0f       	add	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	ee 0d       	add	r30, r14
    15e6:	ff 1d       	adc	r31, r15
    15e8:	ee 0f       	add	r30, r30
    15ea:	ff 1f       	adc	r31, r31
    15ec:	ee 0f       	add	r30, r30
    15ee:	ff 1f       	adc	r31, r31
    15f0:	ee 0f       	add	r30, r30
    15f2:	ff 1f       	adc	r31, r31
    15f4:	ea 0d       	add	r30, r10
    15f6:	fb 1d       	adc	r31, r11
    15f8:	86 2d       	mov	r24, r6
    15fa:	95 2d       	mov	r25, r5
    15fc:	66 2d       	mov	r22, r6
    15fe:	75 2d       	mov	r23, r5
			{
				if(cells_per_board[k] & (1<<i))
    1600:	d7 01       	movw	r26, r14
    1602:	aa 0f       	add	r26, r26
    1604:	bb 1f       	adc	r27, r27
    1606:	8d 01       	movw	r16, r26
    1608:	06 5f       	subi	r16, 0xF6	; 246
    160a:	1c 4f       	sbci	r17, 0xFC	; 252
    160c:	78 01       	movw	r14, r16
    160e:	b5 cf       	rjmp	.-150    	; 0x157a <bmschip_checkBalancing+0x78>
			}
		}
		pcells[k] = cells;
	}
	
}
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	3e be       	out	0x3e, r3	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	2d be       	out	0x3d, r2	; 61
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	ff 90       	pop	r15
    1628:	ef 90       	pop	r14
    162a:	df 90       	pop	r13
    162c:	cf 90       	pop	r12
    162e:	bf 90       	pop	r11
    1630:	af 90       	pop	r10
    1632:	9f 90       	pop	r9
    1634:	8f 90       	pop	r8
    1636:	7f 90       	pop	r7
    1638:	6f 90       	pop	r6
    163a:	5f 90       	pop	r5
    163c:	3f 90       	pop	r3
    163e:	2f 90       	pop	r2
    1640:	08 95       	ret

00001642 <bmschip_recommendBalancing>:

uint8_t bmschip_recommendBalancing(uint16_t *pvoltages, uint16_t minVolt, uint16_t undervoltage, uint16_t *pcells)
{
    1642:	2f 92       	push	r2
    1644:	3f 92       	push	r3
    1646:	4f 92       	push	r4
    1648:	5f 92       	push	r5
    164a:	6f 92       	push	r6
    164c:	7f 92       	push	r7
    164e:	8f 92       	push	r8
    1650:	9f 92       	push	r9
    1652:	af 92       	push	r10
    1654:	bf 92       	push	r11
    1656:	cf 92       	push	r12
    1658:	df 92       	push	r13
    165a:	ef 92       	push	r14
    165c:	ff 92       	push	r15
    165e:	0f 93       	push	r16
    1660:	1f 93       	push	r17
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	00 d0       	rcall	.+0      	; 0x1668 <bmschip_recommendBalancing+0x26>
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	5c 01       	movw	r10, r24
    166e:	8b 01       	movw	r16, r22
    1670:	7a 01       	movw	r14, r20
    1672:	49 01       	movw	r8, r18
			}
		}
		pcells[k] = cells;
	}
	return(Anzahl);
}
    1674:	2d b6       	in	r2, 0x3d	; 61
    1676:	3e b6       	in	r3, 0x3e	; 62
}

uint8_t bmschip_recommendBalancing(uint16_t *pvoltages, uint16_t minVolt, uint16_t undervoltage, uint16_t *pcells)
{
	uint16_t cells;
	uint8_t i, k, Cells[slave_boards], Anzahl=0;
    1678:	80 91 24 07 	lds	r24, 0x0724
    167c:	2d b7       	in	r18, 0x3d	; 61
    167e:	3e b7       	in	r19, 0x3e	; 62
    1680:	28 1b       	sub	r18, r24
    1682:	31 09       	sbc	r19, r1
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	3e bf       	out	0x3e, r19	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	2d bf       	out	0x3d, r18	; 61


	//Bestimmung der Zellenanzahl pro Board
	Zellen_pro_Board(Cells);
    168e:	8d b7       	in	r24, 0x3d	; 61
    1690:	9e b7       	in	r25, 0x3e	; 62
    1692:	01 96       	adiw	r24, 0x01	; 1
    1694:	0e 94 4f 09 	call	0x129e	; 0x129e <Zellen_pro_Board>
		
	for(k=0; k<slave_boards; k++)
    1698:	80 91 24 07 	lds	r24, 0x0724
    169c:	88 23       	and	r24, r24
    169e:	09 f4       	brne	.+2      	; 0x16a2 <bmschip_recommendBalancing+0x60>
    16a0:	5a c0       	rjmp	.+180    	; 0x1756 <bmschip_recommendBalancing+0x114>
    16a2:	71 2c       	mov	r7, r1
}

uint8_t bmschip_recommendBalancing(uint16_t *pvoltages, uint16_t minVolt, uint16_t undervoltage, uint16_t *pcells)
{
	uint16_t cells;
	uint8_t i, k, Cells[slave_boards], Anzahl=0;
    16a4:	41 2c       	mov	r4, r1
	for(k=0; k<slave_boards; k++)
	{
		cells = 0x0000;
		for(i=0; i<12; i++)
		{
			if((pvoltages[(k*12)+i] >= (minVolt + BAL_REC_DIFFERENCE)) && (pvoltages[(k*12)+i] > (undervoltage + BAL_REC_DIFFERENCE)) && (pvoltages[(k*12)+i] > BALANCING_LIMIT))
    16a6:	61 2c       	mov	r6, r1
    16a8:	51 2c       	mov	r5, r1
    16aa:	98 01       	movw	r18, r16
    16ac:	28 53       	subi	r18, 0x38	; 56
    16ae:	3f 4f       	sbci	r19, 0xFF	; 255
    16b0:	a7 01       	movw	r20, r14
    16b2:	48 53       	subi	r20, 0x38	; 56
    16b4:	5f 4f       	sbci	r21, 0xFF	; 255
			{
				if(cells_per_board[k] & (1<<i))
    16b6:	cc 24       	eor	r12, r12
    16b8:	c3 94       	inc	r12
    16ba:	d1 2c       	mov	r13, r1
    16bc:	31 c0       	rjmp	.+98     	; 0x1720 <bmschip_recommendBalancing+0xde>
	for(k=0; k<slave_boards; k++)
	{
		cells = 0x0000;
		for(i=0; i<12; i++)
		{
			if((pvoltages[(k*12)+i] >= (minVolt + BAL_REC_DIFFERENCE)) && (pvoltages[(k*12)+i] > (undervoltage + BAL_REC_DIFFERENCE)) && (pvoltages[(k*12)+i] > BALANCING_LIMIT))
    16be:	01 91       	ld	r16, Z+
    16c0:	11 91       	ld	r17, Z+
    16c2:	02 17       	cp	r16, r18
    16c4:	13 07       	cpc	r17, r19
    16c6:	d8 f0       	brcs	.+54     	; 0x16fe <bmschip_recommendBalancing+0xbc>
    16c8:	40 17       	cp	r20, r16
    16ca:	51 07       	cpc	r21, r17
    16cc:	c0 f4       	brcc	.+48     	; 0x16fe <bmschip_recommendBalancing+0xbc>
    16ce:	01 33       	cpi	r16, 0x31	; 49
    16d0:	15 47       	sbci	r17, 0x75	; 117
    16d2:	a8 f0       	brcs	.+42     	; 0x16fe <bmschip_recommendBalancing+0xbc>
			{
				if(cells_per_board[k] & (1<<i))
    16d4:	86 01       	movw	r16, r12
    16d6:	08 2e       	mov	r0, r24
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <bmschip_recommendBalancing+0x9c>
    16da:	00 0f       	add	r16, r16
    16dc:	11 1f       	adc	r17, r17
    16de:	0a 94       	dec	r0
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <bmschip_recommendBalancing+0x98>
    16e2:	1a 83       	std	Y+2, r17	; 0x02
    16e4:	09 83       	std	Y+1, r16	; 0x01
    16e6:	d7 01       	movw	r26, r14
    16e8:	0d 91       	ld	r16, X+
    16ea:	1c 91       	ld	r17, X
    16ec:	a9 81       	ldd	r26, Y+1	; 0x01
    16ee:	ba 81       	ldd	r27, Y+2	; 0x02
    16f0:	0a 23       	and	r16, r26
    16f2:	1b 23       	and	r17, r27
    16f4:	01 2b       	or	r16, r17
    16f6:	19 f0       	breq	.+6      	; 0x16fe <bmschip_recommendBalancing+0xbc>
				{
					cells |= (1 << i);
    16f8:	6a 2b       	or	r22, r26
    16fa:	7b 2b       	or	r23, r27
					Anzahl++;
    16fc:	43 94       	inc	r4
    16fe:	01 96       	adiw	r24, 0x01	; 1
	Zellen_pro_Board(Cells);
		
	for(k=0; k<slave_boards; k++)
	{
		cells = 0x0000;
		for(i=0; i<12; i++)
    1700:	8c 30       	cpi	r24, 0x0C	; 12
    1702:	91 05       	cpc	r25, r1
    1704:	e1 f6       	brne	.-72     	; 0x16be <bmschip_recommendBalancing+0x7c>
					cells |= (1 << i);
					Anzahl++;
				}					
			}
		}
		pcells[k] = cells;
    1706:	e7 2d       	mov	r30, r7
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	ee 0f       	add	r30, r30
    170c:	ff 1f       	adc	r31, r31
    170e:	e8 0d       	add	r30, r8
    1710:	f9 1d       	adc	r31, r9
    1712:	71 83       	std	Z+1, r23	; 0x01
    1714:	60 83       	st	Z, r22


	//Bestimmung der Zellenanzahl pro Board
	Zellen_pro_Board(Cells);
		
	for(k=0; k<slave_boards; k++)
    1716:	73 94       	inc	r7
    1718:	80 91 24 07 	lds	r24, 0x0724
    171c:	78 16       	cp	r7, r24
    171e:	e0 f4       	brcc	.+56     	; 0x1758 <bmschip_recommendBalancing+0x116>
	{
		cells = 0x0000;
		for(i=0; i<12; i++)
		{
			if((pvoltages[(k*12)+i] >= (minVolt + BAL_REC_DIFFERENCE)) && (pvoltages[(k*12)+i] > (undervoltage + BAL_REC_DIFFERENCE)) && (pvoltages[(k*12)+i] > BALANCING_LIMIT))
    1720:	e7 2c       	mov	r14, r7
    1722:	f1 2c       	mov	r15, r1
    1724:	f7 01       	movw	r30, r14
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	ee 0d       	add	r30, r14
    172c:	ff 1d       	adc	r31, r15
    172e:	ee 0f       	add	r30, r30
    1730:	ff 1f       	adc	r31, r31
    1732:	ee 0f       	add	r30, r30
    1734:	ff 1f       	adc	r31, r31
    1736:	ee 0f       	add	r30, r30
    1738:	ff 1f       	adc	r31, r31
    173a:	ea 0d       	add	r30, r10
    173c:	fb 1d       	adc	r31, r11
    173e:	86 2d       	mov	r24, r6
    1740:	95 2d       	mov	r25, r5
    1742:	66 2d       	mov	r22, r6
    1744:	75 2d       	mov	r23, r5
			{
				if(cells_per_board[k] & (1<<i))
    1746:	d7 01       	movw	r26, r14
    1748:	aa 0f       	add	r26, r26
    174a:	bb 1f       	adc	r27, r27
    174c:	8d 01       	movw	r16, r26
    174e:	06 5f       	subi	r16, 0xF6	; 246
    1750:	1c 4f       	sbci	r17, 0xFC	; 252
    1752:	78 01       	movw	r14, r16
    1754:	b4 cf       	rjmp	.-152    	; 0x16be <bmschip_recommendBalancing+0x7c>
}

uint8_t bmschip_recommendBalancing(uint16_t *pvoltages, uint16_t minVolt, uint16_t undervoltage, uint16_t *pcells)
{
	uint16_t cells;
	uint8_t i, k, Cells[slave_boards], Anzahl=0;
    1756:	41 2c       	mov	r4, r1
			}
		}
		pcells[k] = cells;
	}
	return(Anzahl);
}
    1758:	84 2d       	mov	r24, r4
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	3e be       	out	0x3e, r3	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	2d be       	out	0x3d, r2	; 61
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	ff 90       	pop	r15
    1772:	ef 90       	pop	r14
    1774:	df 90       	pop	r13
    1776:	cf 90       	pop	r12
    1778:	bf 90       	pop	r11
    177a:	af 90       	pop	r10
    177c:	9f 90       	pop	r9
    177e:	8f 90       	pop	r8
    1780:	7f 90       	pop	r7
    1782:	6f 90       	pop	r6
    1784:	5f 90       	pop	r5
    1786:	4f 90       	pop	r4
    1788:	3f 90       	pop	r3
    178a:	2f 90       	pop	r2
    178c:	08 95       	ret

0000178e <can_init>:
#include "can.h"

uint8_t can_tx_flags;

void can_init(uint16_t kbaudrate)
{
    178e:	2f 92       	push	r2
    1790:	3f 92       	push	r3
    1792:	4f 92       	push	r4
    1794:	5f 92       	push	r5
    1796:	7f 92       	push	r7
    1798:	8f 92       	push	r8
    179a:	af 92       	push	r10
    179c:	bf 92       	push	r11
    179e:	cf 92       	push	r12
    17a0:	df 92       	push	r13
    17a2:	ef 92       	push	r14
    17a4:	ff 92       	push	r15
    17a6:	0f 93       	push	r16
    17a8:	1f 93       	push	r17
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
	CANGCON = 0x00;		// disable CAN
    17ae:	10 92 d8 00 	sts	0x00D8, r1
	// set bit-timing registers
	// configure baudrate (SP=81.3%): single sample, SJW=2, PRS=6, PHS1=6, PHS2=3
	if(kbaudrate == 1000) 			// 1 MBit/s (87.5%)
    17b2:	88 3e       	cpi	r24, 0xE8	; 232
    17b4:	23 e0       	ldi	r18, 0x03	; 3
    17b6:	92 07       	cpc	r25, r18
    17b8:	49 f4       	brne	.+18     	; 0x17cc <can_init+0x3e>
	{
		CANBT1 = 0x00;
    17ba:	10 92 e2 00 	sts	0x00E2, r1
		CANBT2 = 0x0A;
    17be:	8a e0       	ldi	r24, 0x0A	; 10
    17c0:	80 93 e3 00 	sts	0x00E3, r24
		CANBT3 = 0x1C;
    17c4:	8c e1       	ldi	r24, 0x1C	; 28
    17c6:	80 93 e4 00 	sts	0x00E4, r24
    17ca:	47 c0       	rjmp	.+142    	; 0x185a <can_init+0xcc>
	} 
	else if(kbaudrate == 500)		// 500 kBit/s
    17cc:	84 3f       	cpi	r24, 0xF4	; 244
    17ce:	e1 e0       	ldi	r30, 0x01	; 1
    17d0:	9e 07       	cpc	r25, r30
    17d2:	49 f4       	brne	.+18     	; 0x17e6 <can_init+0x58>
	{
		CANBT1 = 0x02;
    17d4:	82 e0       	ldi	r24, 0x02	; 2
    17d6:	80 93 e2 00 	sts	0x00E2, r24
		CANBT2 = 0x2A;
    17da:	8a e2       	ldi	r24, 0x2A	; 42
    17dc:	80 93 e3 00 	sts	0x00E3, r24
		CANBT3 = 0x2A;
    17e0:	80 93 e4 00 	sts	0x00E4, r24
    17e4:	3a c0       	rjmp	.+116    	; 0x185a <can_init+0xcc>
	} 
	else if(kbaudrate == 250)		// 250 kBit/s
    17e6:	8a 3f       	cpi	r24, 0xFA	; 250
    17e8:	91 05       	cpc	r25, r1
    17ea:	49 f4       	brne	.+18     	; 0x17fe <can_init+0x70>
	{
		CANBT1 = 0x06;
    17ec:	86 e0       	ldi	r24, 0x06	; 6
    17ee:	80 93 e2 00 	sts	0x00E2, r24
		CANBT2 = 0x2A;
    17f2:	8a e2       	ldi	r24, 0x2A	; 42
    17f4:	80 93 e3 00 	sts	0x00E3, r24
		CANBT3 = 0x2A;
    17f8:	80 93 e4 00 	sts	0x00E4, r24
    17fc:	2e c0       	rjmp	.+92     	; 0x185a <can_init+0xcc>
	} 
	else 							// 125 kBit/s
	{
		CANBT1 = 0x0E;
    17fe:	8e e0       	ldi	r24, 0x0E	; 14
    1800:	80 93 e2 00 	sts	0x00E2, r24
		CANBT2 = 0x2A;
    1804:	8a e2       	ldi	r24, 0x2A	; 42
    1806:	80 93 e3 00 	sts	0x00E3, r24
		CANBT3 = 0x2A;
    180a:	80 93 e4 00 	sts	0x00E4, r24
    180e:	25 c0       	rjmp	.+74     	; 0x185a <can_init+0xcc>
	}
	
	// init all MOb's, use MOb's #5 & #4 to send, MOb's #0..#3 to receive
	for(uint8_t i = 0; i < 6; i++) 
	{
		CANPAGE = (i << 4);		// select MOb
    1810:	88 2e       	mov	r8, r24
    1812:	88 0c       	add	r8, r8
    1814:	88 0c       	add	r8, r8
    1816:	88 0c       	add	r8, r8
    1818:	88 0c       	add	r8, r8
    181a:	f6 01       	movw	r30, r12
    181c:	80 82       	st	Z, r8
		CANSTMOB = 0;			// status: clear
    181e:	f7 01       	movw	r30, r14
    1820:	10 82       	st	Z, r1
		if(i < 4) 
    1822:	84 30       	cpi	r24, 0x04	; 4
    1824:	18 f4       	brcc	.+6      	; 0x182c <can_init+0x9e>
			CANCDMOB = 0x80;	// ctrl: enable reception
    1826:	f5 01       	movw	r30, r10
    1828:	70 82       	st	Z, r7
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <can_init+0xa2>
		else 
			CANCDMOB = 0;		// ctrl: disable MOb
    182c:	f5 01       	movw	r30, r10
    182e:	10 82       	st	Z, r1
		
		//clear acceptance code
		CANIDT4 = 0;
    1830:	f8 01       	movw	r30, r16
    1832:	10 82       	st	Z, r1
		CANIDT3 = 0;
    1834:	fb 01       	movw	r30, r22
    1836:	10 82       	st	Z, r1
		CANIDT2 = 0;
    1838:	fa 01       	movw	r30, r20
    183a:	10 82       	st	Z, r1
		CANIDT1 = 0;
    183c:	f9 01       	movw	r30, r18
    183e:	10 82       	st	Z, r1
		
		//clear acceptance mask
		CANIDM4 = 0;
    1840:	f2 01       	movw	r30, r4
    1842:	10 82       	st	Z, r1
		CANIDM3 = 0;
    1844:	18 82       	st	Y, r1
		CANIDM2 = 0;
    1846:	1c 92       	st	X, r1
		CANIDM1 = 0;
    1848:	f1 01       	movw	r30, r2
    184a:	10 82       	st	Z, r1
		CANBT2 = 0x2A;
		CANBT3 = 0x2A;
	}
	
	// init all MOb's, use MOb's #5 & #4 to send, MOb's #0..#3 to receive
	for(uint8_t i = 0; i < 6; i++) 
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	86 30       	cpi	r24, 0x06	; 6
    1850:	f9 f6       	brne	.-66     	; 0x1810 <can_init+0x82>
		CANIDM1 = 0;
	}
	//#ifdef CAN_LISTEN_ONLY
	//	CANGCON = 0x0A;		// set ListeningOnlyMode, no TX, no ACK
	//#else
	CANGCON = 0x02;		// enable CAN
    1852:	82 e0       	ldi	r24, 0x02	; 2
    1854:	80 93 d8 00 	sts	0x00D8, r24
    1858:	2a c0       	rjmp	.+84     	; 0x18ae <can_init+0x120>
#include "can.h"

uint8_t can_tx_flags;

void can_init(uint16_t kbaudrate)
{
    185a:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	// init all MOb's, use MOb's #5 & #4 to send, MOb's #0..#3 to receive
	for(uint8_t i = 0; i < 6; i++) 
	{
		CANPAGE = (i << 4);		// select MOb
    185c:	0f 2e       	mov	r0, r31
    185e:	fd ee       	ldi	r31, 0xED	; 237
    1860:	cf 2e       	mov	r12, r31
    1862:	d1 2c       	mov	r13, r1
    1864:	f0 2d       	mov	r31, r0
		CANSTMOB = 0;			// status: clear
    1866:	0f 2e       	mov	r0, r31
    1868:	fe ee       	ldi	r31, 0xEE	; 238
    186a:	ef 2e       	mov	r14, r31
    186c:	f1 2c       	mov	r15, r1
    186e:	f0 2d       	mov	r31, r0
		if(i < 4) 
			CANCDMOB = 0x80;	// ctrl: enable reception
		else 
			CANCDMOB = 0;		// ctrl: disable MOb
    1870:	0f 2e       	mov	r0, r31
    1872:	ff ee       	ldi	r31, 0xEF	; 239
    1874:	af 2e       	mov	r10, r31
    1876:	b1 2c       	mov	r11, r1
    1878:	f0 2d       	mov	r31, r0
	for(uint8_t i = 0; i < 6; i++) 
	{
		CANPAGE = (i << 4);		// select MOb
		CANSTMOB = 0;			// status: clear
		if(i < 4) 
			CANCDMOB = 0x80;	// ctrl: enable reception
    187a:	68 94       	set
    187c:	77 24       	eor	r7, r7
    187e:	77 f8       	bld	r7, 7
		else 
			CANCDMOB = 0;		// ctrl: disable MOb
		
		//clear acceptance code
		CANIDT4 = 0;
    1880:	00 ef       	ldi	r16, 0xF0	; 240
    1882:	10 e0       	ldi	r17, 0x00	; 0
		CANIDT3 = 0;
    1884:	61 ef       	ldi	r22, 0xF1	; 241
    1886:	70 e0       	ldi	r23, 0x00	; 0
		CANIDT2 = 0;
    1888:	42 ef       	ldi	r20, 0xF2	; 242
    188a:	50 e0       	ldi	r21, 0x00	; 0
		CANIDT1 = 0;
    188c:	23 ef       	ldi	r18, 0xF3	; 243
    188e:	30 e0       	ldi	r19, 0x00	; 0
		
		//clear acceptance mask
		CANIDM4 = 0;
    1890:	0f 2e       	mov	r0, r31
    1892:	f4 ef       	ldi	r31, 0xF4	; 244
    1894:	4f 2e       	mov	r4, r31
    1896:	51 2c       	mov	r5, r1
    1898:	f0 2d       	mov	r31, r0
		CANIDM3 = 0;
    189a:	c5 ef       	ldi	r28, 0xF5	; 245
    189c:	d0 e0       	ldi	r29, 0x00	; 0
		CANIDM2 = 0;
    189e:	a6 ef       	ldi	r26, 0xF6	; 246
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
		CANIDM1 = 0;
    18a2:	0f 2e       	mov	r0, r31
    18a4:	f7 ef       	ldi	r31, 0xF7	; 247
    18a6:	2f 2e       	mov	r2, r31
    18a8:	31 2c       	mov	r3, r1
    18aa:	f0 2d       	mov	r31, r0
    18ac:	b1 cf       	rjmp	.-158    	; 0x1810 <can_init+0x82>
	//#ifdef CAN_LISTEN_ONLY
	//	CANGCON = 0x0A;		// set ListeningOnlyMode, no TX, no ACK
	//#else
	CANGCON = 0x02;		// enable CAN
	//#endif
}
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	df 90       	pop	r13
    18bc:	cf 90       	pop	r12
    18be:	bf 90       	pop	r11
    18c0:	af 90       	pop	r10
    18c2:	8f 90       	pop	r8
    18c4:	7f 90       	pop	r7
    18c6:	5f 90       	pop	r5
    18c8:	4f 90       	pop	r4
    18ca:	3f 90       	pop	r3
    18cc:	2f 90       	pop	r2
    18ce:	08 95       	ret

000018d0 <can_receive_message>:
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
uint8_t can_receive_message(uint32_t *id, uint8_t *len, uint64_t *can_data)
{
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
	uint8_t cs, return_value = 0;
	uint8_t *data_ptr = (uint8_t*) can_data;
	uint8_t mob;
	for(mob = 0; mob < 4; mob++)	// check receive buffers of the CAN
	{ 
		CANPAGE = (mob << 4);		// select MOb
    18d8:	10 92 ed 00 	sts	0x00ED, r1
		cs = CANEN2 >> mob;			// get status of MOb
    18dc:	20 91 dc 00 	lds	r18, 0x00DC
		if ((cs & 0x01) == 0)		// MOb not busy? -> data received!
    18e0:	20 ff       	sbrs	r18, 0
    18e2:	14 c0       	rjmp	.+40     	; 0x190c <can_receive_message+0x3c>
    18e4:	21 e0       	ldi	r18, 0x01	; 1
    18e6:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t cs, return_value = 0;
	uint8_t *data_ptr = (uint8_t*) can_data;
	uint8_t mob;
	for(mob = 0; mob < 4; mob++)	// check receive buffers of the CAN
	{ 
		CANPAGE = (mob << 4);		// select MOb
    18e8:	cd ee       	ldi	r28, 0xED	; 237
    18ea:	d0 e0       	ldi	r29, 0x00	; 0
		cs = CANEN2 >> mob;			// get status of MOb
    18ec:	ac ed       	ldi	r26, 0xDC	; 220
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
	uint8_t cs, return_value = 0;
	uint8_t *data_ptr = (uint8_t*) can_data;
	uint8_t mob;
	for(mob = 0; mob < 4; mob++)	// check receive buffers of the CAN
	{ 
		CANPAGE = (mob << 4);		// select MOb
    18f0:	e2 2f       	mov	r30, r18
    18f2:	e2 95       	swap	r30
    18f4:	e0 7f       	andi	r30, 0xF0	; 240
    18f6:	e8 83       	st	Y, r30
		cs = CANEN2 >> mob;			// get status of MOb
    18f8:	ec 91       	ld	r30, X
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <can_receive_message+0x34>
    1900:	f5 95       	asr	r31
    1902:	e7 95       	ror	r30
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <can_receive_message+0x30>
		if ((cs & 0x01) == 0)		// MOb not busy? -> data received!
    1908:	e0 fd       	sbrc	r30, 0
    190a:	57 c0       	rjmp	.+174    	; 0x19ba <can_receive_message+0xea>
		{
			uint8_t inf = CANCDMOB;
    190c:	20 91 ef 00 	lds	r18, 0x00EF
			*len = inf & 0x0f;		//save DLC
    1910:	32 2f       	mov	r19, r18
    1912:	3f 70       	andi	r19, 0x0F	; 15
			if(*len > 8) *len = 8;
    1914:	39 30       	cpi	r19, 0x09	; 9
    1916:	18 f4       	brcc	.+6      	; 0x191e <can_receive_message+0x4e>
		CANPAGE = (mob << 4);		// select MOb
		cs = CANEN2 >> mob;			// get status of MOb
		if ((cs & 0x01) == 0)		// MOb not busy? -> data received!
		{
			uint8_t inf = CANCDMOB;
			*len = inf & 0x0f;		//save DLC
    1918:	eb 01       	movw	r28, r22
    191a:	38 83       	st	Y, r19
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <can_receive_message+0x54>
			if(*len > 8) *len = 8;
    191e:	38 e0       	ldi	r19, 0x08	; 8
    1920:	fb 01       	movw	r30, r22
    1922:	30 83       	st	Z, r19
			if((inf & 0x10) == 0)	//standard ID?
    1924:	24 fd       	sbrc	r18, 4
    1926:	15 c0       	rjmp	.+42     	; 0x1952 <can_receive_message+0x82>
				*id = (((uint16_t)CANIDT1) << 3) + (CANIDT2 >> 5);
    1928:	20 91 f3 00 	lds	r18, 0x00F3
    192c:	00 91 f2 00 	lds	r16, 0x00F2
    1930:	02 95       	swap	r16
    1932:	06 95       	lsr	r16
    1934:	07 70       	andi	r16, 0x07	; 7
    1936:	10 e0       	ldi	r17, 0x00	; 0
    1938:	f8 e0       	ldi	r31, 0x08	; 8
    193a:	2f 9f       	mul	r18, r31
    193c:	00 0d       	add	r16, r0
    193e:	11 1d       	adc	r17, r1
    1940:	11 24       	eor	r1, r1
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	ec 01       	movw	r28, r24
    1948:	08 83       	st	Y, r16
    194a:	19 83       	std	Y+1, r17	; 0x01
    194c:	2a 83       	std	Y+2, r18	; 0x02
    194e:	3b 83       	std	Y+3, r19	; 0x03
    1950:	1a c0       	rjmp	.+52     	; 0x1986 <can_receive_message+0xb6>
			else 					//extended ID!
			{	
				u32 id_buf;
				id_buf.b[3] = CANIDT1;
    1952:	e0 91 f3 00 	lds	r30, 0x00F3
    1956:	3e 2f       	mov	r19, r30
				id_buf.b[2] = CANIDT2;
    1958:	e0 91 f2 00 	lds	r30, 0x00F2
    195c:	2e 2f       	mov	r18, r30
				id_buf.b[1] = CANIDT3;
    195e:	e0 91 f1 00 	lds	r30, 0x00F1
    1962:	1e 2f       	mov	r17, r30
				id_buf.b[0] = CANIDT4;
    1964:	e0 91 f0 00 	lds	r30, 0x00F0
    1968:	0e 2f       	mov	r16, r30
				id_buf.l >>= 3;
    196a:	68 94       	set
    196c:	12 f8       	bld	r1, 2
    196e:	36 95       	lsr	r19
    1970:	27 95       	ror	r18
    1972:	17 95       	ror	r17
    1974:	07 95       	ror	r16
    1976:	16 94       	lsr	r1
    1978:	d1 f7       	brne	.-12     	; 0x196e <can_receive_message+0x9e>
				id_buf.b[3] |= 0x80;
    197a:	30 68       	ori	r19, 0x80	; 128
				*id = id_buf.l;
    197c:	fc 01       	movw	r30, r24
    197e:	00 83       	st	Z, r16
    1980:	11 83       	std	Z+1, r17	; 0x01
    1982:	22 83       	std	Z+2, r18	; 0x02
    1984:	33 83       	std	Z+3, r19	; 0x03
			}
			for(uint8_t i = 0; i < *len; i++) 
    1986:	eb 01       	movw	r28, r22
    1988:	88 81       	ld	r24, Y
    198a:	88 23       	and	r24, r24
    198c:	69 f0       	breq	.+26     	; 0x19a8 <can_receive_message+0xd8>
    198e:	24 2f       	mov	r18, r20
    1990:	e4 2f       	mov	r30, r20
    1992:	f5 2f       	mov	r31, r21
				*(data_ptr++) = CANMSG;
    1994:	aa ef       	ldi	r26, 0xFA	; 250
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	8c 91       	ld	r24, X
    199a:	81 93       	st	Z+, r24
    199c:	9e 2f       	mov	r25, r30
    199e:	92 1b       	sub	r25, r18
				id_buf.b[0] = CANIDT4;
				id_buf.l >>= 3;
				id_buf.b[3] |= 0x80;
				*id = id_buf.l;
			}
			for(uint8_t i = 0; i < *len; i++) 
    19a0:	eb 01       	movw	r28, r22
    19a2:	88 81       	ld	r24, Y
    19a4:	98 17       	cp	r25, r24
    19a6:	c0 f3       	brcs	.-16     	; 0x1998 <can_receive_message+0xc8>
				*(data_ptr++) = CANMSG;
			CANCDMOB = 0x80;		// re-activate MOb for reception
    19a8:	80 e8       	ldi	r24, 0x80	; 128
    19aa:	80 93 ef 00 	sts	0x00EF, r24
			return_value = ((~CANEN2) & 0x0f) | 1;
    19ae:	80 91 dc 00 	lds	r24, 0x00DC
    19b2:	80 95       	com	r24
    19b4:	8e 70       	andi	r24, 0x0E	; 14
    19b6:	81 60       	ori	r24, 0x01	; 1
			break;
    19b8:	07 c0       	rjmp	.+14     	; 0x19c8 <can_receive_message+0xf8>
    19ba:	2f 5f       	subi	r18, 0xFF	; 255
    19bc:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t can_receive_message(uint32_t *id, uint8_t *len, uint64_t *can_data)
{
	uint8_t cs, return_value = 0;
	uint8_t *data_ptr = (uint8_t*) can_data;
	uint8_t mob;
	for(mob = 0; mob < 4; mob++)	// check receive buffers of the CAN
    19be:	24 30       	cpi	r18, 0x04	; 4
    19c0:	31 05       	cpc	r19, r1
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <can_receive_message+0xf6>
    19c4:	95 cf       	rjmp	.-214    	; 0x18f0 <can_receive_message+0x20>
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
uint8_t can_receive_message(uint32_t *id, uint8_t *len, uint64_t *can_data)
{
	uint8_t cs, return_value = 0;
    19c6:	80 e0       	ldi	r24, 0x00	; 0
			return_value = ((~CANEN2) & 0x0f) | 1;
			break;
		}
	}
	return(return_value); //return_value = 0: no reception, 1: one msg received, >1: more than one msg in buffers (every set bit in return_value represents a full buffer at time of function-call)
}
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	08 95       	ret

000019d2 <can_send_message>:
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
	
uint8_t can_send_message(uint32_t id, uint8_t len, uint64_t can_data)
{
    19d2:	cf 92       	push	r12
    19d4:	df 92       	push	r13
    19d6:	ef 92       	push	r14
    19d8:	ff 92       	push	r15
    19da:	0f 93       	push	r16
    19dc:	1f 93       	push	r17
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	28 97       	sbiw	r28, 0x08	; 8
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	c9 82       	std	Y+1, r12	; 0x01
    19f4:	da 82       	std	Y+2, r13	; 0x02
    19f6:	eb 82       	std	Y+3, r14	; 0x03
    19f8:	fc 82       	std	Y+4, r15	; 0x04
    19fa:	0d 83       	std	Y+5, r16	; 0x05
    19fc:	1e 83       	std	Y+6, r17	; 0x06
    19fe:	2f 83       	std	Y+7, r18	; 0x07
    1a00:	38 87       	std	Y+8, r19	; 0x08
	uint8_t *data_ptr = (uint8_t *)&can_data;
	
	if((CANEN2 & 0x10) == 0)	// MOb #4 not busy? 
    1a02:	20 91 dc 00 	lds	r18, 0x00DC
    1a06:	24 fd       	sbrc	r18, 4
    1a08:	04 c0       	rjmp	.+8      	; 0x1a12 <can_send_message+0x40>
	{
		CANPAGE = (4 << 4);	// select MOb #4, data index = 0
    1a0a:	20 e4       	ldi	r18, 0x40	; 64
    1a0c:	20 93 ed 00 	sts	0x00ED, r18
    1a10:	07 c0       	rjmp	.+14     	; 0x1a20 <can_send_message+0x4e>
	}
	else if((CANEN2 & 0x20) == 0)	// MOb #5 not busy? 
    1a12:	20 91 dc 00 	lds	r18, 0x00DC
    1a16:	25 fd       	sbrc	r18, 5
    1a18:	42 c0       	rjmp	.+132    	; 0x1a9e <can_send_message+0xcc>
	{
		CANPAGE = (5 << 4);	// select MOb #5, data index = 0
    1a1a:	20 e5       	ldi	r18, 0x50	; 80
    1a1c:	20 93 ed 00 	sts	0x00ED, r18
	}
	else return(0);
	
	for(uint8_t i = 0; i < len; i++) 
    1a20:	44 23       	and	r20, r20
    1a22:	61 f0       	breq	.+24     	; 0x1a3c <can_send_message+0x6a>
    1a24:	9e 01       	movw	r18, r28
    1a26:	2f 5f       	subi	r18, 0xFF	; 255
    1a28:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2a:	f9 01       	movw	r30, r18
		CANMSG = *(data_ptr++);
    1a2c:	aa ef       	ldi	r26, 0xFA	; 250
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	51 91       	ld	r21, Z+
    1a32:	5c 93       	st	X, r21
    1a34:	5e 2f       	mov	r21, r30
    1a36:	52 1b       	sub	r21, r18
	{
		CANPAGE = (5 << 4);	// select MOb #5, data index = 0
	}
	else return(0);
	
	for(uint8_t i = 0; i < len; i++) 
    1a38:	54 17       	cp	r21, r20
    1a3a:	d0 f3       	brcs	.-12     	; 0x1a30 <can_send_message+0x5e>
		CANMSG = *(data_ptr++);
	if((id & 0x80000000) == 0) 	// set standard ID
    1a3c:	99 23       	and	r25, r25
    1a3e:	7c f0       	brlt	.+30     	; 0x1a5e <can_send_message+0x8c>
	{
		CANIDT4 = 0;
    1a40:	10 92 f0 00 	sts	0x00F0, r1
		id = ((uint16_t) id << 5);
    1a44:	66 0f       	add	r22, r22
    1a46:	77 1f       	adc	r23, r23
    1a48:	62 95       	swap	r22
    1a4a:	72 95       	swap	r23
    1a4c:	70 7f       	andi	r23, 0xF0	; 240
    1a4e:	76 27       	eor	r23, r22
    1a50:	60 7f       	andi	r22, 0xF0	; 240
    1a52:	76 27       	eor	r23, r22
		CANIDT2 = (((uint16_t) id & 0x00ff) >>  0);
    1a54:	60 93 f2 00 	sts	0x00F2, r22
		CANIDT1 = (((uint16_t) id & 0xff00) >>  8);
    1a58:	70 93 f3 00 	sts	0x00F3, r23
    1a5c:	1b c0       	rjmp	.+54     	; 0x1a94 <can_send_message+0xc2>
	}
	else 						// set extended ID
	{	
		id = id << 3;
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	aa 1f       	adc	r26, r26
    1a68:	bb 1f       	adc	r27, r27
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	aa 1f       	adc	r26, r26
    1a70:	bb 1f       	adc	r27, r27
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	aa 1f       	adc	r26, r26
    1a78:	bb 1f       	adc	r27, r27
		CANIDT4 = ((id & 0x000000ff) >>  0);
    1a7a:	80 93 f0 00 	sts	0x00F0, r24
		CANIDT3 = ((id & 0x0000ff00) >>  8);
    1a7e:	90 93 f1 00 	sts	0x00F1, r25
		CANIDT2 = ((id & 0x00ff0000) >> 16);
    1a82:	a0 93 f2 00 	sts	0x00F2, r26
		CANIDT1 = ((id & 0xff000000) >> 24);
    1a86:	8b 2f       	mov	r24, r27
    1a88:	99 27       	eor	r25, r25
    1a8a:	aa 27       	eor	r26, r26
    1a8c:	bb 27       	eor	r27, r27
    1a8e:	80 93 f3 00 	sts	0x00F3, r24
		len += 0x10;
    1a92:	40 5f       	subi	r20, 0xF0	; 240
	
	}
	CANCDMOB = (0x40 | len);		// transmit
    1a94:	40 64       	ori	r20, 0x40	; 64
    1a96:	40 93 ef 00 	sts	0x00EF, r20
	return(1);
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	01 c0       	rjmp	.+2      	; 0x1aa0 <can_send_message+0xce>
	}
	else if((CANEN2 & 0x20) == 0)	// MOb #5 not busy? 
	{
		CANPAGE = (5 << 4);	// select MOb #5, data index = 0
	}
	else return(0);
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
		len += 0x10;
	
	}
	CANCDMOB = (0x40 | len);		// transmit
	return(1);
}
    1aa0:	28 96       	adiw	r28, 0x08	; 8
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	1f 91       	pop	r17
    1ab2:	0f 91       	pop	r16
    1ab4:	ff 90       	pop	r15
    1ab6:	ef 90       	pop	r14
    1ab8:	df 90       	pop	r13
    1aba:	cf 90       	pop	r12
    1abc:	08 95       	ret

00001abe <can_task>:


void can_task()
{
    1abe:	cf 92       	push	r12
    1ac0:	df 92       	push	r13
    1ac2:	ef 92       	push	r14
    1ac4:	ff 92       	push	r15
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	2d 97       	sbiw	r28, 0x0d	; 13
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	cd bf       	out	0x3d, r28	; 61
	static uint8_t index = 0;
	if (can_tx_flags)			//anything to send?
    1ade:	40 91 49 07 	lds	r20, 0x0749
    1ae2:	44 23       	and	r20, r20
    1ae4:	d1 f1       	breq	.+116    	; 0x1b5a <can_task+0x9c>
	{	
		if((CANEN2 & 0x30) != 0x30) // MOb #4 or #5 not busy?
    1ae6:	80 91 dc 00 	lds	r24, 0x00DC
    1aea:	80 73       	andi	r24, 0x30	; 48
    1aec:	80 33       	cpi	r24, 0x30	; 48
    1aee:	a9 f1       	breq	.+106    	; 0x1b5a <can_task+0x9c>
    1af0:	80 91 f4 06 	lds	r24, 0x06F4
				{
					index++;		//select next message
				}
				else
				{
					index = 0;		//overrun, start over with first message
    1af4:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
			while (!(can_tx_flags & (1 << index))); //message flagged for transmission? if not - check next message
    1af6:	50 e0       	ldi	r21, 0x00	; 0
	{	
		if((CANEN2 & 0x30) != 0x30) // MOb #4 or #5 not busy?
		{
			do
			{
				if(index < 7) 
    1af8:	87 30       	cpi	r24, 0x07	; 7
    1afa:	10 f4       	brcc	.+4      	; 0x1b00 <can_task+0x42>
				{
					index++;		//select next message
    1afc:	8f 5f       	subi	r24, 0xFF	; 255
    1afe:	01 c0       	rjmp	.+2      	; 0x1b02 <can_task+0x44>
				}
				else
				{
					index = 0;		//overrun, start over with first message
    1b00:	89 2f       	mov	r24, r25
				}
			}
			while (!(can_tx_flags & (1 << index))); //message flagged for transmission? if not - check next message
    1b02:	9a 01       	movw	r18, r20
    1b04:	08 2e       	mov	r0, r24
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <can_task+0x4e>
    1b08:	35 95       	asr	r19
    1b0a:	27 95       	ror	r18
    1b0c:	0a 94       	dec	r0
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <can_task+0x4a>
    1b10:	20 ff       	sbrs	r18, 0
    1b12:	f2 cf       	rjmp	.-28     	; 0x1af8 <can_task+0x3a>
    1b14:	80 93 f4 06 	sts	0x06F4, r24
			
			can_send_task(index);			//call can_send_task (prepares data and starts transmission)
    1b18:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <can_send_task>
			
			can_tx_flags &= ~(1 << index);  //reset send flag for sent message
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	00 90 f4 06 	lds	r0, 0x06F4
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <can_task+0x6c>
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	0a 94       	dec	r0
    1b2c:	e2 f7       	brpl	.-8      	; 0x1b26 <can_task+0x68>
    1b2e:	80 95       	com	r24
    1b30:	90 91 49 07 	lds	r25, 0x0749
    1b34:	89 23       	and	r24, r25
    1b36:	80 93 49 07 	sts	0x0749, r24
    1b3a:	0f c0       	rjmp	.+30     	; 0x1b5a <can_task+0x9c>
	can_msg_t can_rx;
	
	//wenn alle nachrichten in einem Aufruf verarbeitet werden sollen -> while(can_receive.....
	while(can_receive_message(&can_rx.id, &can_rx.dlc, &can_rx.data.ll) >= 1) 
	{
		can_receive_task(can_rx);
    1b3c:	c9 80       	ldd	r12, Y+1	; 0x01
    1b3e:	da 80       	ldd	r13, Y+2	; 0x02
    1b40:	eb 80       	ldd	r14, Y+3	; 0x03
    1b42:	fc 80       	ldd	r15, Y+4	; 0x04
    1b44:	0d 81       	ldd	r16, Y+5	; 0x05
    1b46:	1e 81       	ldd	r17, Y+6	; 0x06
    1b48:	2f 81       	ldd	r18, Y+7	; 0x07
    1b4a:	38 85       	ldd	r19, Y+8	; 0x08
    1b4c:	49 85       	ldd	r20, Y+9	; 0x09
    1b4e:	5a 85       	ldd	r21, Y+10	; 0x0a
    1b50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b56:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <can_receive_task>
	}
	
	can_msg_t can_rx;
	
	//wenn alle nachrichten in einem Aufruf verarbeitet werden sollen -> while(can_receive.....
	while(can_receive_message(&can_rx.id, &can_rx.dlc, &can_rx.data.ll) >= 1) 
    1b5a:	ae 01       	movw	r20, r28
    1b5c:	4a 5f       	subi	r20, 0xFA	; 250
    1b5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b60:	be 01       	movw	r22, r28
    1b62:	6b 5f       	subi	r22, 0xFB	; 251
    1b64:	7f 4f       	sbci	r23, 0xFF	; 255
    1b66:	ce 01       	movw	r24, r28
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <can_receive_message>
    1b6e:	81 11       	cpse	r24, r1
    1b70:	e5 cf       	rjmp	.-54     	; 0x1b3c <can_task+0x7e>
	{
		can_receive_task(can_rx);
	}
    1b72:	2d 96       	adiw	r28, 0x0d	; 13
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	ff 90       	pop	r15
    1b88:	ef 90       	pop	r14
    1b8a:	df 90       	pop	r13
    1b8c:	cf 90       	pop	r12
    1b8e:	08 95       	ret

00001b90 <digital_output_init>:
#include "header.h"
#include "DigIO.h"

void digital_output_init(uint8_t pin_define)
{
	switch (pin_define)									//not all PIN_... defines appear here - some of them refer to pins which are already taken care of
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	fc 01       	movw	r30, r24
    1b94:	e5 56       	subi	r30, 0x65	; 101
    1b96:	f1 09       	sbc	r31, r1
    1b98:	ef 36       	cpi	r30, 0x6F	; 111
    1b9a:	f1 05       	cpc	r31, r1
    1b9c:	88 f5       	brcc	.+98     	; 0x1c00 <digital_output_init+0x70>
    1b9e:	e2 5c       	subi	r30, 0xC2	; 194
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__tablejump2__>
	{
	
		case PIN_PWM1:	//PORTD &= ~(1<<PORTD0);		//set pin State to low
						DDRD |= (1<<PORTD0);		//configure pin as output
    1ba6:	50 9a       	sbi	0x0a, 0	; 10
						break;							
    1ba8:	08 95       	ret
						
		case PIN_PWM2:	//PORTC &= ~(1<<PORTC0);		//set pin State to low
						DDRC |= (1<<PORTC0);		//configure pin as output
    1baa:	38 9a       	sbi	0x07, 0	; 7
						break;
    1bac:	08 95       	ret
						
		case PIN_PWM3:	//PORTD &= ~(1<<PORTD2);		//set pin State to low
						DDRD |= (1<<PORTD2);		//configure pin as output
    1bae:	52 9a       	sbi	0x0a, 2	; 10
						break;
    1bb0:	08 95       	ret
						
		case PIN_PWM4:	//PORTC &= ~(1<<PORTC1);		//set pin State to low
						DDRC |= (1<<PORTC1);		//configure pin as output
    1bb2:	39 9a       	sbi	0x07, 1	; 7
						break;
    1bb4:	08 95       	ret
						
		case PIN_PWM5:	//PORTB &= ~(1<<PORTB6);		//set pin State to low
						DDRB |= (1<<PORTB6);		//configure pin as output
    1bb6:	26 9a       	sbi	0x04, 6	; 4
						break;
    1bb8:	08 95       	ret
						
		case PIN_PWM6:	//PORTD &= ~(1<<PORTD3);		//set pin State to low
						DDRD |= (1<<PORTD3);		//configure pin as output
    1bba:	53 9a       	sbi	0x0a, 3	; 10
						break;
    1bbc:	08 95       	ret
						
		case PIN_PWM7:	//PORTB &= ~(1<<PORTB0);		//set pin State to low
						DDRB |= (1<<PORTB0);		//configure pin as output
    1bbe:	20 9a       	sbi	0x04, 0	; 4
						break;
    1bc0:	08 95       	ret
						
		case PIN_PWM8:	//PORTB &= ~(1<<PORTB1);		//set pin State to low
						DDRB |= (1<<PORTB1);		//configure pin as output
    1bc2:	21 9a       	sbi	0x04, 1	; 4
						break;
    1bc4:	08 95       	ret
						
		case PIN_PWM9:	//PORTB &= ~(1<<PORTB7);		//set pin State to low
						DDRB |= (1<<PORTB7);		//configure pin as output
    1bc6:	27 9a       	sbi	0x04, 7	; 4
						break;
    1bc8:	08 95       	ret

		case PIN_AN10:	//PORTD &= ~(1<<PORTD4);		//set pin State to low
						DDRD |= (1<<PORTD4);		//configure pin as output
    1bca:	54 9a       	sbi	0x0a, 4	; 10
						break;
    1bcc:	08 95       	ret
						
		case PIN_AN1:	//PORTE &= ~(1<<PORTE2);		//set pin State to low
						DDRE |= (1<<PORTE2);		//configure pin as output
    1bce:	6a 9a       	sbi	0x0d, 2	; 13
						break;
    1bd0:	08 95       	ret
						
		case PIN_AN2:	//PORTD &= ~(1<<PORTD5);		//set pin State to low
						DDRD |= (1<<PORTD5);		//configure pin as output
    1bd2:	55 9a       	sbi	0x0a, 5	; 10
						break;
    1bd4:	08 95       	ret
						
		case PIN_AN3:	//PORTD &= ~(1<<PORTD6);		//set pin State to low
						DDRD |= (1<<PORTD6);		//configure pin as output
    1bd6:	56 9a       	sbi	0x0a, 6	; 10
						break;
    1bd8:	08 95       	ret
						
		case PIN_AN4:	//PORTB &= ~(1<<PORTB2);		//set pin State to low
						DDRB |= (1<<PORTB2);		//configure pin as output
    1bda:	22 9a       	sbi	0x04, 2	; 4
						break;
    1bdc:	08 95       	ret
						
		case PIN_AN5:	//PORTC &= ~(1<<PORTC4);		//set pin State to low
						DDRC |= (1<<PORTC4);		//configure pin as output
    1bde:	3c 9a       	sbi	0x07, 4	; 7
						break;
    1be0:	08 95       	ret
						
		case PIN_AN6:	//PORTC &= ~(1<<PORTC5);		//set pin State to low
						DDRC |= (1<<PORTC5);		//configure pin as output
    1be2:	3d 9a       	sbi	0x07, 5	; 7
						break;
    1be4:	08 95       	ret
						
		case PIN_AN7:	//PORTC &= ~(1<<PORTC6);		//set pin State to low
						DDRC |= (1<<PORTC6);		//configure pin as output
    1be6:	3e 9a       	sbi	0x07, 6	; 7
						break;
    1be8:	08 95       	ret
						
//#ifndef LM50_TEMP			//<-- wie geht das? muss noch gemacht werden!
		case PIN_AN8:	//PORTB &= ~(1<<PORTB5);		//set pin State to low
						DDRB |= (1<<PORTB5);		//configure pin as output
    1bea:	25 9a       	sbi	0x04, 5	; 4
						break;
    1bec:	08 95       	ret
//#endif
						
						

		case PIN_DAC:	//PORTC &= ~(1<<PORTC7);		//set pin State to low
						DDRC |= (1<<PORTC7);		//configure pin as output
    1bee:	3f 9a       	sbi	0x07, 7	; 7
						break;
    1bf0:	08 95       	ret

		case PIN_GPIO1:	//PORTB &= ~(1<<PORTB4);		//set pin State to low
						DDRB |= (1<<PORTB4);		//configure pin as output
    1bf2:	24 9a       	sbi	0x04, 4	; 4
						break;
    1bf4:	08 95       	ret
							
		case PIN_GPIO2:	//PORTB &= ~(1<<PORTB3);		//set pin State to low
						DDRB |= (1<<PORTB3);		//configure pin as output
    1bf6:	23 9a       	sbi	0x04, 3	; 4
						break;
    1bf8:	08 95       	ret
							
		case PIN_GPIO3:	//PORTD &= ~(1<<PORTD1);		//set pin State to low
						DDRD |= (1<<PORTD1);		//configure pin as output
    1bfa:	51 9a       	sbi	0x0a, 1	; 10
						break;
    1bfc:	08 95       	ret
							
		case PIN_GPIO4:	//PORTD &= ~(1<<PORTD7);		//set pin State to low
						DDRD |= (1<<PORTD7);		//configure pin as output
    1bfe:	57 9a       	sbi	0x0a, 7	; 10
    1c00:	08 95       	ret

00001c02 <LM95071_init>:
uint16_t LM95071_temp_read_scheduled = 0, LM95071_spi_transmission_active = 0;
uint16_t LM95071_temp = 0;

void LM95071_init()
{
	digital_output_init(SPI_CS_LM95071_PIN);	//set LM95071 chip select line to output
    1c02:	83 e7       	ldi	r24, 0x73	; 115
    1c04:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <digital_output_init>
	SPI_CS_LM95071_HIGH;						//set LM95071 chip select high
    1c08:	5f 9a       	sbi	0x0b, 7	; 11
    1c0a:	08 95       	ret

00001c0c <LM95071_task>:
		LM95071_temp_read_scheduled = 1;
}

void LM95071_task()
{
	if (LM95071_temp_read_scheduled)
    1c0c:	80 91 f9 06 	lds	r24, 0x06F9
    1c10:	90 91 fa 06 	lds	r25, 0x06FA
    1c14:	89 2b       	or	r24, r25
    1c16:	c9 f1       	breq	.+114    	; 0x1c8a <LM95071_task+0x7e>
	{
		if (LM95071_spi_transmission_active)
    1c18:	80 91 f7 06 	lds	r24, 0x06F7
    1c1c:	90 91 f8 06 	lds	r25, 0x06F8
    1c20:	89 2b       	or	r24, r25
    1c22:	e1 f0       	breq	.+56     	; 0x1c5c <LM95071_task+0x50>
		{
			if (spi.flag)
    1c24:	80 91 6d 07 	lds	r24, 0x076D
    1c28:	88 23       	and	r24, r24
    1c2a:	79 f1       	breq	.+94     	; 0x1c8a <LM95071_task+0x7e>
			{
				SPI_CS_LM95071_HIGH;
    1c2c:	5f 9a       	sbi	0x0b, 7	; 11
				spi.locked = 0;
    1c2e:	10 92 6c 07 	sts	0x076C, r1
				LM95071_temp = (spi.rx_buffer.s[0] >> 2);
    1c32:	80 91 5a 07 	lds	r24, 0x075A
    1c36:	90 91 5b 07 	lds	r25, 0x075B
    1c3a:	96 95       	lsr	r25
    1c3c:	87 95       	ror	r24
    1c3e:	96 95       	lsr	r25
    1c40:	87 95       	ror	r24
    1c42:	90 93 f6 06 	sts	0x06F6, r25
    1c46:	80 93 f5 06 	sts	0x06F5, r24
				LM95071_spi_transmission_active = 0;
    1c4a:	10 92 f8 06 	sts	0x06F8, r1
    1c4e:	10 92 f7 06 	sts	0x06F7, r1
				LM95071_temp_read_scheduled = 0;		
    1c52:	10 92 fa 06 	sts	0x06FA, r1
    1c56:	10 92 f9 06 	sts	0x06F9, r1
    1c5a:	08 95       	ret
			}
		}
		else
		{
			if(!spi.locked)
    1c5c:	80 91 6c 07 	lds	r24, 0x076C
    1c60:	81 11       	cpse	r24, r1
    1c62:	13 c0       	rjmp	.+38     	; 0x1c8a <LM95071_task+0x7e>
			{
				SPCR &= ~((1<<CPOL)|(1<<CPHA)); //setup SPI in Mode 0
    1c64:	8c b5       	in	r24, 0x2c	; 44
    1c66:	83 7f       	andi	r24, 0xF3	; 243
    1c68:	8c bd       	out	0x2c, r24	; 44
				spi.tx_buffer.s[0] = 0;		//send 0x0000 ->continous_conversion mode
    1c6a:	10 92 4b 07 	sts	0x074B, r1
    1c6e:	10 92 4a 07 	sts	0x074A, r1
				spi.bytes = 2;			//16 Bit, read conversion only mode
    1c72:	82 e0       	ldi	r24, 0x02	; 2
    1c74:	80 93 6a 07 	sts	0x076A, r24
				SPI_CS_LM95071_LOW;			//Activate LM95071 chip select
    1c78:	5f 98       	cbi	0x0b, 7	; 11
				spi_start_transmission();
    1c7a:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <spi_start_transmission>
				LM95071_spi_transmission_active = 1;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	90 93 f8 06 	sts	0x06F8, r25
    1c86:	80 93 f7 06 	sts	0x06F7, r24
    1c8a:	08 95       	ret

00001c8c <spi_init_master>:
volatile spi_t spi;		//Variablendeklaration für Zugriff auf SPI-Datenstruktur

void spi_init_master(uint8_t prescaler)
{
	/* Set MOSI and SCK as output, MISO will be set to input automatically when SPI-Interface is finally enabled */
	DDRB |= (1<<PORTB1)|(1<<PORTB7);
    1c8c:	94 b1       	in	r25, 0x04	; 4
    1c8e:	92 68       	ori	r25, 0x82	; 130
    1c90:	94 b9       	out	0x04, r25	; 4
	/* Set _SS as output to protect SPI-Module from being switched to slave mode accidentally */
	DDRD  |=  (1<<PORTD3);
    1c92:	53 9a       	sbi	0x0a, 3	; 10
	/* Enable SPI, Master, set clock rate */
	switch (prescaler)
    1c94:	80 31       	cpi	r24, 0x10	; 16
    1c96:	09 f1       	breq	.+66     	; 0x1cda <spi_init_master+0x4e>
    1c98:	38 f4       	brcc	.+14     	; 0x1ca8 <spi_init_master+0x1c>
    1c9a:	84 30       	cpi	r24, 0x04	; 4
    1c9c:	91 f0       	breq	.+36     	; 0x1cc2 <spi_init_master+0x36>
    1c9e:	88 30       	cpi	r24, 0x08	; 8
    1ca0:	b1 f0       	breq	.+44     	; 0x1cce <spi_init_master+0x42>
    1ca2:	82 30       	cpi	r24, 0x02	; 2
    1ca4:	89 f5       	brne	.+98     	; 0x1d08 <spi_init_master+0x7c>
    1ca6:	07 c0       	rjmp	.+14     	; 0x1cb6 <spi_init_master+0x2a>
    1ca8:	80 34       	cpi	r24, 0x40	; 64
    1caa:	19 f1       	breq	.+70     	; 0x1cf2 <spi_init_master+0x66>
    1cac:	80 38       	cpi	r24, 0x80	; 128
    1cae:	39 f1       	breq	.+78     	; 0x1cfe <spi_init_master+0x72>
    1cb0:	80 32       	cpi	r24, 0x20	; 32
    1cb2:	51 f5       	brne	.+84     	; 0x1d08 <spi_init_master+0x7c>
    1cb4:	18 c0       	rjmp	.+48     	; 0x1ce6 <spi_init_master+0x5a>
	{
	case 2:		SPSR |= (1<<SPI2X);
    1cb6:	8d b5       	in	r24, 0x2d	; 45
    1cb8:	81 60       	ori	r24, 0x01	; 1
    1cba:	8d bd       	out	0x2d, r24	; 45
				SPCR = (1<<SPE)|(1<<MSTR);
    1cbc:	80 e5       	ldi	r24, 0x50	; 80
    1cbe:	8c bd       	out	0x2c, r24	; 44
				break;
    1cc0:	23 c0       	rjmp	.+70     	; 0x1d08 <spi_init_master+0x7c>

	case 4:		SPSR &= ~(1<<SPI2X);
    1cc2:	8d b5       	in	r24, 0x2d	; 45
    1cc4:	8e 7f       	andi	r24, 0xFE	; 254
    1cc6:	8d bd       	out	0x2d, r24	; 45
				SPCR = (1<<SPE)|(1<<MSTR);
    1cc8:	80 e5       	ldi	r24, 0x50	; 80
    1cca:	8c bd       	out	0x2c, r24	; 44
				break;
    1ccc:	1d c0       	rjmp	.+58     	; 0x1d08 <spi_init_master+0x7c>

	case 8:		SPSR |= (1<<SPI2X);
    1cce:	8d b5       	in	r24, 0x2d	; 45
    1cd0:	81 60       	ori	r24, 0x01	; 1
    1cd2:	8d bd       	out	0x2d, r24	; 45
				SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1cd4:	81 e5       	ldi	r24, 0x51	; 81
    1cd6:	8c bd       	out	0x2c, r24	; 44
				break;
    1cd8:	17 c0       	rjmp	.+46     	; 0x1d08 <spi_init_master+0x7c>

	case 16:	SPSR &= ~(1<<SPI2X);
    1cda:	8d b5       	in	r24, 0x2d	; 45
    1cdc:	8e 7f       	andi	r24, 0xFE	; 254
    1cde:	8d bd       	out	0x2d, r24	; 45
				SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1ce0:	81 e5       	ldi	r24, 0x51	; 81
    1ce2:	8c bd       	out	0x2c, r24	; 44
				break;
    1ce4:	11 c0       	rjmp	.+34     	; 0x1d08 <spi_init_master+0x7c>

	case 32:	SPSR |= (1<<SPI2X);
    1ce6:	8d b5       	in	r24, 0x2d	; 45
    1ce8:	81 60       	ori	r24, 0x01	; 1
    1cea:	8d bd       	out	0x2d, r24	; 45
				SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);
    1cec:	82 e5       	ldi	r24, 0x52	; 82
    1cee:	8c bd       	out	0x2c, r24	; 44
				break;
    1cf0:	0b c0       	rjmp	.+22     	; 0x1d08 <spi_init_master+0x7c>

	case 64:	SPSR &= ~(1<<SPI2X);
    1cf2:	8d b5       	in	r24, 0x2d	; 45
    1cf4:	8e 7f       	andi	r24, 0xFE	; 254
    1cf6:	8d bd       	out	0x2d, r24	; 45
				SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);
    1cf8:	82 e5       	ldi	r24, 0x52	; 82
    1cfa:	8c bd       	out	0x2c, r24	; 44
				break;
    1cfc:	05 c0       	rjmp	.+10     	; 0x1d08 <spi_init_master+0x7c>

	case 128:	SPSR &= ~(1<<SPI2X);
    1cfe:	8d b5       	in	r24, 0x2d	; 45
    1d00:	8e 7f       	andi	r24, 0xFE	; 254
    1d02:	8d bd       	out	0x2d, r24	; 45
				SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);
    1d04:	83 e5       	ldi	r24, 0x53	; 83
    1d06:	8c bd       	out	0x2c, r24	; 44
				break;
	}
	#ifdef SPI_INTERRUPT
		SPCR |= (1<<SPIE);								//enable SPI Interrupt
    1d08:	8c b5       	in	r24, 0x2c	; 44
    1d0a:	80 68       	ori	r24, 0x80	; 128
    1d0c:	8c bd       	out	0x2c, r24	; 44
		sei();											//enable Interrupts globally
    1d0e:	78 94       	sei
    1d10:	08 95       	ret

00001d12 <spi_start_transmission>:



uint8_t spi_start_transmission()
{
	if (spi.locked)
    1d12:	80 91 6c 07 	lds	r24, 0x076C
    1d16:	81 11       	cpse	r24, r1
    1d18:	13 c0       	rjmp	.+38     	; 0x1d40 <spi_start_transmission+0x2e>
		return 0;
	}
	else
	{
		
		spi.flag = 0;
    1d1a:	10 92 6d 07 	sts	0x076D, r1
		spi.locked = 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	80 93 6c 07 	sts	0x076C, r24
		spi.current_byte = 1;
    1d24:	80 93 6b 07 	sts	0x076B, r24
        if (spi.bytes > 16) spi.bytes = 16;                   //avoid memory leaks
    1d28:	80 91 6a 07 	lds	r24, 0x076A
    1d2c:	81 31       	cpi	r24, 0x11	; 17
    1d2e:	18 f0       	brcs	.+6      	; 0x1d36 <spi_start_transmission+0x24>
    1d30:	80 e1       	ldi	r24, 0x10	; 16
    1d32:	80 93 6a 07 	sts	0x076A, r24
		//uint8_t dummy_read;
		//SPCR |= (1<<SPIE);								//enable SPI Interrupt
		//dummy_read = SPSR;
		//dummy_read = SPDR;
		SPDR = spi.tx_buffer.b[0];  //start SPI transfer with MSB of tx-buffer data
    1d36:	80 91 4a 07 	lds	r24, 0x074A
    1d3a:	8e bd       	out	0x2e, r24	; 46
		return 1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	08 95       	ret

uint8_t spi_start_transmission()
{
	if (spi.locked)
	{
		return 0;
    1d40:	80 e0       	ldi	r24, 0x00	; 0
		//dummy_read = SPSR;
		//dummy_read = SPDR;
		SPDR = spi.tx_buffer.b[0];  //start SPI transfer with MSB of tx-buffer data
		return 1;
	}	
}
    1d42:	08 95       	ret

00001d44 <spi_task>:


uint8_t spi_task()							
{
	//DIGOUT_SET_GPIO1_HIGH;								//debug
	if(SPSR & (1<<SPIF))
    1d44:	0d b4       	in	r0, 0x2d	; 45
    1d46:	07 fe       	sbrs	r0, 7
    1d48:	1d c0       	rjmp	.+58     	; 0x1d84 <spi_task+0x40>
	{
		spi.rx_buffer.b[(spi.current_byte-1)] = SPDR;		//save last transmission's received data 
    1d4a:	eb e6       	ldi	r30, 0x6B	; 107
    1d4c:	f7 e0       	ldi	r31, 0x07	; 7
    1d4e:	a0 81       	ld	r26, Z
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	8e b5       	in	r24, 0x2e	; 46
    1d54:	a7 5b       	subi	r26, 0xB7	; 183
    1d56:	b8 4f       	sbci	r27, 0xF8	; 248
    1d58:	50 96       	adiw	r26, 0x10	; 16
    1d5a:	8c 93       	st	X, r24
		if (spi.current_byte < spi.bytes)								//not all bytes transmitted yet? -> start new transmission
    1d5c:	90 81       	ld	r25, Z
    1d5e:	80 91 6a 07 	lds	r24, 0x076A
    1d62:	98 17       	cp	r25, r24
    1d64:	58 f4       	brcc	.+22     	; 0x1d7c <spi_task+0x38>
		{
			spi.current_byte++;												//next byte
    1d66:	80 81       	ld	r24, Z
    1d68:	8f 5f       	subi	r24, 0xFF	; 255
    1d6a:	80 83       	st	Z, r24
			SPDR = spi.tx_buffer.b[(spi.current_byte-1)];	//start transfer
    1d6c:	e0 81       	ld	r30, Z
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	e7 5b       	subi	r30, 0xB7	; 183
    1d72:	f8 4f       	sbci	r31, 0xF8	; 248
    1d74:	80 81       	ld	r24, Z
    1d76:	8e bd       	out	0x2e, r24	; 46
			//DIGOUT_SET_GPIO1_LOW;							//debug
			return 0;
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	08 95       	ret
		}
		else
		{
			spi.flag = 1;											//transmission complete
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	80 93 6d 07 	sts	0x076D, r24
			//DIGOUT_SET_GPIO1_LOW;							//debug
			return 1;
    1d82:	08 95       	ret
		}
	}
	else
	{
			//DIGOUT_SET_GPIO1_LOW;							//debug
			return 0;
    1d84:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1d86:	08 95       	ret

00001d88 <__vector_26>:

#ifdef SPI_INTERRUPT
ISR(SPI_STC_vect)
{
    1d88:	1f 92       	push	r1
    1d8a:	0f 92       	push	r0
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	0f 92       	push	r0
    1d90:	11 24       	eor	r1, r1
    1d92:	8f 93       	push	r24
    1d94:	9f 93       	push	r25
    1d96:	af 93       	push	r26
    1d98:	bf 93       	push	r27
    1d9a:	ef 93       	push	r30
    1d9c:	ff 93       	push	r31
	//DIGOUT_SET_GPIO2_HIGH;								//debug
	spi.rx_buffer.b[(spi.current_byte-1)] = SPDR;		//save last transmission's received data
    1d9e:	eb e6       	ldi	r30, 0x6B	; 107
    1da0:	f7 e0       	ldi	r31, 0x07	; 7
    1da2:	a0 81       	ld	r26, Z
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	8e b5       	in	r24, 0x2e	; 46
    1da8:	a7 5b       	subi	r26, 0xB7	; 183
    1daa:	b8 4f       	sbci	r27, 0xF8	; 248
    1dac:	50 96       	adiw	r26, 0x10	; 16
    1dae:	8c 93       	st	X, r24
	if (spi.current_byte < spi.bytes)							//not all bytes transmitted yet? -> start new transmission
    1db0:	90 81       	ld	r25, Z
    1db2:	80 91 6a 07 	lds	r24, 0x076A
    1db6:	98 17       	cp	r25, r24
    1db8:	50 f4       	brcc	.+20     	; 0x1dce <__vector_26+0x46>
	{
		spi.current_byte++;										//next byte
    1dba:	80 81       	ld	r24, Z
    1dbc:	8f 5f       	subi	r24, 0xFF	; 255
    1dbe:	80 83       	st	Z, r24
		SPDR = spi.tx_buffer.b[(spi.current_byte-1)];	//start transfer
    1dc0:	e0 81       	ld	r30, Z
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	e7 5b       	subi	r30, 0xB7	; 183
    1dc6:	f8 4f       	sbci	r31, 0xF8	; 248
    1dc8:	80 81       	ld	r24, Z
    1dca:	8e bd       	out	0x2e, r24	; 46
    1dcc:	03 c0       	rjmp	.+6      	; 0x1dd4 <__vector_26+0x4c>
	}
	else
	{
		spi.flag = 1;											//transmission complete
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	80 93 6d 07 	sts	0x076D, r24
	}
	
	//DIGOUT_SET_GPIO2_LOW;									//debug
}
    1dd4:	ff 91       	pop	r31
    1dd6:	ef 91       	pop	r30
    1dd8:	bf 91       	pop	r27
    1dda:	af 91       	pop	r26
    1ddc:	9f 91       	pop	r25
    1dde:	8f 91       	pop	r24
    1de0:	0f 90       	pop	r0
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	0f 90       	pop	r0
    1de6:	1f 90       	pop	r1
    1de8:	18 95       	reti

00001dea <timer_init>:
volatile uint32_t millisec_count = 0;
volatile uint8_t flag_1ms = 0;

void timer_init(void)
{
	TCCR1A |= (1<<WGM11);
    1dea:	e0 e8       	ldi	r30, 0x80	; 128
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	82 60       	ori	r24, 0x02	; 2
    1df2:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13)|(1<<WGM12)|(1<<CS11);		//CS11 -> Prescaler = 8; Timer-Clk = ClkIO / 8 -> Timer-Clk = 16MHz / 8 = 2MHz
    1df4:	e1 e8       	ldi	r30, 0x81	; 129
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	8a 61       	ori	r24, 0x1A	; 26
    1dfc:	80 83       	st	Z, r24
	ICR1 = 2000;
    1dfe:	80 ed       	ldi	r24, 0xD0	; 208
    1e00:	97 e0       	ldi	r25, 0x07	; 7
    1e02:	90 93 87 00 	sts	0x0087, r25
    1e06:	80 93 86 00 	sts	0x0086, r24
	TIMSK1 |= (1<<TOIE1);
    1e0a:	ef e6       	ldi	r30, 0x6F	; 111
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	81 60       	ori	r24, 0x01	; 1
    1e12:	80 83       	st	Z, r24
	sei();
    1e14:	78 94       	sei
    1e16:	08 95       	ret

00001e18 <__vector_14>:
	
}


ISR(TIMER1_OVF_vect)
{
    1e18:	1f 92       	push	r1
    1e1a:	0f 92       	push	r0
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	0f 92       	push	r0
    1e20:	11 24       	eor	r1, r1
    1e22:	8f 93       	push	r24
    1e24:	9f 93       	push	r25
    1e26:	af 93       	push	r26
    1e28:	bf 93       	push	r27
	millisec_count++;
    1e2a:	80 91 fc 06 	lds	r24, 0x06FC
    1e2e:	90 91 fd 06 	lds	r25, 0x06FD
    1e32:	a0 91 fe 06 	lds	r26, 0x06FE
    1e36:	b0 91 ff 06 	lds	r27, 0x06FF
    1e3a:	01 96       	adiw	r24, 0x01	; 1
    1e3c:	a1 1d       	adc	r26, r1
    1e3e:	b1 1d       	adc	r27, r1
    1e40:	80 93 fc 06 	sts	0x06FC, r24
    1e44:	90 93 fd 06 	sts	0x06FD, r25
    1e48:	a0 93 fe 06 	sts	0x06FE, r26
    1e4c:	b0 93 ff 06 	sts	0x06FF, r27
	flag_1ms = 1;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	80 93 fb 06 	sts	0x06FB, r24
}
    1e56:	bf 91       	pop	r27
    1e58:	af 91       	pop	r26
    1e5a:	9f 91       	pop	r25
    1e5c:	8f 91       	pop	r24
    1e5e:	0f 90       	pop	r0
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	0f 90       	pop	r0
    1e64:	1f 90       	pop	r1
    1e66:	18 95       	reti

00001e68 <timer_task>:



void timer_task()
{
	if (flag_1ms == 1)		//triggered every ms - 1 kHz task
    1e68:	80 91 fb 06 	lds	r24, 0x06FB
    1e6c:	81 30       	cpi	r24, 0x01	; 1
    1e6e:	09 f0       	breq	.+2      	; 0x1e72 <timer_task+0xa>
    1e70:	4d c0       	rjmp	.+154    	; 0x1f0c <timer_task+0xa4>
	{
		static uint16_t ms_count = 1;
		
		flag_1ms = 0;
    1e72:	10 92 fb 06 	sts	0x06FB, r1
		
		timer_1ms_task();	//1 kHz user task
    1e76:	0e 94 73 11 	call	0x22e6	; 0x22e6 <timer_1ms_task>
		
		if (ms_count < 1000)
    1e7a:	80 91 03 01 	lds	r24, 0x0103
    1e7e:	90 91 04 01 	lds	r25, 0x0104
    1e82:	88 3e       	cpi	r24, 0xE8	; 232
    1e84:	23 e0       	ldi	r18, 0x03	; 3
    1e86:	92 07       	cpc	r25, r18
    1e88:	30 f4       	brcc	.+12     	; 0x1e96 <timer_task+0x2e>
		{
			ms_count++;
    1e8a:	01 96       	adiw	r24, 0x01	; 1
    1e8c:	90 93 04 01 	sts	0x0104, r25
    1e90:	80 93 03 01 	sts	0x0103, r24
    1e94:	08 c0       	rjmp	.+16     	; 0x1ea6 <timer_task+0x3e>
		}
		else
		{
			//divide by 1000 - 1Hz task - offset by 1ms to all other tasks
			timer_1s_task();	//1 Hz
    1e96:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <timer_1s_task>
			ms_count = 1;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	90 93 04 01 	sts	0x0104, r25
    1ea2:	80 93 03 01 	sts	0x0103, r24
		}
        static uint8_t count1 = 1;
		if (count1 < 5)		//divide by 5 - 200Hz task
    1ea6:	80 91 02 01 	lds	r24, 0x0102
    1eaa:	85 30       	cpi	r24, 0x05	; 5
    1eac:	20 f4       	brcc	.+8      	; 0x1eb6 <timer_task+0x4e>
		{
            count1++;
    1eae:	8f 5f       	subi	r24, 0xFF	; 255
    1eb0:	80 93 02 01 	sts	0x0102, r24
    1eb4:	08 95       	ret
        }
        else
        {
            count1 = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	80 93 02 01 	sts	0x0102, r24
            
			timer_5ms_task();	//200 Hz user task
    1ebc:	0e 94 74 11 	call	0x22e8	; 0x22e8 <timer_5ms_task>
		
			if (!(ms_count & 0x01))	//divide by 2 - 100 Hz task
    1ec0:	80 91 03 01 	lds	r24, 0x0103
    1ec4:	80 fd       	sbrc	r24, 0
    1ec6:	22 c0       	rjmp	.+68     	; 0x1f0c <timer_task+0xa4>
			{
				timer_10ms_task();	//100 Hz user task
    1ec8:	0e 94 75 11 	call	0x22ea	; 0x22ea <timer_10ms_task>

				static uint8_t count2 = 1;
                if (count2 < 5)		//divide by 5 - 20Hz task
    1ecc:	80 91 01 01 	lds	r24, 0x0101
    1ed0:	85 30       	cpi	r24, 0x05	; 5
    1ed2:	20 f4       	brcc	.+8      	; 0x1edc <timer_task+0x74>
                {
                    count2++;
    1ed4:	8f 5f       	subi	r24, 0xFF	; 255
    1ed6:	80 93 01 01 	sts	0x0101, r24
    1eda:	08 95       	ret
                }
                else
                {
                    count2 = 1;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	80 93 01 01 	sts	0x0101, r24
                
                    timer_50ms_task();	//20 Hz user task
    1ee2:	0e 94 76 11 	call	0x22ec	; 0x22ec <timer_50ms_task>

					if (!(ms_count & 0x02))	//divide by 2 - 10Hz task
    1ee6:	80 91 03 01 	lds	r24, 0x0103
    1eea:	81 fd       	sbrc	r24, 1
    1eec:	0f c0       	rjmp	.+30     	; 0x1f0c <timer_task+0xa4>
					{
						timer_100ms_task();	//10 Hz user task
    1eee:	0e 94 1e 13 	call	0x263c	; 0x263c <timer_100ms_task>

                        static uint8_t count3 = 1;
                        if (count3 < 5)     //divide by 5 - 2Hz task
    1ef2:	80 91 00 01 	lds	r24, 0x0100
    1ef6:	85 30       	cpi	r24, 0x05	; 5
    1ef8:	20 f4       	brcc	.+8      	; 0x1f02 <timer_task+0x9a>
                        {
                            count3++;
    1efa:	8f 5f       	subi	r24, 0xFF	; 255
    1efc:	80 93 00 01 	sts	0x0100, r24
    1f00:	08 95       	ret
                        }
                        else
                        {
                            count3 = 1;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	80 93 00 01 	sts	0x0100, r24
						
							timer_500ms_task();	//2 Hz user task
    1f08:	0e 94 1f 13 	call	0x263e	; 0x263e <timer_500ms_task>
    1f0c:	08 95       	ret

00001f0e <main>:
char uart_out[10];
//***************************************************************************************************************************************************************************************

int main(void)
{
	timer_init();
    1f0e:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <timer_init>
	main_init_task();
    1f12:	0e 94 44 10 	call	0x2088	; 0x2088 <main_init_task>
	spi_task();
    1f16:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <spi_task>
	adc_task();
    1f1a:	0e 94 06 01 	call	0x20c	; 0x20c <adc_task>
	can_task();	
    1f1e:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <can_task>

	while(!(freigabe_task()))
    1f22:	06 c0       	rjmp	.+12     	; 0x1f30 <main+0x22>
	{
		can_task();
    1f24:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <can_task>
		spi_task();
    1f28:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <spi_task>
		adc_task();
    1f2c:	0e 94 06 01 	call	0x20c	; 0x20c <adc_task>
	main_init_task();
	spi_task();
	adc_task();
	can_task();	

	while(!(freigabe_task()))
    1f30:	0e 94 7f 10 	call	0x20fe	; 0x20fe <freigabe_task>
    1f34:	88 23       	and	r24, r24
    1f36:	b1 f3       	breq	.-20     	; 0x1f24 <main+0x16>
	while(1)
	{		
		#ifndef SPI_INTERRUPT
		spi_task();
		#endif
		LM95071_task();
    1f38:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <LM95071_task>
		spi_task();
    1f3c:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <spi_task>
		adc_task();
    1f40:	0e 94 06 01 	call	0x20c	; 0x20c <adc_task>
		can_task();
    1f44:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <can_task>
		timer_task();
    1f48:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <timer_task>
		main_loop_task();
    1f4c:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <main_loop_task>
    1f50:	f3 cf       	rjmp	.-26     	; 0x1f38 <main+0x2a>

00001f52 <usart_init>:
#include "header.h"

//basic polling usart

void usart_init(uint32_t baudrate)
{
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	9b 01       	movw	r18, r22
    1f58:	ac 01       	movw	r20, r24
	LINCR |= (1<<LSWRES);
    1f5a:	c8 ec       	ldi	r28, 0xC8	; 200
    1f5c:	d0 e0       	ldi	r29, 0x00	; 0
    1f5e:	88 81       	ld	r24, Y
    1f60:	80 68       	ori	r24, 0x80	; 128
    1f62:	88 83       	st	Y, r24
	LINBRR = (((F_CPU/baudrate)/32)-1);
    1f64:	60 e2       	ldi	r22, 0x20	; 32
    1f66:	71 ea       	ldi	r23, 0xA1	; 161
    1f68:	87 e0       	ldi	r24, 0x07	; 7
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__udivmodsi4>
    1f70:	21 50       	subi	r18, 0x01	; 1
    1f72:	31 09       	sbc	r19, r1
    1f74:	30 93 ce 00 	sts	0x00CE, r19
    1f78:	20 93 cd 00 	sts	0x00CD, r18
	LINCR |= (1<<LENA)|(1<<LCMD2)|(1<<LCMD1)|(1<<LCMD0);
    1f7c:	88 81       	ld	r24, Y
    1f7e:	8f 60       	ori	r24, 0x0F	; 15
    1f80:	88 83       	st	Y, r24
	DDRD  |=  (1<<PORTD3);      // output UART_TX Pin 2
    1f82:	53 9a       	sbi	0x0a, 3	; 10
	DDRD  &= ~(1<<PORTD4);       // input UART_RX Pin 12
    1f84:	54 98       	cbi	0x0a, 4	; 10
}
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	08 95       	ret

00001f8c <usart_transmit_char>:


uint8_t usart_transmit_char(uint8_t byte)
{
	if (!(LINSIR & (1 << LBUSY)))				//check: UART not busy?
    1f8c:	90 91 c9 00 	lds	r25, 0x00C9
    1f90:	94 fd       	sbrc	r25, 4
    1f92:	04 c0       	rjmp	.+8      	; 0x1f9c <usart_transmit_char+0x10>
	{
		LINDAT = byte;
    1f94:	80 93 d2 00 	sts	0x00D2, r24
		return 1;	
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	08 95       	ret
	}
	else
	{
		return 0;
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1f9e:	08 95       	ret

00001fa0 <usart_transmit_string>:

void usart_transmit_string(char *string) //waits for transmission, slow! faster version -> use usart_interrupt
{
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	ec 01       	movw	r28, r24
	while (*string)
    1fa6:	88 81       	ld	r24, Y
    1fa8:	88 23       	and	r24, r24
    1faa:	49 f0       	breq	.+18     	; 0x1fbe <usart_transmit_string+0x1e>
	{
		while (!(usart_transmit_char(*string)));
    1fac:	88 81       	ld	r24, Y
    1fae:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    1fb2:	88 23       	and	r24, r24
    1fb4:	d9 f3       	breq	.-10     	; 0x1fac <usart_transmit_string+0xc>
		string++;
    1fb6:	21 96       	adiw	r28, 0x01	; 1
	}
}

void usart_transmit_string(char *string) //waits for transmission, slow! faster version -> use usart_interrupt
{
	while (*string)
    1fb8:	88 81       	ld	r24, Y
    1fba:	81 11       	cpse	r24, r1
    1fbc:	f7 cf       	rjmp	.-18     	; 0x1fac <usart_transmit_string+0xc>
	{
		while (!(usart_transmit_char(*string)));
		string++;
	}
}
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	08 95       	ret

00001fc4 <usart_receive>:



uint8_t usart_receive(char *receive_buffer) //abgeaendert
{
    1fc4:	fc 01       	movw	r30, r24
	if (LINSIR & (1 << LRXOK))				//check: new data received?
    1fc6:	90 91 c9 00 	lds	r25, 0x00C9
    1fca:	89 2f       	mov	r24, r25
    1fcc:	81 70       	andi	r24, 0x01	; 1
    1fce:	90 ff       	sbrs	r25, 0
    1fd0:	04 c0       	rjmp	.+8      	; 0x1fda <usart_receive+0x16>
	{          
		*receive_buffer = LINDAT;
    1fd2:	80 91 d2 00 	lds	r24, 0x00D2
    1fd6:	80 83       	st	Z, r24
		return 1;
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return 0;
	}
}
    1fda:	08 95       	ret

00001fdc <__vector_20>:
		return 1;
	}
}

ISR(LIN_TC_vect)
{
    1fdc:	1f 92       	push	r1
    1fde:	0f 92       	push	r0
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	0f 92       	push	r0
    1fe4:	11 24       	eor	r1, r1
    1fe6:	2f 93       	push	r18
    1fe8:	8f 93       	push	r24
    1fea:	9f 93       	push	r25
    1fec:	ef 93       	push	r30
    1fee:	ff 93       	push	r31
    if ((LINSIR & (1<<LRXOK))) //receive interrupt?
    1ff0:	80 91 c9 00 	lds	r24, 0x00C9
    1ff4:	80 ff       	sbrs	r24, 0
    1ff6:	19 c0       	rjmp	.+50     	; 0x202a <__vector_20+0x4e>
	{
		*rx_write_pointer = LINDAT;	//empfangenes Datenbyte abspeichern
    1ff8:	e0 91 70 07 	lds	r30, 0x0770
    1ffc:	f0 91 71 07 	lds	r31, 0x0771
    2000:	80 91 d2 00 	lds	r24, 0x00D2
    2004:	80 83       	st	Z, r24
		rx_write_pointer++;
    2006:	80 91 70 07 	lds	r24, 0x0770
    200a:	90 91 71 07 	lds	r25, 0x0771
    200e:	01 96       	adiw	r24, 0x01	; 1
    2010:	90 93 71 07 	sts	0x0771, r25
    2014:	80 93 70 07 	sts	0x0770, r24
		if (rx_write_pointer == (rx_buffer + USART_RECEIVE_BUFFER_SIZE)) rx_write_pointer = rx_buffer;
    2018:	84 58       	subi	r24, 0x84	; 132
    201a:	97 40       	sbci	r25, 0x07	; 7
    201c:	31 f4       	brne	.+12     	; 0x202a <__vector_20+0x4e>
    201e:	84 e7       	ldi	r24, 0x74	; 116
    2020:	97 e0       	ldi	r25, 0x07	; 7
    2022:	90 93 71 07 	sts	0x0771, r25
    2026:	80 93 70 07 	sts	0x0770, r24
	}
	
	if((LINSIR & (1<<LTXOK))) //transmit interrupt?
    202a:	80 91 c9 00 	lds	r24, 0x00C9
    202e:	81 ff       	sbrs	r24, 1
    2030:	21 c0       	rjmp	.+66     	; 0x2074 <__vector_20+0x98>
	{
		/* Wenn nicht das Ende der Zeichenkette erreicht wurde,
		   dann weiteres Zeichen senden */
		if ( *tx_read_pointer != '\0' ) {
    2032:	e0 91 72 07 	lds	r30, 0x0772
    2036:	f0 91 73 07 	lds	r31, 0x0773
    203a:	80 81       	ld	r24, Z
    203c:	88 23       	and	r24, r24
    203e:	69 f0       	breq	.+26     	; 0x205a <__vector_20+0x7e>
			LINDAT = *tx_read_pointer;
    2040:	80 81       	ld	r24, Z
    2042:	80 93 d2 00 	sts	0x00D2, r24
			tx_read_pointer++;
    2046:	80 91 72 07 	lds	r24, 0x0772
    204a:	90 91 73 07 	lds	r25, 0x0773
    204e:	01 96       	adiw	r24, 0x01	; 1
    2050:	90 93 73 07 	sts	0x0773, r25
    2054:	80 93 72 07 	sts	0x0772, r24
    2058:	0d c0       	rjmp	.+26     	; 0x2074 <__vector_20+0x98>
		}
		else
		{
			// Flag setzen, das der String gesendet wurde
			usart_tx_complete = 1;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	80 93 05 01 	sts	0x0105, r24

			// Interrupt deaktivieren
			LINENIR &= ~(1<<LENTXOK);
    2060:	ea ec       	ldi	r30, 0xCA	; 202
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	8d 7f       	andi	r24, 0xFD	; 253
    2068:	80 83       	st	Z, r24
			LINSIR |= (1<<LTXOK);
    206a:	e9 ec       	ldi	r30, 0xC9	; 201
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	82 60       	ori	r24, 0x02	; 2
    2072:	80 83       	st	Z, r24
		}
	}
    2074:	ff 91       	pop	r31
    2076:	ef 91       	pop	r30
    2078:	9f 91       	pop	r25
    207a:	8f 91       	pop	r24
    207c:	2f 91       	pop	r18
    207e:	0f 90       	pop	r0
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	0f 90       	pop	r0
    2084:	1f 90       	pop	r1
    2086:	18 95       	reti

00002088 <main_init_task>:

// *** Initialisierung der Schnittstellen **************************************************
void main_init_task()
{

	LM95071_init();
    2088:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <LM95071_init>
	digital_output_init(SPI_CS_LTC6804_PIN);				//Init des SPI-CS-Outputs
    208c:	8c e6       	ldi	r24, 0x6C	; 108
    208e:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <digital_output_init>
	SPI_CS_LTC6804_HIGH;
    2092:	41 9a       	sbi	0x08, 1	; 8
	digital_output_init(S_Box_active_PIN);					//Init des SBox-Pins
    2094:	83 ed       	ldi	r24, 0xD3	; 211
    2096:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <digital_output_init>
	S_Box_NOT_active;
    209a:	72 98       	cbi	0x0e, 2	; 14
	usart_init(115200);										//Init UART für RS232-Schnittstelle mit Baudrate
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	72 ec       	ldi	r23, 0xC2	; 194
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <usart_init>
	can_init(500);											//Init CAN Bus mit 500kbps (moeglich 1Mbps, 500kbps, 250kbps, 125kbps)
    20a8:	84 ef       	ldi	r24, 0xF4	; 244
    20aa:	91 e0       	ldi	r25, 0x01	; 1
    20ac:	0e 94 c7 0b 	call	0x178e	; 0x178e <can_init>
	adc_init();												//Init Moertl-Boeard-ADC
    20b0:	0e 94 cc 00 	call	0x198	; 0x198 <adc_init>
	adc_background_read_init(ADC_IN_AN3 | ADC_IN_AN4);		//Init des AN3 Ref-Pin. AN4 Stromwert
    20b4:	88 e2       	ldi	r24, 0x28	; 40
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <adc_background_read_init>
	spi_init_master(16);									//Prescaler 32 -> 0.5MHz spi clock @ 16MHz CPU clock
    20bc:	80 e1       	ldi	r24, 0x10	; 16
    20be:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <spi_init_master>
	SPCR |= (1 << CPOL) | (1 << CPHA);
    20c2:	8c b5       	in	r24, 0x2c	; 44
    20c4:	8c 60       	ori	r24, 0x0C	; 12
    20c6:	8c bd       	out	0x2c, r24	; 44
	bmschip_init(UNDERVOLT, OVERVOLT);						
    20c8:	60 e1       	ldi	r22, 0x10	; 16
    20ca:	74 ea       	ldi	r23, 0xA4	; 164
    20cc:	88 ea       	ldi	r24, 0xA8	; 168
    20ce:	91 e6       	ldi	r25, 0x61	; 97
    20d0:	0e 94 26 04 	call	0x84c	; 0x84c <bmschip_init>

	//Nach Initialisierung -> Freigabe an ARM
	Init_flag = 1;
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	80 93 0c 07 	sts	0x070C, r24
	CAN_SCHEDULE_MESSAGE0;
    20da:	80 91 49 07 	lds	r24, 0x0749
    20de:	81 60       	ori	r24, 0x01	; 1
    20e0:	80 93 49 07 	sts	0x0749, r24
	
	usart_transmit_string("\f");
    20e4:	8a e2       	ldi	r24, 0x2A	; 42
    20e6:	93 e0       	ldi	r25, 0x03	; 3
    20e8:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	usart_transmit_string("AVR-Initialisierung erfolgreich!\r\n");	
    20ec:	8c e2       	ldi	r24, 0x2C	; 44
    20ee:	93 e0       	ldi	r25, 0x03	; 3
    20f0:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	usart_transmit_string("Warte auf Test-Freigabe!");	
    20f4:	8f e4       	ldi	r24, 0x4F	; 79
    20f6:	93 e0       	ldi	r25, 0x03	; 3
    20f8:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
    20fc:	08 95       	ret

000020fe <freigabe_task>:
}
// *****************************************************************************************

// *** Test des Systems ********************************************************************
uint8_t freigabe_task()
{
    20fe:	cf 92       	push	r12
    2100:	df 92       	push	r13
    2102:	ef 92       	push	r14
    2104:	ff 92       	push	r15
    2106:	0f 93       	push	r16
    2108:	1f 93       	push	r17
    210a:	cf 93       	push	r28
	uint8_t i, i1, ret = 0;
	uint32_t wait_milli;

	//Anzahl der Slave-Boards bestimmen
	if(Init_flag == 1 && Test_flag == 1 && Freigabe_flag == 0)
    210c:	80 91 0c 07 	lds	r24, 0x070C
    2110:	81 30       	cpi	r24, 0x01	; 1
    2112:	09 f0       	breq	.+2      	; 0x2116 <freigabe_task+0x18>
    2114:	ca c0       	rjmp	.+404    	; 0x22aa <freigabe_task+0x1ac>
    2116:	80 91 0b 07 	lds	r24, 0x070B
    211a:	81 30       	cpi	r24, 0x01	; 1
    211c:	09 f0       	breq	.+2      	; 0x2120 <freigabe_task+0x22>
    211e:	c5 c0       	rjmp	.+394    	; 0x22aa <freigabe_task+0x1ac>
    2120:	80 91 0a 07 	lds	r24, 0x070A
    2124:	81 11       	cpse	r24, r1
    2126:	c1 c0       	rjmp	.+386    	; 0x22aa <freigabe_task+0x1ac>
	{
		slave_boards = slave;
    2128:	80 91 09 07 	lds	r24, 0x0709
    212c:	80 93 24 07 	sts	0x0724, r24
		i1 = 0;
	
		for(i=1; i<6;i++)
    2130:	c1 e0       	ldi	r28, 0x01	; 1
				//Wenn Stromsensor angeschlossen:
				//bms.cur.cur_flag = 0x00;
				//bmschip_read_IntADC(&bms.cur.V_cur, &bms.cur.V_reference);
				//bms.cur.cur_transmit = evaluate_Current(bms.cur.V_cur, bms.cur.V_reference, &bms.cur.cur_flag, curDirect);
				//Wenn Stromsensor nicht angeschlossen:
				bms.cur.cur_transmit = 0;
    2132:	0f 2e       	mov	r0, r31
    2134:	f6 e5       	ldi	r31, 0x56	; 86
    2136:	cf 2e       	mov	r12, r31
    2138:	f9 e0       	ldi	r31, 0x09	; 9
    213a:	df 2e       	mov	r13, r31
    213c:	f0 2d       	mov	r31, r0
					CAN_SCHEDULE_MESSAGE0;
					SET_FALSE(flagOverVol);
					Test_flag = 0;
					break;							
				}
				else if(bms.temp.temp_max>=OVERTEMP)
    213e:	0f 2e       	mov	r0, r31
    2140:	f3 e2       	ldi	r31, 0x23	; 35
    2142:	ef 2e       	mov	r14, r31
    2144:	fa e0       	ldi	r31, 0x0A	; 10
    2146:	ff 2e       	mov	r15, r31
    2148:	f0 2d       	mov	r31, r0
		slave_boards = slave;
		i1 = 0;
	
		for(i=1; i<6;i++)
		{
			usart_transmit_string("\r\n Test ");
    214a:	88 e6       	ldi	r24, 0x68	; 104
    214c:	93 e0       	ldi	r25, 0x03	; 3
    214e:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
			while(!(usart_transmit_char(48+i)));
    2152:	10 e3       	ldi	r17, 0x30	; 48
    2154:	1c 0f       	add	r17, r28
    2156:	81 2f       	mov	r24, r17
    2158:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    215c:	88 23       	and	r24, r24
    215e:	d9 f3       	breq	.-10     	; 0x2156 <freigabe_task+0x58>
			if(bmschip_getVoltages(bms.volt.val) == 1)
    2160:	8b ec       	ldi	r24, 0xCB	; 203
    2162:	97 e0       	ldi	r25, 0x07	; 7
    2164:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <bmschip_getVoltages>
    2168:	81 30       	cpi	r24, 0x01	; 1
    216a:	a9 f4       	brne	.+42     	; 0x2196 <freigabe_task+0x98>
			{
				
				usart_transmit_string("\r\n Fehler: Kommunikation!");
    216c:	81 e7       	ldi	r24, 0x71	; 113
    216e:	93 e0       	ldi	r25, 0x03	; 3
    2170:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
				usart_transmit_string("\r\n Test erneut starten!\r\n");	
    2174:	8b e8       	ldi	r24, 0x8B	; 139
    2176:	93 e0       	ldi	r25, 0x03	; 3
    2178:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
				SET_TRUE(flagCommunication);
    217c:	e9 ec       	ldi	r30, 0xC9	; 201
    217e:	f7 e0       	ldi	r31, 0x07	; 7
    2180:	80 81       	ld	r24, Z
				CAN_SCHEDULE_MESSAGE0;		
    2182:	90 91 49 07 	lds	r25, 0x0749
    2186:	91 60       	ori	r25, 0x01	; 1
    2188:	90 93 49 07 	sts	0x0749, r25
				SET_FALSE(flagCommunication);
    218c:	8f 7e       	andi	r24, 0xEF	; 239
    218e:	80 83       	st	Z, r24
				Test_flag = 0;
    2190:	10 92 0b 07 	sts	0x070B, r1
				break;
    2194:	75 c0       	rjmp	.+234    	; 0x2280 <freigabe_task+0x182>
			}
			else
			{
				bmschip_evaluate(bms.volt.val, &bms.volt.max, &bms.volt.min,  &bms.volt.avg, &bms.volt.NumOfCells);
    2196:	01 e5       	ldi	r16, 0x51	; 81
    2198:	19 e0       	ldi	r17, 0x09	; 9
    219a:	2f e4       	ldi	r18, 0x4F	; 79
    219c:	39 e0       	ldi	r19, 0x09	; 9
    219e:	4d e4       	ldi	r20, 0x4D	; 77
    21a0:	59 e0       	ldi	r21, 0x09	; 9
    21a2:	6b e4       	ldi	r22, 0x4B	; 75
    21a4:	79 e0       	ldi	r23, 0x09	; 9
    21a6:	8b ec       	ldi	r24, 0xCB	; 203
    21a8:	97 e0       	ldi	r25, 0x07	; 7
    21aa:	0e 94 8a 09 	call	0x1314	; 0x1314 <bmschip_evaluate>
				bmschip_getTemperature(3);
    21ae:	83 e0       	ldi	r24, 0x03	; 3
    21b0:	0e 94 a2 06 	call	0xd44	; 0xd44 <bmschip_getTemperature>
				//Wenn Stromsensor angeschlossen:
				//bms.cur.cur_flag = 0x00;
				//bmschip_read_IntADC(&bms.cur.V_cur, &bms.cur.V_reference);
				//bms.cur.cur_transmit = evaluate_Current(bms.cur.V_cur, bms.cur.V_reference, &bms.cur.cur_flag, curDirect);
				//Wenn Stromsensor nicht angeschlossen:
				bms.cur.cur_transmit = 0;
    21b4:	f6 01       	movw	r30, r12
    21b6:	10 82       	st	Z, r1
    21b8:	11 82       	std	Z+1, r1	; 0x01
    21ba:	12 82       	std	Z+2, r1	; 0x02
    21bc:	13 82       	std	Z+3, r1	; 0x03
// ********************************************************************************************************************************************************************************************************************************	
					
				if(bms.volt.min<=UNDERVOLT)
    21be:	80 91 4d 09 	lds	r24, 0x094D
    21c2:	90 91 4e 09 	lds	r25, 0x094E
    21c6:	89 3a       	cpi	r24, 0xA9	; 169
    21c8:	91 46       	sbci	r25, 0x61	; 97
    21ca:	a8 f4       	brcc	.+42     	; 0x21f6 <freigabe_task+0xf8>
				{
					usart_transmit_string("\r\n Fehler: Undervoltage!");
    21cc:	85 ea       	ldi	r24, 0xA5	; 165
    21ce:	93 e0       	ldi	r25, 0x03	; 3
    21d0:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
					usart_transmit_string("\r\n Test erneut starten!\r\n");		
    21d4:	8b e8       	ldi	r24, 0x8B	; 139
    21d6:	93 e0       	ldi	r25, 0x03	; 3
    21d8:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
					SET_TRUE(flagUnderVol);
    21dc:	e9 ec       	ldi	r30, 0xC9	; 201
    21de:	f7 e0       	ldi	r31, 0x07	; 7
    21e0:	80 81       	ld	r24, Z
					CAN_SCHEDULE_MESSAGE0;
    21e2:	90 91 49 07 	lds	r25, 0x0749
    21e6:	91 60       	ori	r25, 0x01	; 1
    21e8:	90 93 49 07 	sts	0x0749, r25
					SET_FALSE(flagUnderVol);				
    21ec:	8b 7f       	andi	r24, 0xFB	; 251
    21ee:	80 83       	st	Z, r24
					Test_flag = 0;
    21f0:	10 92 0b 07 	sts	0x070B, r1
					break;		
    21f4:	45 c0       	rjmp	.+138    	; 0x2280 <freigabe_task+0x182>
				}
				else if(bms.volt.max>=OVERVOLT)
    21f6:	80 91 4b 09 	lds	r24, 0x094B
    21fa:	90 91 4c 09 	lds	r25, 0x094C
    21fe:	80 31       	cpi	r24, 0x10	; 16
    2200:	94 4a       	sbci	r25, 0xA4	; 164
    2202:	a8 f0       	brcs	.+42     	; 0x222e <freigabe_task+0x130>
				{
					usart_transmit_string("\r\n Fehler: Overvoltage!");
    2204:	8e eb       	ldi	r24, 0xBE	; 190
    2206:	93 e0       	ldi	r25, 0x03	; 3
    2208:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
					usart_transmit_string("\r\n Test erneut starten!\r\n");										
    220c:	8b e8       	ldi	r24, 0x8B	; 139
    220e:	93 e0       	ldi	r25, 0x03	; 3
    2210:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
					SET_TRUE(flagOverVol);
    2214:	e9 ec       	ldi	r30, 0xC9	; 201
    2216:	f7 e0       	ldi	r31, 0x07	; 7
    2218:	80 81       	ld	r24, Z
					CAN_SCHEDULE_MESSAGE0;
    221a:	90 91 49 07 	lds	r25, 0x0749
    221e:	91 60       	ori	r25, 0x01	; 1
    2220:	90 93 49 07 	sts	0x0749, r25
					SET_FALSE(flagOverVol);
    2224:	8d 7f       	andi	r24, 0xFD	; 253
    2226:	80 83       	st	Z, r24
					Test_flag = 0;
    2228:	10 92 0b 07 	sts	0x070B, r1
					break;							
    222c:	29 c0       	rjmp	.+82     	; 0x2280 <freigabe_task+0x182>
				}
				else if(bms.temp.temp_max>=OVERTEMP)
    222e:	f7 01       	movw	r30, r14
    2230:	80 81       	ld	r24, Z
    2232:	91 81       	ldd	r25, Z+1	; 0x01
    2234:	a2 81       	ldd	r26, Z+2	; 0x02
    2236:	b3 81       	ldd	r27, Z+3	; 0x03
    2238:	80 37       	cpi	r24, 0x70	; 112
    223a:	97 41       	sbci	r25, 0x17	; 23
    223c:	a1 05       	cpc	r26, r1
    223e:	b1 05       	cpc	r27, r1
    2240:	ac f0       	brlt	.+42     	; 0x226c <freigabe_task+0x16e>
				{
					usart_transmit_string("\r\n Fehler: Overtemperature!");
    2242:	86 ed       	ldi	r24, 0xD6	; 214
    2244:	93 e0       	ldi	r25, 0x03	; 3
    2246:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
					usart_transmit_string("\r\n Test erneut starten!\r\n");					
    224a:	8b e8       	ldi	r24, 0x8B	; 139
    224c:	93 e0       	ldi	r25, 0x03	; 3
    224e:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
					SET_TRUE(flagOverTemp);
    2252:	e9 ec       	ldi	r30, 0xC9	; 201
    2254:	f7 e0       	ldi	r31, 0x07	; 7
    2256:	80 81       	ld	r24, Z
					CAN_SCHEDULE_MESSAGE0;
    2258:	90 91 49 07 	lds	r25, 0x0749
    225c:	91 60       	ori	r25, 0x01	; 1
    225e:	90 93 49 07 	sts	0x0749, r25
					SET_FALSE(flagOverTemp);
    2262:	87 7f       	andi	r24, 0xF7	; 247
    2264:	80 83       	st	Z, r24
					Test_flag = 0;
    2266:	10 92 0b 07 	sts	0x070B, r1
					break;		
    226a:	0a c0       	rjmp	.+20     	; 0x2280 <freigabe_task+0x182>
				else
				{
					i1++;
				}
				
				if(i1 == 5)
    226c:	c5 30       	cpi	r28, 0x05	; 5
    226e:	21 f4       	brne	.+8      	; 0x2278 <freigabe_task+0x17a>
				{
					Freigabe_flag = 1;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	80 93 0a 07 	sts	0x070A, r24
    2276:	04 c0       	rjmp	.+8      	; 0x2280 <freigabe_task+0x182>
	if(Init_flag == 1 && Test_flag == 1 && Freigabe_flag == 0)
	{
		slave_boards = slave;
		i1 = 0;
	
		for(i=1; i<6;i++)
    2278:	cf 5f       	subi	r28, 0xFF	; 255
    227a:	c6 30       	cpi	r28, 0x06	; 6
    227c:	09 f0       	breq	.+2      	; 0x2280 <freigabe_task+0x182>
    227e:	65 cf       	rjmp	.-310    	; 0x214a <freigabe_task+0x4c>
					Freigabe_flag = 1;
				}
			}
		}
		
		if(Freigabe_flag == 1)
    2280:	80 91 0a 07 	lds	r24, 0x070A
    2284:	81 30       	cpi	r24, 0x01	; 1
    2286:	01 f5       	brne	.+64     	; 0x22c8 <freigabe_task+0x1ca>
		{
			usart_transmit_string("\r\n\n Test-Durchlauf erfolgreich!");
    2288:	82 ef       	ldi	r24, 0xF2	; 242
    228a:	93 e0       	ldi	r25, 0x03	; 3
    228c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
			usart_transmit_string("\r\n Warte auf endgueltige Freigabe!");
    2290:	82 e1       	ldi	r24, 0x12	; 18
    2292:	94 e0       	ldi	r25, 0x04	; 4
    2294:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
			Test_flag = 0;
    2298:	10 92 0b 07 	sts	0x070B, r1
			CAN_SCHEDULE_MESSAGE0;			
    229c:	80 91 49 07 	lds	r24, 0x0749
    22a0:	81 60       	ori	r24, 0x01	; 1
    22a2:	80 93 49 07 	sts	0x0749, r24
// *****************************************************************************************

// *** Test des Systems ********************************************************************
uint8_t freigabe_task()
{
	uint8_t i, i1, ret = 0;
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	16 c0       	rjmp	.+44     	; 0x22d6 <freigabe_task+0x1d8>
			usart_transmit_string("\r\n Warte auf endgueltige Freigabe!");
			Test_flag = 0;
			CAN_SCHEDULE_MESSAGE0;			
		}
	}
	else if (STM_flag == 1 && Freigabe_flag == 1 && Test_flag == 0)
    22aa:	80 91 0d 07 	lds	r24, 0x070D
    22ae:	81 30       	cpi	r24, 0x01	; 1
    22b0:	69 f4       	brne	.+26     	; 0x22cc <freigabe_task+0x1ce>
    22b2:	80 91 0a 07 	lds	r24, 0x070A
    22b6:	81 30       	cpi	r24, 0x01	; 1
    22b8:	59 f4       	brne	.+22     	; 0x22d0 <freigabe_task+0x1d2>
    22ba:	80 91 0b 07 	lds	r24, 0x070B
    22be:	81 11       	cpse	r24, r1
    22c0:	09 c0       	rjmp	.+18     	; 0x22d4 <freigabe_task+0x1d6>
	{
		S_Box_active;
    22c2:	72 9a       	sbi	0x0e, 2	; 14
		ret = 1;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	07 c0       	rjmp	.+14     	; 0x22d6 <freigabe_task+0x1d8>
// *****************************************************************************************

// *** Test des Systems ********************************************************************
uint8_t freigabe_task()
{
	uint8_t i, i1, ret = 0;
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	05 c0       	rjmp	.+10     	; 0x22d6 <freigabe_task+0x1d8>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	03 c0       	rjmp	.+6      	; 0x22d6 <freigabe_task+0x1d8>
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	01 c0       	rjmp	.+2      	; 0x22d6 <freigabe_task+0x1d8>
    22d4:	80 e0       	ldi	r24, 0x00	; 0
	{
		S_Box_active;
		ret = 1;
	}
	return(ret);
}
    22d6:	cf 91       	pop	r28
    22d8:	1f 91       	pop	r17
    22da:	0f 91       	pop	r16
    22dc:	ff 90       	pop	r15
    22de:	ef 90       	pop	r14
    22e0:	df 90       	pop	r13
    22e2:	cf 90       	pop	r12
    22e4:	08 95       	ret

000022e6 <timer_1ms_task>:
// *****************************************************************************************

void timer_1ms_task()	//1 kHz
{
    22e6:	08 95       	ret

000022e8 <timer_5ms_task>:
	
	//----------------
}

void timer_5ms_task()	//200 Hz
{
    22e8:	08 95       	ret

000022ea <timer_10ms_task>:
	
	//----------------
}

void timer_10ms_task()	//100 Hz
{
    22ea:	08 95       	ret

000022ec <timer_50ms_task>:

	//----------------
}

void timer_50ms_task()	//20 Hz
{
    22ec:	0f 93       	push	r16
    22ee:	1f 93       	push	r17
	// *** Spannungsmessung ********************************************************************
	//Falls Balancing-flag gesetzt -> Balancing deaktivieren
	bal = 0x00;
    22f0:	10 92 00 07 	sts	0x0700, r1
	if(IS_TRUE(flagBalActiv))
    22f4:	80 91 c9 07 	lds	r24, 0x07C9
    22f8:	86 ff       	sbrs	r24, 6
    22fa:	08 c0       	rjmp	.+16     	; 0x230c <timer_50ms_task+0x20>
	{
		bal = 0x01;
    22fc:	91 e0       	ldi	r25, 0x01	; 1
    22fe:	90 93 00 07 	sts	0x0700, r25
		SET_FALSE(flagBalActiv);
    2302:	8f 7b       	andi	r24, 0xBF	; 191
    2304:	80 93 c9 07 	sts	0x07C9, r24
		bmschip_writeConfig();
    2308:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <bmschip_writeConfig>
	}

	//Messung
	if (bmschip_getVoltages(bms.volt.val) && !(bal))
    230c:	8b ec       	ldi	r24, 0xCB	; 203
    230e:	97 e0       	ldi	r25, 0x07	; 7
    2310:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <bmschip_getVoltages>
    2314:	88 23       	and	r24, r24
    2316:	49 f0       	breq	.+18     	; 0x232a <timer_50ms_task+0x3e>
    2318:	80 91 00 07 	lds	r24, 0x0700
    231c:	81 11       	cpse	r24, r1
    231e:	05 c0       	rjmp	.+10     	; 0x232a <timer_50ms_task+0x3e>
	{
		SET_TRUE(flagCommunication);
    2320:	e9 ec       	ldi	r30, 0xC9	; 201
    2322:	f7 e0       	ldi	r31, 0x07	; 7
    2324:	80 81       	ld	r24, Z
    2326:	80 61       	ori	r24, 0x10	; 16
    2328:	80 83       	st	Z, r24
	}
	
	//Falls Balancing-flag gesetzt -> Balancing aktivieren
	if(IS_FALSE(flagBalActiv) && bal == 0x01)
    232a:	80 91 c9 07 	lds	r24, 0x07C9
    232e:	86 fd       	sbrc	r24, 6
    2330:	09 c0       	rjmp	.+18     	; 0x2344 <timer_50ms_task+0x58>
    2332:	90 91 00 07 	lds	r25, 0x0700
    2336:	91 30       	cpi	r25, 0x01	; 1
    2338:	29 f4       	brne	.+10     	; 0x2344 <timer_50ms_task+0x58>
	{
		SET_TRUE(flagBalActiv);
    233a:	80 64       	ori	r24, 0x40	; 64
    233c:	80 93 c9 07 	sts	0x07C9, r24
		bmschip_writeConfig();
    2340:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <bmschip_writeConfig>
	}

	bmschip_evaluate(bms.volt.val, &bms.volt.max, &bms.volt.min, &bms.volt.avg, &bms.volt.NumOfCells);
    2344:	01 e5       	ldi	r16, 0x51	; 81
    2346:	19 e0       	ldi	r17, 0x09	; 9
    2348:	2f e4       	ldi	r18, 0x4F	; 79
    234a:	39 e0       	ldi	r19, 0x09	; 9
    234c:	4d e4       	ldi	r20, 0x4D	; 77
    234e:	59 e0       	ldi	r21, 0x09	; 9
    2350:	6b e4       	ldi	r22, 0x4B	; 75
    2352:	79 e0       	ldi	r23, 0x09	; 9
    2354:	8b ec       	ldi	r24, 0xCB	; 203
    2356:	97 e0       	ldi	r25, 0x07	; 7
    2358:	0e 94 8a 09 	call	0x1314	; 0x1314 <bmschip_evaluate>
	if(bms.volt.min<=UNDERVOLT)
    235c:	80 91 4d 09 	lds	r24, 0x094D
    2360:	90 91 4e 09 	lds	r25, 0x094E
    2364:	89 3a       	cpi	r24, 0xA9	; 169
    2366:	91 46       	sbci	r25, 0x61	; 97
    2368:	28 f4       	brcc	.+10     	; 0x2374 <timer_50ms_task+0x88>
	{
		SET_TRUE(flagUnderVol);
    236a:	e9 ec       	ldi	r30, 0xC9	; 201
    236c:	f7 e0       	ldi	r31, 0x07	; 7
    236e:	80 81       	ld	r24, Z
    2370:	84 60       	ori	r24, 0x04	; 4
    2372:	80 83       	st	Z, r24
	}
	if(bms.volt.max>=OVERVOLT)
    2374:	80 91 4b 09 	lds	r24, 0x094B
    2378:	90 91 4c 09 	lds	r25, 0x094C
    237c:	80 31       	cpi	r24, 0x10	; 16
    237e:	94 4a       	sbci	r25, 0xA4	; 164
    2380:	28 f0       	brcs	.+10     	; 0x238c <timer_50ms_task+0xa0>
	{
		SET_TRUE(flagOverVol);
    2382:	e9 ec       	ldi	r30, 0xC9	; 201
    2384:	f7 e0       	ldi	r31, 0x07	; 7
    2386:	80 81       	ld	r24, Z
    2388:	82 60       	ori	r24, 0x02	; 2
    238a:	80 83       	st	Z, r24
	}
	// *****************************************************************************************

	// *** Balancing ***************************************************************************
	if(usart_receive(&eingabe))
    238c:	8d e2       	ldi	r24, 0x2D	; 45
    238e:	9a e0       	ldi	r25, 0x0A	; 10
    2390:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <usart_receive>
    2394:	88 23       	and	r24, r24
    2396:	a1 f0       	breq	.+40     	; 0x23c0 <timer_50ms_task+0xd4>
	{
		switch (eingabe)
    2398:	80 91 2d 0a 	lds	r24, 0x0A2D
    239c:	80 33       	cpi	r24, 0x30	; 48
    239e:	19 f0       	breq	.+6      	; 0x23a6 <timer_50ms_task+0xba>
    23a0:	81 33       	cpi	r24, 0x31	; 49
    23a2:	49 f0       	breq	.+18     	; 0x23b6 <timer_50ms_task+0xca>
    23a4:	0d c0       	rjmp	.+26     	; 0x23c0 <timer_50ms_task+0xd4>
		{
			case 48:	SET_FALSE(flagBalActiv);
    23a6:	e9 ec       	ldi	r30, 0xC9	; 201
    23a8:	f7 e0       	ldi	r31, 0x07	; 7
    23aa:	80 81       	ld	r24, Z
    23ac:	8f 7b       	andi	r24, 0xBF	; 191
    23ae:	80 83       	st	Z, r24
			bmschip_writeConfig();
    23b0:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <bmschip_writeConfig>
			break;
    23b4:	05 c0       	rjmp	.+10     	; 0x23c0 <timer_50ms_task+0xd4>
			case 49:	SET_TRUE(flagBalActiv);
    23b6:	e9 ec       	ldi	r30, 0xC9	; 201
    23b8:	f7 e0       	ldi	r31, 0x07	; 7
    23ba:	80 81       	ld	r24, Z
    23bc:	80 64       	ori	r24, 0x40	; 64
    23be:	80 83       	st	Z, r24
			break;
			default:	break;
		}
	}

	if(IS_FALSE(flagBalActiv)) mode = 48;		//Ausgabe: 0
    23c0:	80 91 c9 07 	lds	r24, 0x07C9
    23c4:	86 fd       	sbrc	r24, 6
    23c6:	33 c1       	rjmp	.+614    	; 0x262e <timer_50ms_task+0x342>
    23c8:	80 e3       	ldi	r24, 0x30	; 48
    23ca:	80 93 06 01 	sts	0x0106, r24
	if(IS_TRUE(flagBalActiv)) mode = 49;		//Ausgabe: 1
		
	//Balancing empfohlen?
	Rec = bmschip_recommendBalancing(bms.volt.val, bms.volt.min, bms.balancing.undervoltage, bms.balancing.RecCells);
    23ce:	40 91 9f 09 	lds	r20, 0x099F
    23d2:	50 91 a0 09 	lds	r21, 0x09A0
    23d6:	60 91 4d 09 	lds	r22, 0x094D
    23da:	70 91 4e 09 	lds	r23, 0x094E
    23de:	2b e7       	ldi	r18, 0x7B	; 123
    23e0:	39 e0       	ldi	r19, 0x09	; 9
    23e2:	8b ec       	ldi	r24, 0xCB	; 203
    23e4:	97 e0       	ldi	r25, 0x07	; 7
    23e6:	0e 94 21 0b 	call	0x1642	; 0x1642 <bmschip_recommendBalancing>
    23ea:	80 93 01 07 	sts	0x0701, r24
		
	//Balancing erlaubt?
	if(IS_TRUE(flagBalActiv))
    23ee:	80 91 c9 07 	lds	r24, 0x07C9
    23f2:	86 ff       	sbrs	r24, 6
    23f4:	14 c0       	rjmp	.+40     	; 0x241e <timer_50ms_task+0x132>
	{
		bmschip_checkBalancing(bms.volt.val, bms.volt.min, bms.balancing.undervoltage, bms.balancing.cells);
    23f6:	40 91 9f 09 	lds	r20, 0x099F
    23fa:	50 91 a0 09 	lds	r21, 0x09A0
    23fe:	60 91 4d 09 	lds	r22, 0x094D
    2402:	70 91 4e 09 	lds	r23, 0x094E
    2406:	2b e5       	ldi	r18, 0x5B	; 91
    2408:	39 e0       	ldi	r19, 0x09	; 9
    240a:	8b ec       	ldi	r24, 0xCB	; 203
    240c:	97 e0       	ldi	r25, 0x07	; 7
    240e:	0e 94 81 0a 	call	0x1502	; 0x1502 <bmschip_checkBalancing>
		bmschip_writeConfig();
    2412:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <bmschip_writeConfig>
	}
	
	if(IS_FALSE(flagBalActiv))
    2416:	80 91 c9 07 	lds	r24, 0x07C9
    241a:	86 fd       	sbrc	r24, 6
    241c:	12 c0       	rjmp	.+36     	; 0x2442 <timer_50ms_task+0x156>
	{
		bmschip_writeConfig();
    241e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <bmschip_writeConfig>
		for(i=0;i<slave_boards;i++)
    2422:	10 92 2b 0a 	sts	0x0A2B, r1
    2426:	90 91 24 07 	lds	r25, 0x0724
    242a:	99 23       	and	r25, r25
    242c:	51 f0       	breq	.+20     	; 0x2442 <timer_50ms_task+0x156>
    242e:	eb e5       	ldi	r30, 0x5B	; 91
    2430:	f9 e0       	ldi	r31, 0x09	; 9
    2432:	80 e0       	ldi	r24, 0x00	; 0
		{
		bms.balancing.cells[i] = 0x0000;
    2434:	11 92       	st	Z+, r1
    2436:	11 92       	st	Z+, r1
	}
	
	if(IS_FALSE(flagBalActiv))
	{
		bmschip_writeConfig();
		for(i=0;i<slave_boards;i++)
    2438:	8f 5f       	subi	r24, 0xFF	; 255
    243a:	89 17       	cp	r24, r25
    243c:	d8 f3       	brcs	.-10     	; 0x2434 <timer_50ms_task+0x148>
    243e:	80 93 2b 0a 	sts	0x0A2B, r24
		}
	}
	// *****************************************************************************************

	// *** Strommessung ************************************************************************
	bms.cur.cur_flag = 0x00;
    2442:	10 92 5a 09 	sts	0x095A, r1
// ********************************************************************************************************************************************************************************************************************************			
	//Wenn Strommessung angeschlossen:
	//bmschip_read_IntADC(&bms.cur.V_cur, &bms.cur.V_reference);
	//bms.cur.cur_transmit = evaluate_Current(bms.cur.V_cur, bms.cur.V_reference, &bms.cur.cur_flag, curDirect);	
	//Wenn Stromsensor nicht Angeschlossen:
	bms.cur.cur_transmit = 0;
    2446:	10 92 56 09 	sts	0x0956, r1
    244a:	10 92 57 09 	sts	0x0957, r1
    244e:	10 92 58 09 	sts	0x0958, r1
    2452:	10 92 59 09 	sts	0x0959, r1
		SET_TRUE(flagOverCur);
	}
	// *****************************************************************************************

	// *** Temperaturmessung *******************************************************************
	bmschip_getTemperature(3);
    2456:	83 e0       	ldi	r24, 0x03	; 3
    2458:	0e 94 a2 06 	call	0xd44	; 0xd44 <bmschip_getTemperature>
	if(bms.temp.temp_max>=OVERTEMP)
    245c:	80 91 23 0a 	lds	r24, 0x0A23
    2460:	90 91 24 0a 	lds	r25, 0x0A24
    2464:	a0 91 25 0a 	lds	r26, 0x0A25
    2468:	b0 91 26 0a 	lds	r27, 0x0A26
    246c:	80 37       	cpi	r24, 0x70	; 112
    246e:	97 41       	sbci	r25, 0x17	; 23
    2470:	a1 05       	cpc	r26, r1
    2472:	b1 05       	cpc	r27, r1
    2474:	2c f0       	brlt	.+10     	; 0x2480 <timer_50ms_task+0x194>
	{
		SET_TRUE(flagOverTemp);
    2476:	e9 ec       	ldi	r30, 0xC9	; 201
    2478:	f7 e0       	ldi	r31, 0x07	; 7
    247a:	80 81       	ld	r24, Z
    247c:	88 60       	ori	r24, 0x08	; 8
    247e:	80 83       	st	Z, r24
	}
	// *****************************************************************************************

	// *** S-Box Freigabe überprüfen ***********************************************************
	if(STM_flag && !Test_flag)
    2480:	80 91 0d 07 	lds	r24, 0x070D
    2484:	88 23       	and	r24, r24
    2486:	09 f4       	brne	.+2      	; 0x248a <timer_50ms_task+0x19e>
    2488:	c4 c0       	rjmp	.+392    	; 0x2612 <timer_50ms_task+0x326>
    248a:	80 91 0b 07 	lds	r24, 0x070B
    248e:	81 11       	cpse	r24, r1
    2490:	c3 c0       	rjmp	.+390    	; 0x2618 <timer_50ms_task+0x32c>
	{
		//S-Box-Timer inaktiv
		if(S_Box_Timer == 0)	
    2492:	80 91 07 07 	lds	r24, 0x0707
    2496:	81 11       	cpse	r24, r1
    2498:	ab c0       	rjmp	.+342    	; 0x25f0 <timer_50ms_task+0x304>
		{
			//Erstmaliges Überschreiten Strom
			if((Overcur_Timer == 0) && (bms.bms_flag & flagOverCur))
    249a:	80 91 06 07 	lds	r24, 0x0706
    249e:	81 11       	cpse	r24, r1
    24a0:	08 c0       	rjmp	.+16     	; 0x24b2 <timer_50ms_task+0x1c6>
    24a2:	80 91 c9 07 	lds	r24, 0x07C9
    24a6:	80 ff       	sbrs	r24, 0
    24a8:	1a c0       	rjmp	.+52     	; 0x24de <timer_50ms_task+0x1f2>
			{
				Overcur_Timer = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	80 93 06 07 	sts	0x0706, r24
    24b0:	16 c0       	rjmp	.+44     	; 0x24de <timer_50ms_task+0x1f2>
			}
			else if((Overcur_Timer > 0) && !(bms.bms_flag & flagOverCur))
    24b2:	90 91 c9 07 	lds	r25, 0x07C9
    24b6:	90 fd       	sbrc	r25, 0
    24b8:	04 c0       	rjmp	.+8      	; 0x24c2 <timer_50ms_task+0x1d6>
			{
				Overcur_Timer--;			
    24ba:	81 50       	subi	r24, 0x01	; 1
    24bc:	80 93 06 07 	sts	0x0706, r24
    24c0:	0e c0       	rjmp	.+28     	; 0x24de <timer_50ms_task+0x1f2>
			}
			else if((Overcur_Timer > 0) && (bms.bms_flag & flagOverCur))
			{
				Overcur_Timer++;
    24c2:	8f 5f       	subi	r24, 0xFF	; 255
				if (Overcur_Timer >= ENTPRELLUNG)
    24c4:	84 30       	cpi	r24, 0x04	; 4
    24c6:	18 f4       	brcc	.+6      	; 0x24ce <timer_50ms_task+0x1e2>
			{
				Overcur_Timer--;			
			}
			else if((Overcur_Timer > 0) && (bms.bms_flag & flagOverCur))
			{
				Overcur_Timer++;
    24c8:	80 93 06 07 	sts	0x0706, r24
    24cc:	08 c0       	rjmp	.+16     	; 0x24de <timer_50ms_task+0x1f2>
				if (Overcur_Timer >= ENTPRELLUNG)
				{
					Overcur_Timer = 0;
    24ce:	10 92 06 07 	sts	0x0706, r1
					S_Box_Timer = 1;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	80 93 07 07 	sts	0x0707, r24
					SET_TRUE(flagCritical);
    24d8:	90 62       	ori	r25, 0x20	; 32
    24da:	90 93 c9 07 	sts	0x07C9, r25
				}
			}

			//Erstmaliges Überschreiten Spannung
			if((Overvolt_Timer == 0) && (bms.bms_flag & flagOverVol))
    24de:	80 91 05 07 	lds	r24, 0x0705
    24e2:	81 11       	cpse	r24, r1
    24e4:	08 c0       	rjmp	.+16     	; 0x24f6 <timer_50ms_task+0x20a>
    24e6:	80 91 c9 07 	lds	r24, 0x07C9
    24ea:	81 ff       	sbrs	r24, 1
    24ec:	1a c0       	rjmp	.+52     	; 0x2522 <timer_50ms_task+0x236>
			{
				Overvolt_Timer = 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	80 93 05 07 	sts	0x0705, r24
    24f4:	16 c0       	rjmp	.+44     	; 0x2522 <timer_50ms_task+0x236>
			}
			else if((Overvolt_Timer > 0) && !(bms.bms_flag & flagOverVol))
    24f6:	90 91 c9 07 	lds	r25, 0x07C9
    24fa:	91 fd       	sbrc	r25, 1
    24fc:	04 c0       	rjmp	.+8      	; 0x2506 <timer_50ms_task+0x21a>
			{
				Overvolt_Timer--;
    24fe:	81 50       	subi	r24, 0x01	; 1
    2500:	80 93 05 07 	sts	0x0705, r24
    2504:	0e c0       	rjmp	.+28     	; 0x2522 <timer_50ms_task+0x236>
			}
			else if((Overvolt_Timer > 0) && (bms.bms_flag & flagOverVol))
			{
				Overvolt_Timer++;
    2506:	8f 5f       	subi	r24, 0xFF	; 255
				if (Overvolt_Timer >= ENTPRELLUNG)
    2508:	84 30       	cpi	r24, 0x04	; 4
    250a:	18 f4       	brcc	.+6      	; 0x2512 <timer_50ms_task+0x226>
			{
				Overvolt_Timer--;
			}
			else if((Overvolt_Timer > 0) && (bms.bms_flag & flagOverVol))
			{
				Overvolt_Timer++;
    250c:	80 93 05 07 	sts	0x0705, r24
    2510:	08 c0       	rjmp	.+16     	; 0x2522 <timer_50ms_task+0x236>
				if (Overvolt_Timer >= ENTPRELLUNG)
				{
					Overvolt_Timer = 0;
    2512:	10 92 05 07 	sts	0x0705, r1
					S_Box_Timer = 1;
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	80 93 07 07 	sts	0x0707, r24
					SET_TRUE(flagCritical);					
    251c:	90 62       	ori	r25, 0x20	; 32
    251e:	90 93 c9 07 	sts	0x07C9, r25
				}
			}

			//Erstmaliges Unterschreiten Spannung
			if((Undervolt_Timer == 0) && (bms.bms_flag & flagUnderVol))
    2522:	80 91 04 07 	lds	r24, 0x0704
    2526:	81 11       	cpse	r24, r1
    2528:	08 c0       	rjmp	.+16     	; 0x253a <timer_50ms_task+0x24e>
    252a:	80 91 c9 07 	lds	r24, 0x07C9
    252e:	82 ff       	sbrs	r24, 2
    2530:	1a c0       	rjmp	.+52     	; 0x2566 <timer_50ms_task+0x27a>
			{
				Undervolt_Timer = 1;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	80 93 04 07 	sts	0x0704, r24
    2538:	16 c0       	rjmp	.+44     	; 0x2566 <timer_50ms_task+0x27a>
			}
			else if((Undervolt_Timer > 0) && !(bms.bms_flag & flagUnderVol))
    253a:	90 91 c9 07 	lds	r25, 0x07C9
    253e:	92 fd       	sbrc	r25, 2
    2540:	04 c0       	rjmp	.+8      	; 0x254a <timer_50ms_task+0x25e>
			{
				Undervolt_Timer--;
    2542:	81 50       	subi	r24, 0x01	; 1
    2544:	80 93 04 07 	sts	0x0704, r24
    2548:	0e c0       	rjmp	.+28     	; 0x2566 <timer_50ms_task+0x27a>
			}
			else if((Undervolt_Timer > 0) && (bms.bms_flag & flagUnderVol))
			{
				Undervolt_Timer++;
    254a:	8f 5f       	subi	r24, 0xFF	; 255
				if (Undervolt_Timer >= ENTPRELLUNG)
    254c:	84 30       	cpi	r24, 0x04	; 4
    254e:	18 f4       	brcc	.+6      	; 0x2556 <timer_50ms_task+0x26a>
			{
				Undervolt_Timer--;
			}
			else if((Undervolt_Timer > 0) && (bms.bms_flag & flagUnderVol))
			{
				Undervolt_Timer++;
    2550:	80 93 04 07 	sts	0x0704, r24
    2554:	08 c0       	rjmp	.+16     	; 0x2566 <timer_50ms_task+0x27a>
				if (Undervolt_Timer >= ENTPRELLUNG)
				{
					Undervolt_Timer = 0;
    2556:	10 92 04 07 	sts	0x0704, r1
					S_Box_Timer = 1;
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	80 93 07 07 	sts	0x0707, r24
					SET_TRUE(flagCritical);					
    2560:	90 62       	ori	r25, 0x20	; 32
    2562:	90 93 c9 07 	sts	0x07C9, r25
				}
			}

			//Erstmaliges Überschreiten Temperatur
			if((Overtemp_Timer == 0) && (bms.bms_flag & flagOverTemp))
    2566:	80 91 03 07 	lds	r24, 0x0703
    256a:	81 11       	cpse	r24, r1
    256c:	08 c0       	rjmp	.+16     	; 0x257e <timer_50ms_task+0x292>
    256e:	80 91 c9 07 	lds	r24, 0x07C9
    2572:	83 ff       	sbrs	r24, 3
    2574:	1a c0       	rjmp	.+52     	; 0x25aa <timer_50ms_task+0x2be>
			{
				Overtemp_Timer = 1;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	80 93 03 07 	sts	0x0703, r24
    257c:	16 c0       	rjmp	.+44     	; 0x25aa <timer_50ms_task+0x2be>
			}
			else if((Overtemp_Timer > 0) && !(bms.bms_flag & flagOverTemp))
    257e:	90 91 c9 07 	lds	r25, 0x07C9
    2582:	93 fd       	sbrc	r25, 3
    2584:	04 c0       	rjmp	.+8      	; 0x258e <timer_50ms_task+0x2a2>
			{
				Overtemp_Timer--;
    2586:	81 50       	subi	r24, 0x01	; 1
    2588:	80 93 03 07 	sts	0x0703, r24
    258c:	0e c0       	rjmp	.+28     	; 0x25aa <timer_50ms_task+0x2be>
			}
			else if((Overtemp_Timer > 0) && (bms.bms_flag & flagOverTemp))
			{
				Overtemp_Timer++;
    258e:	8f 5f       	subi	r24, 0xFF	; 255
				if (Overtemp_Timer >= ENTPRELLUNG)
    2590:	84 30       	cpi	r24, 0x04	; 4
    2592:	18 f4       	brcc	.+6      	; 0x259a <timer_50ms_task+0x2ae>
			{
				Overtemp_Timer--;
			}
			else if((Overtemp_Timer > 0) && (bms.bms_flag & flagOverTemp))
			{
				Overtemp_Timer++;
    2594:	80 93 03 07 	sts	0x0703, r24
    2598:	08 c0       	rjmp	.+16     	; 0x25aa <timer_50ms_task+0x2be>
				if (Overtemp_Timer >= ENTPRELLUNG)
				{
					Overtemp_Timer = 0;
    259a:	10 92 03 07 	sts	0x0703, r1
					S_Box_Timer = 1;
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	80 93 07 07 	sts	0x0707, r24
					SET_TRUE(flagCritical);					
    25a4:	90 62       	ori	r25, 0x20	; 32
    25a6:	90 93 c9 07 	sts	0x07C9, r25
				}
			}
			
			//Erstmaliger Kommunikationsfehler
			if((Communication_Timer == 0) && (bms.bms_flag & flagCommunication))
    25aa:	80 91 02 07 	lds	r24, 0x0702
    25ae:	81 11       	cpse	r24, r1
    25b0:	08 c0       	rjmp	.+16     	; 0x25c2 <timer_50ms_task+0x2d6>
    25b2:	80 91 c9 07 	lds	r24, 0x07C9
    25b6:	84 ff       	sbrs	r24, 4
    25b8:	2f c0       	rjmp	.+94     	; 0x2618 <timer_50ms_task+0x32c>
			{
				Communication_Timer = 1;		
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	80 93 02 07 	sts	0x0702, r24
    25c0:	2b c0       	rjmp	.+86     	; 0x2618 <timer_50ms_task+0x32c>
			}		
			else if((Communication_Timer > 0) && !(bms.bms_flag & flagCommunication))
    25c2:	90 91 c9 07 	lds	r25, 0x07C9
    25c6:	94 fd       	sbrc	r25, 4
    25c8:	04 c0       	rjmp	.+8      	; 0x25d2 <timer_50ms_task+0x2e6>
			{
				Communication_Timer--;
    25ca:	81 50       	subi	r24, 0x01	; 1
    25cc:	80 93 02 07 	sts	0x0702, r24
    25d0:	23 c0       	rjmp	.+70     	; 0x2618 <timer_50ms_task+0x32c>
			}
			else if((Communication_Timer > 0) && (bms.bms_flag & flagCommunication))		
			{
				Communication_Timer++;					
    25d2:	8f 5f       	subi	r24, 0xFF	; 255
				if(Communication_Timer >= ENTPRELLUNGCOM)
    25d4:	8a 30       	cpi	r24, 0x0A	; 10
    25d6:	18 f4       	brcc	.+6      	; 0x25de <timer_50ms_task+0x2f2>
			{
				Communication_Timer--;
			}
			else if((Communication_Timer > 0) && (bms.bms_flag & flagCommunication))		
			{
				Communication_Timer++;					
    25d8:	80 93 02 07 	sts	0x0702, r24
    25dc:	1d c0       	rjmp	.+58     	; 0x2618 <timer_50ms_task+0x32c>
				if(Communication_Timer >= ENTPRELLUNGCOM)
				{
					Communication_Timer = 0;
    25de:	10 92 02 07 	sts	0x0702, r1
					S_Box_Timer = 1;
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	80 93 07 07 	sts	0x0707, r24
					SET_TRUE(flagCritical);					
    25e8:	90 62       	ori	r25, 0x20	; 32
    25ea:	90 93 c9 07 	sts	0x07C9, r25
    25ee:	14 c0       	rjmp	.+40     	; 0x2618 <timer_50ms_task+0x32c>
			}

		} //Entprellung ueberschritten -> S-Box-Timer aktiv
		else if((S_Box_Timer >= 1)) 
		{
			S_Box_Timer++;
    25f0:	8f 5f       	subi	r24, 0xFF	; 255
    25f2:	80 93 07 07 	sts	0x0707, r24
			if(S_Box_Timer >= SBOXLIMIT)
    25f6:	88 32       	cpi	r24, 0x28	; 40
    25f8:	78 f0       	brcs	.+30     	; 0x2618 <timer_50ms_task+0x32c>
			{
				S_Box_NOT_active;
    25fa:	72 98       	cbi	0x0e, 2	; 14
				S_Box_Timer = 0;
    25fc:	10 92 07 07 	sts	0x0707, r1
				S_Box_Timer_Done = 1;
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	80 93 c6 07 	sts	0x07C6, r24
				SET_FALSE(flagCritical);
    2606:	e9 ec       	ldi	r30, 0xC9	; 201
    2608:	f7 e0       	ldi	r31, 0x07	; 7
    260a:	80 81       	ld	r24, Z
    260c:	8f 7d       	andi	r24, 0xDF	; 223
    260e:	80 83       	st	Z, r24
    2610:	03 c0       	rjmp	.+6      	; 0x2618 <timer_50ms_task+0x32c>
			S_Box_active;
		}
	}
	else if(STM_flag == 0) //Sofortige Abschaltung durch USER
	{
		S_Box_NOT_active;
    2612:	72 98       	cbi	0x0e, 2	; 14
		S_Box_Timer=0;
    2614:	10 92 07 07 	sts	0x0707, r1
	}

	//CAN_SCHEDULE_MESSAGE1;
	CAN_SCHEDULE_MESSAGE2;
	CAN_SCHEDULE_MESSAGE3;
	CAN_SCHEDULE_MESSAGE4;
    2618:	80 91 49 07 	lds	r24, 0x0749
    261c:	8c 61       	ori	r24, 0x1C	; 28
    261e:	80 93 49 07 	sts	0x0749, r24
	//BMS-Flag Reset fuer naechsten Durchgang
	SET_FALSE(flagCommunication);
	SET_FALSE(flagOverCur);
	SET_FALSE(flagOverTemp);
	SET_FALSE(flagOverVol);
	SET_FALSE(flagUnderVol);
    2622:	e9 ec       	ldi	r30, 0xC9	; 201
    2624:	f7 e0       	ldi	r31, 0x07	; 7
    2626:	80 81       	ld	r24, Z
    2628:	80 7e       	andi	r24, 0xE0	; 224
    262a:	80 83       	st	Z, r24
    262c:	04 c0       	rjmp	.+8      	; 0x2636 <timer_50ms_task+0x34a>
			default:	break;
		}
	}

	if(IS_FALSE(flagBalActiv)) mode = 48;		//Ausgabe: 0
	if(IS_TRUE(flagBalActiv)) mode = 49;		//Ausgabe: 1
    262e:	81 e3       	ldi	r24, 0x31	; 49
    2630:	80 93 06 01 	sts	0x0106, r24
    2634:	cc ce       	rjmp	.-616    	; 0x23ce <timer_50ms_task+0xe2>
	SET_FALSE(flagOverTemp);
	SET_FALSE(flagOverVol);
	SET_FALSE(flagUnderVol);
	
	// *****************************************************************************************
}
    2636:	1f 91       	pop	r17
    2638:	0f 91       	pop	r16
    263a:	08 95       	ret

0000263c <timer_100ms_task>:

void timer_100ms_task()	//10 Hz
{
    263c:	08 95       	ret

0000263e <timer_500ms_task>:

	//----------------	
}

void timer_500ms_task()	//2 Hz
{
    263e:	cf 92       	push	r12
    2640:	df 92       	push	r13
    2642:	ef 92       	push	r14
    2644:	ff 92       	push	r15
    2646:	0f 93       	push	r16
    2648:	1f 93       	push	r17
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
	// *** Ausgabe via UART ********************************************************************
	//SBox Timer aktiv
	usart_transmit_string("\f");
    264e:	8a e2       	ldi	r24, 0x2A	; 42
    2650:	93 e0       	ldi	r25, 0x03	; 3
    2652:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	if(IS_TRUE(flagCommunication) || IS_TRUE(flagOverCur) || IS_TRUE(flagOverVol) || IS_TRUE(flagOverTemp) || IS_TRUE(flagUnderVol))
    2656:	80 91 c9 07 	lds	r24, 0x07C9
    265a:	84 fd       	sbrc	r24, 4
    265c:	05 c0       	rjmp	.+10     	; 0x2668 <timer_500ms_task+0x2a>
    265e:	98 2f       	mov	r25, r24
    2660:	93 70       	andi	r25, 0x03	; 3
    2662:	11 f4       	brne	.+4      	; 0x2668 <timer_500ms_task+0x2a>
    2664:	8c 70       	andi	r24, 0x0C	; 12
    2666:	e1 f0       	breq	.+56     	; 0x26a0 <timer_500ms_task+0x62>
	{
		utoa(S_Box_Timer, uart_out, 10);	//int in ASCII (uart_out ist ASCII-buffer)
    2668:	80 91 07 07 	lds	r24, 0x0707
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    266c:	4a e0       	ldi	r20, 0x0A	; 10
    266e:	6f e3       	ldi	r22, 0x3F	; 63
    2670:	77 e0       	ldi	r23, 0x07	; 7
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__utoa_ncheck>
		usart_transmit_string(" S-Box Timer: ");
    2678:	85 e3       	ldi	r24, 0x35	; 53
    267a:	94 e0       	ldi	r25, 0x04	; 4
    267c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		usart_transmit_string(&uart_out[0]);
    2680:	8f e3       	ldi	r24, 0x3F	; 63
    2682:	97 e0       	ldi	r25, 0x07	; 7
    2684:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		usart_transmit_string("\r\n\n");	
    2688:	84 e7       	ldi	r24, 0x74	; 116
    268a:	95 e0       	ldi	r25, 0x05	; 5
    268c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	}
	
	//Fehlerausgabe
	if(IS_TRUE(flagCommunication))
    2690:	80 91 c9 07 	lds	r24, 0x07C9
    2694:	84 ff       	sbrs	r24, 4
    2696:	04 c0       	rjmp	.+8      	; 0x26a0 <timer_500ms_task+0x62>
	{
		usart_transmit_string(" Fehler: Kommunikation!\r\n");
    2698:	84 e4       	ldi	r24, 0x44	; 68
    269a:	94 e0       	ldi	r25, 0x04	; 4
    269c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	}
	if(bms.volt.min<=UNDERVOLT)
    26a0:	80 91 4d 09 	lds	r24, 0x094D
    26a4:	90 91 4e 09 	lds	r25, 0x094E
    26a8:	89 3a       	cpi	r24, 0xA9	; 169
    26aa:	91 46       	sbci	r25, 0x61	; 97
    26ac:	20 f4       	brcc	.+8      	; 0x26b6 <timer_500ms_task+0x78>
	{
		usart_transmit_string(" Fehler: Undervoltage!\r\n");
    26ae:	8e e5       	ldi	r24, 0x5E	; 94
    26b0:	94 e0       	ldi	r25, 0x04	; 4
    26b2:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	}
	if(bms.volt.max>=OVERVOLT)
    26b6:	80 91 4b 09 	lds	r24, 0x094B
    26ba:	90 91 4c 09 	lds	r25, 0x094C
    26be:	80 31       	cpi	r24, 0x10	; 16
    26c0:	94 4a       	sbci	r25, 0xA4	; 164
    26c2:	20 f0       	brcs	.+8      	; 0x26cc <timer_500ms_task+0x8e>
	{
		usart_transmit_string(" Fehler: Overvoltage!\r\n");
    26c4:	87 e7       	ldi	r24, 0x77	; 119
    26c6:	94 e0       	ldi	r25, 0x04	; 4
    26c8:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	}
	if(bms.temp.temp_max>=OVERTEMP)
    26cc:	80 91 23 0a 	lds	r24, 0x0A23
    26d0:	90 91 24 0a 	lds	r25, 0x0A24
    26d4:	a0 91 25 0a 	lds	r26, 0x0A25
    26d8:	b0 91 26 0a 	lds	r27, 0x0A26
    26dc:	80 37       	cpi	r24, 0x70	; 112
    26de:	97 41       	sbci	r25, 0x17	; 23
    26e0:	a1 05       	cpc	r26, r1
    26e2:	b1 05       	cpc	r27, r1
    26e4:	24 f0       	brlt	.+8      	; 0x26ee <timer_500ms_task+0xb0>
	{
		usart_transmit_string(" Fehler: Overtemperature!\r\n");
    26e6:	8f e8       	ldi	r24, 0x8F	; 143
    26e8:	94 e0       	ldi	r25, 0x04	; 4
    26ea:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	}
	if(bms.cur.cur_transmit>=OVERCURRENT)
    26ee:	80 91 56 09 	lds	r24, 0x0956
    26f2:	90 91 57 09 	lds	r25, 0x0957
    26f6:	a0 91 58 09 	lds	r26, 0x0958
    26fa:	b0 91 59 09 	lds	r27, 0x0959
    26fe:	80 38       	cpi	r24, 0x80	; 128
    2700:	91 4d       	sbci	r25, 0xD1	; 209
    2702:	a0 4f       	sbci	r26, 0xF0	; 240
    2704:	b8 40       	sbci	r27, 0x08	; 8
    2706:	20 f0       	brcs	.+8      	; 0x2710 <timer_500ms_task+0xd2>
	{
		usart_transmit_string(" Fehler: OverCurrent!\r\n");
    2708:	8b ea       	ldi	r24, 0xAB	; 171
    270a:	94 e0       	ldi	r25, 0x04	; 4
    270c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	}
	
	//Formatierte Ausgabe der einzelnen Spannungswerte
	usart_transmit_string("            \t");
    2710:	83 ec       	ldi	r24, 0xC3	; 195
    2712:	94 e0       	ldi	r25, 0x04	; 4
    2714:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	for(i=0; i<slave_boards; i++)
    2718:	10 92 2b 0a 	sts	0x0A2B, r1
    271c:	80 91 24 07 	lds	r24, 0x0724
    2720:	88 23       	and	r24, r24
    2722:	09 f4       	brne	.+2      	; 0x2726 <timer_500ms_task+0xe8>
    2724:	26 c3       	rjmp	.+1612   	; 0x2d72 <timer_500ms_task+0x734>
    2726:	cf e3       	ldi	r28, 0x3F	; 63
    2728:	d7 e0       	ldi	r29, 0x07	; 7
	{
		usart_transmit_string("Slave ");
    272a:	81 ed       	ldi	r24, 0xD1	; 209
    272c:	94 e0       	ldi	r25, 0x04	; 4
    272e:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		utoa(i+1, uart_out, 10);
    2732:	80 91 2b 0a 	lds	r24, 0x0A2B
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	4a e0       	ldi	r20, 0x0A	; 10
    273a:	be 01       	movw	r22, r28
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__utoa_ncheck>
		while(!(usart_transmit_char(uart_out[0])));
    2742:	88 81       	ld	r24, Y
    2744:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    2748:	88 23       	and	r24, r24
    274a:	d9 f3       	breq	.-10     	; 0x2742 <timer_500ms_task+0x104>
		usart_transmit_string(":\t");
    274c:	88 ed       	ldi	r24, 0xD8	; 216
    274e:	94 e0       	ldi	r25, 0x04	; 4
    2750:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		usart_transmit_string(" Fehler: OverCurrent!\r\n");
	}
	
	//Formatierte Ausgabe der einzelnen Spannungswerte
	usart_transmit_string("            \t");
	for(i=0; i<slave_boards; i++)
    2754:	80 91 2b 0a 	lds	r24, 0x0A2B
    2758:	8f 5f       	subi	r24, 0xFF	; 255
    275a:	80 93 2b 0a 	sts	0x0A2B, r24
    275e:	90 91 24 07 	lds	r25, 0x0724
    2762:	89 17       	cp	r24, r25
    2764:	10 f3       	brcs	.-60     	; 0x272a <timer_500ms_task+0xec>
		utoa(i+1, uart_out, 10);
		while(!(usart_transmit_char(uart_out[0])));
		usart_transmit_string(":\t");
	}
	
	for(i=0; i<12; i++)
    2766:	10 92 2b 0a 	sts	0x0A2B, r1
    276a:	03 c3       	rjmp	.+1542   	; 0x2d72 <timer_500ms_task+0x734>
	{
		usart_transmit_string(" \r\n");
    276c:	81 e7       	ldi	r24, 0x71	; 113
    276e:	96 e0       	ldi	r25, 0x06	; 6
    2770:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		usart_transmit_string(" Zelle ");
    2774:	8b ed       	ldi	r24, 0xDB	; 219
    2776:	94 e0       	ldi	r25, 0x04	; 4
    2778:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		utoa(i+1, uart_out, 10);
    277c:	80 91 2b 0a 	lds	r24, 0x0A2B
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	4a e0       	ldi	r20, 0x0A	; 10
    2784:	be 01       	movw	r22, r28
    2786:	01 96       	adiw	r24, 0x01	; 1
    2788:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__utoa_ncheck>
		while(!(usart_transmit_char(uart_out[0])));
    278c:	88 81       	ld	r24, Y
    278e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    2792:	88 23       	and	r24, r24
    2794:	d9 f3       	breq	.-10     	; 0x278c <timer_500ms_task+0x14e>
		while(!(usart_transmit_char(uart_out[1])));
    2796:	f7 01       	movw	r30, r14
    2798:	80 81       	ld	r24, Z
    279a:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    279e:	88 23       	and	r24, r24
    27a0:	d1 f3       	breq	.-12     	; 0x2796 <timer_500ms_task+0x158>
		usart_transmit_string(": \t");
    27a2:	83 ee       	ldi	r24, 0xE3	; 227
    27a4:	94 e0       	ldi	r25, 0x04	; 4
    27a6:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		
		for(i1=0; i1<slave_boards; i1++)
    27aa:	10 92 2c 0a 	sts	0x0A2C, r1
    27ae:	80 91 24 07 	lds	r24, 0x0724
    27b2:	88 23       	and	r24, r24
    27b4:	09 f4       	brne	.+2      	; 0x27b8 <timer_500ms_task+0x17a>
    27b6:	7f c0       	rjmp	.+254    	; 0x28b6 <timer_500ms_task+0x278>
    27b8:	20 e0       	ldi	r18, 0x00	; 0
		{
			if(cells_per_board[i1] & (1<<i))
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 91 2b 0a 	lds	r20, 0x0A2B
    27c0:	84 2f       	mov	r24, r20
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	f9 01       	movw	r30, r18
    27c6:	ee 0f       	add	r30, r30
    27c8:	ff 1f       	adc	r31, r31
    27ca:	e3 53       	subi	r30, 0x33	; 51
    27cc:	f9 4f       	sbci	r31, 0xF9	; 249
    27ce:	b6 01       	movw	r22, r12
    27d0:	02 c0       	rjmp	.+4      	; 0x27d6 <timer_500ms_task+0x198>
    27d2:	66 0f       	add	r22, r22
    27d4:	77 1f       	adc	r23, r23
    27d6:	4a 95       	dec	r20
    27d8:	e2 f7       	brpl	.-8      	; 0x27d2 <timer_500ms_task+0x194>
    27da:	ab 01       	movw	r20, r22
    27dc:	01 90       	ld	r0, Z+
    27de:	f0 81       	ld	r31, Z
    27e0:	e0 2d       	mov	r30, r0
    27e2:	4e 23       	and	r20, r30
    27e4:	5f 23       	and	r21, r31
    27e6:	45 2b       	or	r20, r21
    27e8:	09 f4       	brne	.+2      	; 0x27ec <timer_500ms_task+0x1ae>
    27ea:	57 c0       	rjmp	.+174    	; 0x289a <timer_500ms_task+0x25c>
			{
				if(bms.volt.val[((i1*12)+i)] >= 10000)
    27ec:	f9 01       	movw	r30, r18
    27ee:	ee 0f       	add	r30, r30
    27f0:	ff 1f       	adc	r31, r31
    27f2:	2e 0f       	add	r18, r30
    27f4:	3f 1f       	adc	r19, r31
    27f6:	f9 01       	movw	r30, r18
    27f8:	ee 0f       	add	r30, r30
    27fa:	ff 1f       	adc	r31, r31
    27fc:	ee 0f       	add	r30, r30
    27fe:	ff 1f       	adc	r31, r31
    2800:	8e 0f       	add	r24, r30
    2802:	9f 1f       	adc	r25, r31
    2804:	fc 01       	movw	r30, r24
    2806:	ee 0f       	add	r30, r30
    2808:	ff 1f       	adc	r31, r31
    280a:	e5 53       	subi	r30, 0x35	; 53
    280c:	f8 4f       	sbci	r31, 0xF8	; 248
    280e:	80 81       	ld	r24, Z
    2810:	91 81       	ldd	r25, Z+1	; 0x01
    2812:	80 31       	cpi	r24, 0x10	; 16
    2814:	77 e2       	ldi	r23, 0x27	; 39
    2816:	97 07       	cpc	r25, r23
    2818:	b8 f0       	brcs	.+46     	; 0x2848 <timer_500ms_task+0x20a>
    281a:	4a e0       	ldi	r20, 0x0A	; 10
    281c:	60 2f       	mov	r22, r16
    281e:	71 2f       	mov	r23, r17
    2820:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__utoa_ncheck>
				{
					utoa(bms.volt.val[((i1*12)+i)], uart_out, 10);
					while(!(usart_transmit_char(uart_out[0])));
    2824:	88 81       	ld	r24, Y
    2826:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    282a:	88 23       	and	r24, r24
    282c:	d9 f3       	breq	.-10     	; 0x2824 <timer_500ms_task+0x1e6>
					while(!(usart_transmit_char(',')));
    282e:	8c e2       	ldi	r24, 0x2C	; 44
    2830:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    2834:	88 23       	and	r24, r24
    2836:	d9 f3       	breq	.-10     	; 0x282e <timer_500ms_task+0x1f0>
					usart_transmit_string(&uart_out[1]);
    2838:	c7 01       	movw	r24, r14
    283a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
					usart_transmit_string(" V\t");
    283e:	87 ee       	ldi	r24, 0xE7	; 231
    2840:	94 e0       	ldi	r25, 0x04	; 4
    2842:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
    2846:	2d c0       	rjmp	.+90     	; 0x28a2 <timer_500ms_task+0x264>
				}
				else
				{
					usart_transmit_string("0,");
    2848:	8b ee       	ldi	r24, 0xEB	; 235
    284a:	94 e0       	ldi	r25, 0x04	; 4
    284c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
					utoa(bms.volt.val[((i1*12)+i)], uart_out, 10);
    2850:	80 91 2c 0a 	lds	r24, 0x0A2C
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	20 91 2b 0a 	lds	r18, 0x0A2B
    285a:	fc 01       	movw	r30, r24
    285c:	ee 0f       	add	r30, r30
    285e:	ff 1f       	adc	r31, r31
    2860:	8e 0f       	add	r24, r30
    2862:	9f 1f       	adc	r25, r31
    2864:	fc 01       	movw	r30, r24
    2866:	ee 0f       	add	r30, r30
    2868:	ff 1f       	adc	r31, r31
    286a:	ee 0f       	add	r30, r30
    286c:	ff 1f       	adc	r31, r31
    286e:	e2 0f       	add	r30, r18
    2870:	f1 1d       	adc	r31, r1
    2872:	ee 0f       	add	r30, r30
    2874:	ff 1f       	adc	r31, r31
    2876:	e5 53       	subi	r30, 0x35	; 53
    2878:	f8 4f       	sbci	r31, 0xF8	; 248
    287a:	4a e0       	ldi	r20, 0x0A	; 10
    287c:	60 2f       	mov	r22, r16
    287e:	71 2f       	mov	r23, r17
    2880:	80 81       	ld	r24, Z
    2882:	91 81       	ldd	r25, Z+1	; 0x01
    2884:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__utoa_ncheck>
					usart_transmit_string(&uart_out[0]);
    2888:	80 2f       	mov	r24, r16
    288a:	91 2f       	mov	r25, r17
    288c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
					usart_transmit_string(" V\t");
    2890:	87 ee       	ldi	r24, 0xE7	; 231
    2892:	94 e0       	ldi	r25, 0x04	; 4
    2894:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
    2898:	04 c0       	rjmp	.+8      	; 0x28a2 <timer_500ms_task+0x264>
				}
			}
			else
			{
				usart_transmit_string("Keine Zelle\t");
    289a:	8e ee       	ldi	r24, 0xEE	; 238
    289c:	94 e0       	ldi	r25, 0x04	; 4
    289e:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		utoa(i+1, uart_out, 10);
		while(!(usart_transmit_char(uart_out[0])));
		while(!(usart_transmit_char(uart_out[1])));
		usart_transmit_string(": \t");
		
		for(i1=0; i1<slave_boards; i1++)
    28a2:	20 91 2c 0a 	lds	r18, 0x0A2C
    28a6:	2f 5f       	subi	r18, 0xFF	; 255
    28a8:	20 93 2c 0a 	sts	0x0A2C, r18
    28ac:	80 91 24 07 	lds	r24, 0x0724
    28b0:	28 17       	cp	r18, r24
    28b2:	08 f4       	brcc	.+2      	; 0x28b6 <timer_500ms_task+0x278>
    28b4:	82 cf       	rjmp	.-252    	; 0x27ba <timer_500ms_task+0x17c>
		utoa(i+1, uart_out, 10);
		while(!(usart_transmit_char(uart_out[0])));
		usart_transmit_string(":\t");
	}
	
	for(i=0; i<12; i++)
    28b6:	80 91 2b 0a 	lds	r24, 0x0A2B
    28ba:	8f 5f       	subi	r24, 0xFF	; 255
    28bc:	80 93 2b 0a 	sts	0x0A2B, r24
    28c0:	8c 30       	cpi	r24, 0x0C	; 12
    28c2:	08 f4       	brcc	.+2      	; 0x28c6 <timer_500ms_task+0x288>
    28c4:	53 cf       	rjmp	.-346    	; 0x276c <timer_500ms_task+0x12e>
			{
				usart_transmit_string("Keine Zelle\t");
			}
		}
	}
	usart_transmit_string(" \r\n\n");
    28c6:	83 e7       	ldi	r24, 0x73	; 115
    28c8:	95 e0       	ldi	r25, 0x05	; 5
    28ca:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
    28ce:	4a e0       	ldi	r20, 0x0A	; 10
    28d0:	6f e3       	ldi	r22, 0x3F	; 63
    28d2:	77 e0       	ldi	r23, 0x07	; 7
    28d4:	80 91 4d 09 	lds	r24, 0x094D
    28d8:	90 91 4e 09 	lds	r25, 0x094E
    28dc:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__utoa_ncheck>

	//Min. Voltage
	utoa(bms.volt.min, uart_out, 10);	//int in ASCII (uart_out ist ASCII-buffer)
	usart_transmit_string(" min. Voltage:\t ");
    28e0:	8b ef       	ldi	r24, 0xFB	; 251
    28e2:	94 e0       	ldi	r25, 0x04	; 4
    28e4:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	while(!(usart_transmit_char(uart_out[0])));
    28e8:	cf e3       	ldi	r28, 0x3F	; 63
    28ea:	d7 e0       	ldi	r29, 0x07	; 7
    28ec:	88 81       	ld	r24, Y
    28ee:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    28f2:	88 23       	and	r24, r24
    28f4:	d9 f3       	breq	.-10     	; 0x28ec <timer_500ms_task+0x2ae>
	while(!(usart_transmit_char(',')));
    28f6:	8c e2       	ldi	r24, 0x2C	; 44
    28f8:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    28fc:	88 23       	and	r24, r24
    28fe:	d9 f3       	breq	.-10     	; 0x28f6 <timer_500ms_task+0x2b8>
	usart_transmit_string(&uart_out[1]);
    2900:	80 e4       	ldi	r24, 0x40	; 64
    2902:	97 e0       	ldi	r25, 0x07	; 7
    2904:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	usart_transmit_string(" V");
    2908:	8c e0       	ldi	r24, 0x0C	; 12
    290a:	95 e0       	ldi	r25, 0x05	; 5
    290c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
    2910:	4a e0       	ldi	r20, 0x0A	; 10
    2912:	6f e3       	ldi	r22, 0x3F	; 63
    2914:	77 e0       	ldi	r23, 0x07	; 7
    2916:	80 91 4f 09 	lds	r24, 0x094F
    291a:	90 91 50 09 	lds	r25, 0x0950
    291e:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__utoa_ncheck>
	
	//Avg. Voltage
	utoa(bms.volt.avg, uart_out, 10);
	usart_transmit_string("\r\n avg. Voltage:\t ");
    2922:	8f e0       	ldi	r24, 0x0F	; 15
    2924:	95 e0       	ldi	r25, 0x05	; 5
    2926:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	while(!(usart_transmit_char(uart_out[0])));
    292a:	cf e3       	ldi	r28, 0x3F	; 63
    292c:	d7 e0       	ldi	r29, 0x07	; 7
    292e:	88 81       	ld	r24, Y
    2930:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    2934:	88 23       	and	r24, r24
    2936:	d9 f3       	breq	.-10     	; 0x292e <timer_500ms_task+0x2f0>
	while(!(usart_transmit_char(',')));
    2938:	8c e2       	ldi	r24, 0x2C	; 44
    293a:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    293e:	88 23       	and	r24, r24
    2940:	d9 f3       	breq	.-10     	; 0x2938 <timer_500ms_task+0x2fa>
	usart_transmit_string(&uart_out[1]);
    2942:	80 e4       	ldi	r24, 0x40	; 64
    2944:	97 e0       	ldi	r25, 0x07	; 7
    2946:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	usart_transmit_string(" V");
    294a:	8c e0       	ldi	r24, 0x0C	; 12
    294c:	95 e0       	ldi	r25, 0x05	; 5
    294e:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
    2952:	4a e0       	ldi	r20, 0x0A	; 10
    2954:	6f e3       	ldi	r22, 0x3F	; 63
    2956:	77 e0       	ldi	r23, 0x07	; 7
    2958:	80 91 4b 09 	lds	r24, 0x094B
    295c:	90 91 4c 09 	lds	r25, 0x094C
    2960:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__utoa_ncheck>
	
	//Max. Voltage
	utoa(bms.volt.max, uart_out, 10);
	usart_transmit_string("\r\n max. Voltage:\t ");
    2964:	82 e2       	ldi	r24, 0x22	; 34
    2966:	95 e0       	ldi	r25, 0x05	; 5
    2968:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	while(!(usart_transmit_char(uart_out[0])));
    296c:	cf e3       	ldi	r28, 0x3F	; 63
    296e:	d7 e0       	ldi	r29, 0x07	; 7
    2970:	88 81       	ld	r24, Y
    2972:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    2976:	88 23       	and	r24, r24
    2978:	d9 f3       	breq	.-10     	; 0x2970 <timer_500ms_task+0x332>
	while(!(usart_transmit_char(',')));
    297a:	8c e2       	ldi	r24, 0x2C	; 44
    297c:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    2980:	88 23       	and	r24, r24
    2982:	d9 f3       	breq	.-10     	; 0x297a <timer_500ms_task+0x33c>
	usart_transmit_string(&uart_out[1]);
    2984:	80 e4       	ldi	r24, 0x40	; 64
    2986:	97 e0       	ldi	r25, 0x07	; 7
    2988:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	usart_transmit_string(" V\r\n");
    298c:	85 e3       	ldi	r24, 0x35	; 53
    298e:	95 e0       	ldi	r25, 0x05	; 5
    2990:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	
	
	//Ausgabe der Temperaturen des LTC6804
	for(i=0; i<slave_boards; i++)
    2994:	10 92 2b 0a 	sts	0x0A2B, r1
    2998:	80 91 24 07 	lds	r24, 0x0724
    299c:	88 23       	and	r24, r24
    299e:	09 f4       	brne	.+2      	; 0x29a2 <timer_500ms_task+0x364>
    29a0:	71 c0       	rjmp	.+226    	; 0x2a84 <timer_500ms_task+0x446>
    29a2:	cf e3       	ldi	r28, 0x3F	; 63
    29a4:	d7 e0       	ldi	r29, 0x07	; 7
		usart_transmit_string("\r\n Temperatur ");
		utoa(i+1, uart_out, 10);
		while(!(usart_transmit_char(uart_out[0])));
		usart_transmit_string(":\t");
		
		tempspeicher = (sint16_t)(bms.temp.temp_transmit[i]/100);	//Temp vor dem Komma
    29a6:	0f 2e       	mov	r0, r31
    29a8:	f4 e6       	ldi	r31, 0x64	; 100
    29aa:	cf 2e       	mov	r12, r31
    29ac:	d1 2c       	mov	r13, r1
    29ae:	e1 2c       	mov	r14, r1
    29b0:	f1 2c       	mov	r15, r1
    29b2:	f0 2d       	mov	r31, r0
	
	
	//Ausgabe der Temperaturen des LTC6804
	for(i=0; i<slave_boards; i++)
	{
		usart_transmit_string("\r\n Temperatur ");
    29b4:	8a e3       	ldi	r24, 0x3A	; 58
    29b6:	95 e0       	ldi	r25, 0x05	; 5
    29b8:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		utoa(i+1, uart_out, 10);
    29bc:	80 91 2b 0a 	lds	r24, 0x0A2B
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	4a e0       	ldi	r20, 0x0A	; 10
    29c4:	be 01       	movw	r22, r28
    29c6:	01 96       	adiw	r24, 0x01	; 1
    29c8:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__utoa_ncheck>
		while(!(usart_transmit_char(uart_out[0])));
    29cc:	88 81       	ld	r24, Y
    29ce:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    29d2:	88 23       	and	r24, r24
    29d4:	d9 f3       	breq	.-10     	; 0x29cc <timer_500ms_task+0x38e>
		usart_transmit_string(":\t");
    29d6:	88 ed       	ldi	r24, 0xD8	; 216
    29d8:	94 e0       	ldi	r25, 0x04	; 4
    29da:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		
		tempspeicher = (sint16_t)(bms.temp.temp_transmit[i]/100);	//Temp vor dem Komma
    29de:	e0 91 2b 0a 	lds	r30, 0x0A2B
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	ee 0f       	add	r30, r30
    29e6:	ff 1f       	adc	r31, r31
    29e8:	ee 0f       	add	r30, r30
    29ea:	ff 1f       	adc	r31, r31
    29ec:	ed 51       	subi	r30, 0x1D	; 29
    29ee:	f6 4f       	sbci	r31, 0xF6	; 246
    29f0:	60 81       	ld	r22, Z
    29f2:	71 81       	ldd	r23, Z+1	; 0x01
    29f4:	82 81       	ldd	r24, Z+2	; 0x02
    29f6:	93 81       	ldd	r25, Z+3	; 0x03
    29f8:	a7 01       	movw	r20, r14
    29fa:	96 01       	movw	r18, r12
    29fc:	0e 94 86 18 	call	0x310c	; 0x310c <__divmodsi4>
    2a00:	da 01       	movw	r26, r20
    2a02:	c9 01       	movw	r24, r18
    2a04:	30 93 c8 07 	sts	0x07C8, r19
    2a08:	20 93 c7 07 	sts	0x07C7, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2a0c:	4a e0       	ldi	r20, 0x0A	; 10
    2a0e:	be 01       	movw	r22, r28
    2a10:	0e 94 ad 19 	call	0x335a	; 0x335a <__itoa_ncheck>
		itoa(tempspeicher, uart_out, 10);
		usart_transmit_string(uart_out);
    2a14:	ce 01       	movw	r24, r28
    2a16:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		while(!(usart_transmit_char(',')));
    2a1a:	8c e2       	ldi	r24, 0x2C	; 44
    2a1c:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    2a20:	88 23       	and	r24, r24
    2a22:	d9 f3       	breq	.-10     	; 0x2a1a <timer_500ms_task+0x3dc>
		tempspeicher = (sint16_t)(bms.temp.temp_transmit[i]%100);	//Temp hinter dem Komma
    2a24:	e0 91 2b 0a 	lds	r30, 0x0A2B
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	ee 0f       	add	r30, r30
    2a2c:	ff 1f       	adc	r31, r31
    2a2e:	ee 0f       	add	r30, r30
    2a30:	ff 1f       	adc	r31, r31
    2a32:	ed 51       	subi	r30, 0x1D	; 29
    2a34:	f6 4f       	sbci	r31, 0xF6	; 246
    2a36:	60 81       	ld	r22, Z
    2a38:	71 81       	ldd	r23, Z+1	; 0x01
    2a3a:	82 81       	ldd	r24, Z+2	; 0x02
    2a3c:	93 81       	ldd	r25, Z+3	; 0x03
    2a3e:	a7 01       	movw	r20, r14
    2a40:	96 01       	movw	r18, r12
    2a42:	0e 94 86 18 	call	0x310c	; 0x310c <__divmodsi4>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	90 93 c8 07 	sts	0x07C8, r25
    2a4e:	80 93 c7 07 	sts	0x07C7, r24
    2a52:	4a e0       	ldi	r20, 0x0A	; 10
    2a54:	be 01       	movw	r22, r28
    2a56:	0e 94 ad 19 	call	0x335a	; 0x335a <__itoa_ncheck>
		itoa(tempspeicher, uart_out, 10);
		usart_transmit_string(uart_out);
    2a5a:	ce 01       	movw	r24, r28
    2a5c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		usart_transmit_string(" C");
    2a60:	89 e4       	ldi	r24, 0x49	; 73
    2a62:	95 e0       	ldi	r25, 0x05	; 5
    2a64:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		tempspeicher=0;
    2a68:	10 92 c8 07 	sts	0x07C8, r1
    2a6c:	10 92 c7 07 	sts	0x07C7, r1
	usart_transmit_string(&uart_out[1]);
	usart_transmit_string(" V\r\n");
	
	
	//Ausgabe der Temperaturen des LTC6804
	for(i=0; i<slave_boards; i++)
    2a70:	80 91 2b 0a 	lds	r24, 0x0A2B
    2a74:	8f 5f       	subi	r24, 0xFF	; 255
    2a76:	80 93 2b 0a 	sts	0x0A2B, r24
    2a7a:	90 91 24 07 	lds	r25, 0x0724
    2a7e:	89 17       	cp	r24, r25
    2a80:	08 f4       	brcc	.+2      	; 0x2a84 <timer_500ms_task+0x446>
    2a82:	98 cf       	rjmp	.-208    	; 0x29b4 <timer_500ms_task+0x376>
		usart_transmit_string(" C");
		tempspeicher=0;
	}

	//Ausgabe des Stroms
	if(curDirect == 1)		//Entladen
    2a84:	80 91 08 07 	lds	r24, 0x0708
    2a88:	81 30       	cpi	r24, 0x01	; 1
    2a8a:	29 f4       	brne	.+10     	; 0x2a96 <timer_500ms_task+0x458>
	{
		usart_transmit_string("\r\n\n Entlade-Strom: ");
    2a8c:	8c e4       	ldi	r24, 0x4C	; 76
    2a8e:	95 e0       	ldi	r25, 0x05	; 5
    2a90:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
    2a94:	06 c0       	rjmp	.+12     	; 0x2aa2 <timer_500ms_task+0x464>
	}
	else if(curDirect==0)	//Laden
    2a96:	81 11       	cpse	r24, r1
    2a98:	04 c0       	rjmp	.+8      	; 0x2aa2 <timer_500ms_task+0x464>
	{
		usart_transmit_string("\r\n\n Lade-Strom: ");
    2a9a:	80 e6       	ldi	r24, 0x60	; 96
    2a9c:	95 e0       	ldi	r25, 0x05	; 5
    2a9e:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	}
	
	if(bms.cur.cur_transmit >= 100000000) // >100A
    2aa2:	60 91 56 09 	lds	r22, 0x0956
    2aa6:	70 91 57 09 	lds	r23, 0x0957
    2aaa:	80 91 58 09 	lds	r24, 0x0958
    2aae:	90 91 59 09 	lds	r25, 0x0959
    2ab2:	61 15       	cp	r22, r1
    2ab4:	e1 ee       	ldi	r30, 0xE1	; 225
    2ab6:	7e 07       	cpc	r23, r30
    2ab8:	e5 ef       	ldi	r30, 0xF5	; 245
    2aba:	8e 07       	cpc	r24, r30
    2abc:	e5 e0       	ldi	r30, 0x05	; 5
    2abe:	9e 07       	cpc	r25, r30
    2ac0:	08 f4       	brcc	.+2      	; 0x2ac4 <timer_500ms_task+0x486>
    2ac2:	42 c0       	rjmp	.+132    	; 0x2b48 <timer_500ms_task+0x50a>
	{
		curSpeicher = (bms.cur.cur_transmit) / 1000000;
    2ac4:	20 e4       	ldi	r18, 0x40	; 64
    2ac6:	32 e4       	ldi	r19, 0x42	; 66
    2ac8:	4f e0       	ldi	r20, 0x0F	; 15
    2aca:	50 e0       	ldi	r21, 0x00	; 0
    2acc:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__udivmodsi4>
    2ad0:	da 01       	movw	r26, r20
    2ad2:	c9 01       	movw	r24, r18
    2ad4:	20 93 27 0a 	sts	0x0A27, r18
    2ad8:	30 93 28 0a 	sts	0x0A28, r19
    2adc:	40 93 29 0a 	sts	0x0A29, r20
    2ae0:	50 93 2a 0a 	sts	0x0A2A, r21
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    2ae4:	4a e0       	ldi	r20, 0x0A	; 10
    2ae6:	6f e3       	ldi	r22, 0x3F	; 63
    2ae8:	77 e0       	ldi	r23, 0x07	; 7
    2aea:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__utoa_ncheck>
		utoa(curSpeicher, uart_out, 10);
		usart_transmit_string(&uart_out[0]);
    2aee:	8f e3       	ldi	r24, 0x3F	; 63
    2af0:	97 e0       	ldi	r25, 0x07	; 7
    2af2:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		while(!(usart_transmit_char(',')));
    2af6:	8c e2       	ldi	r24, 0x2C	; 44
    2af8:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    2afc:	88 23       	and	r24, r24
    2afe:	d9 f3       	breq	.-10     	; 0x2af6 <timer_500ms_task+0x4b8>
		curSpeicher = (bms.cur.cur_transmit) % 1000000;
    2b00:	60 91 56 09 	lds	r22, 0x0956
    2b04:	70 91 57 09 	lds	r23, 0x0957
    2b08:	80 91 58 09 	lds	r24, 0x0958
    2b0c:	90 91 59 09 	lds	r25, 0x0959
    2b10:	20 e4       	ldi	r18, 0x40	; 64
    2b12:	32 e4       	ldi	r19, 0x42	; 66
    2b14:	4f e0       	ldi	r20, 0x0F	; 15
    2b16:	50 e0       	ldi	r21, 0x00	; 0
    2b18:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__udivmodsi4>
    2b1c:	60 93 27 0a 	sts	0x0A27, r22
    2b20:	70 93 28 0a 	sts	0x0A28, r23
    2b24:	80 93 29 0a 	sts	0x0A29, r24
    2b28:	90 93 2a 0a 	sts	0x0A2A, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    2b2c:	2a e0       	ldi	r18, 0x0A	; 10
    2b2e:	4f e3       	ldi	r20, 0x3F	; 63
    2b30:	57 e0       	ldi	r21, 0x07	; 7
    2b32:	0e 94 b8 19 	call	0x3370	; 0x3370 <__ultoa_ncheck>
		ultoa(curSpeicher, uart_out, 10);
		usart_transmit_string(&uart_out[0]);
    2b36:	8f e3       	ldi	r24, 0x3F	; 63
    2b38:	97 e0       	ldi	r25, 0x07	; 7
    2b3a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		usart_transmit_string(" A \r\n\n");
    2b3e:	81 e7       	ldi	r24, 0x71	; 113
    2b40:	95 e0       	ldi	r25, 0x05	; 5
    2b42:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
    2b46:	ca c0       	rjmp	.+404    	; 0x2cdc <timer_500ms_task+0x69e>
	}
	else if (bms.cur.cur_transmit >= 10000000) //>10A
    2b48:	60 38       	cpi	r22, 0x80	; 128
    2b4a:	f6 e9       	ldi	r31, 0x96	; 150
    2b4c:	7f 07       	cpc	r23, r31
    2b4e:	f8 e9       	ldi	r31, 0x98	; 152
    2b50:	8f 07       	cpc	r24, r31
    2b52:	91 05       	cpc	r25, r1
    2b54:	08 f4       	brcc	.+2      	; 0x2b58 <timer_500ms_task+0x51a>
    2b56:	42 c0       	rjmp	.+132    	; 0x2bdc <timer_500ms_task+0x59e>
	{
		curSpeicher = (bms.cur.cur_transmit) / 1000000;
    2b58:	20 e4       	ldi	r18, 0x40	; 64
    2b5a:	32 e4       	ldi	r19, 0x42	; 66
    2b5c:	4f e0       	ldi	r20, 0x0F	; 15
    2b5e:	50 e0       	ldi	r21, 0x00	; 0
    2b60:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__udivmodsi4>
    2b64:	da 01       	movw	r26, r20
    2b66:	c9 01       	movw	r24, r18
    2b68:	20 93 27 0a 	sts	0x0A27, r18
    2b6c:	30 93 28 0a 	sts	0x0A28, r19
    2b70:	40 93 29 0a 	sts	0x0A29, r20
    2b74:	50 93 2a 0a 	sts	0x0A2A, r21
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    2b78:	4a e0       	ldi	r20, 0x0A	; 10
    2b7a:	6f e3       	ldi	r22, 0x3F	; 63
    2b7c:	77 e0       	ldi	r23, 0x07	; 7
    2b7e:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__utoa_ncheck>
		utoa(curSpeicher, uart_out, 10);
		usart_transmit_string(&uart_out[0]);
    2b82:	8f e3       	ldi	r24, 0x3F	; 63
    2b84:	97 e0       	ldi	r25, 0x07	; 7
    2b86:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		while(!(usart_transmit_char(',')));
    2b8a:	8c e2       	ldi	r24, 0x2C	; 44
    2b8c:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    2b90:	88 23       	and	r24, r24
    2b92:	d9 f3       	breq	.-10     	; 0x2b8a <timer_500ms_task+0x54c>
		curSpeicher = (bms.cur.cur_transmit) % 1000000;
    2b94:	60 91 56 09 	lds	r22, 0x0956
    2b98:	70 91 57 09 	lds	r23, 0x0957
    2b9c:	80 91 58 09 	lds	r24, 0x0958
    2ba0:	90 91 59 09 	lds	r25, 0x0959
    2ba4:	20 e4       	ldi	r18, 0x40	; 64
    2ba6:	32 e4       	ldi	r19, 0x42	; 66
    2ba8:	4f e0       	ldi	r20, 0x0F	; 15
    2baa:	50 e0       	ldi	r21, 0x00	; 0
    2bac:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__udivmodsi4>
    2bb0:	60 93 27 0a 	sts	0x0A27, r22
    2bb4:	70 93 28 0a 	sts	0x0A28, r23
    2bb8:	80 93 29 0a 	sts	0x0A29, r24
    2bbc:	90 93 2a 0a 	sts	0x0A2A, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    2bc0:	2a e0       	ldi	r18, 0x0A	; 10
    2bc2:	4f e3       	ldi	r20, 0x3F	; 63
    2bc4:	57 e0       	ldi	r21, 0x07	; 7
    2bc6:	0e 94 b8 19 	call	0x3370	; 0x3370 <__ultoa_ncheck>
		ultoa(curSpeicher, uart_out, 10);
		usart_transmit_string(&uart_out[0]);
    2bca:	8f e3       	ldi	r24, 0x3F	; 63
    2bcc:	97 e0       	ldi	r25, 0x07	; 7
    2bce:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		usart_transmit_string(" A \r\n");
    2bd2:	88 e7       	ldi	r24, 0x78	; 120
    2bd4:	95 e0       	ldi	r25, 0x05	; 5
    2bd6:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
    2bda:	80 c0       	rjmp	.+256    	; 0x2cdc <timer_500ms_task+0x69e>
	}
	else if (bms.cur.cur_transmit >= 1000000) //>1A
    2bdc:	60 34       	cpi	r22, 0x40	; 64
    2bde:	22 e4       	ldi	r18, 0x42	; 66
    2be0:	72 07       	cpc	r23, r18
    2be2:	2f e0       	ldi	r18, 0x0F	; 15
    2be4:	82 07       	cpc	r24, r18
    2be6:	91 05       	cpc	r25, r1
    2be8:	08 f4       	brcc	.+2      	; 0x2bec <timer_500ms_task+0x5ae>
    2bea:	42 c0       	rjmp	.+132    	; 0x2c70 <timer_500ms_task+0x632>
	{
		curSpeicher = (bms.cur.cur_transmit) / 1000000;
    2bec:	20 e4       	ldi	r18, 0x40	; 64
    2bee:	32 e4       	ldi	r19, 0x42	; 66
    2bf0:	4f e0       	ldi	r20, 0x0F	; 15
    2bf2:	50 e0       	ldi	r21, 0x00	; 0
    2bf4:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__udivmodsi4>
    2bf8:	da 01       	movw	r26, r20
    2bfa:	c9 01       	movw	r24, r18
    2bfc:	20 93 27 0a 	sts	0x0A27, r18
    2c00:	30 93 28 0a 	sts	0x0A28, r19
    2c04:	40 93 29 0a 	sts	0x0A29, r20
    2c08:	50 93 2a 0a 	sts	0x0A2A, r21
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    2c0c:	4a e0       	ldi	r20, 0x0A	; 10
    2c0e:	6f e3       	ldi	r22, 0x3F	; 63
    2c10:	77 e0       	ldi	r23, 0x07	; 7
    2c12:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__utoa_ncheck>
		utoa(curSpeicher, uart_out, 10);
		usart_transmit_string(&uart_out[0]);
    2c16:	8f e3       	ldi	r24, 0x3F	; 63
    2c18:	97 e0       	ldi	r25, 0x07	; 7
    2c1a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		while(!(usart_transmit_char(',')));
    2c1e:	8c e2       	ldi	r24, 0x2C	; 44
    2c20:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    2c24:	88 23       	and	r24, r24
    2c26:	d9 f3       	breq	.-10     	; 0x2c1e <timer_500ms_task+0x5e0>
		curSpeicher = (bms.cur.cur_transmit) % 1000000;
    2c28:	60 91 56 09 	lds	r22, 0x0956
    2c2c:	70 91 57 09 	lds	r23, 0x0957
    2c30:	80 91 58 09 	lds	r24, 0x0958
    2c34:	90 91 59 09 	lds	r25, 0x0959
    2c38:	20 e4       	ldi	r18, 0x40	; 64
    2c3a:	32 e4       	ldi	r19, 0x42	; 66
    2c3c:	4f e0       	ldi	r20, 0x0F	; 15
    2c3e:	50 e0       	ldi	r21, 0x00	; 0
    2c40:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__udivmodsi4>
    2c44:	60 93 27 0a 	sts	0x0A27, r22
    2c48:	70 93 28 0a 	sts	0x0A28, r23
    2c4c:	80 93 29 0a 	sts	0x0A29, r24
    2c50:	90 93 2a 0a 	sts	0x0A2A, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    2c54:	2a e0       	ldi	r18, 0x0A	; 10
    2c56:	4f e3       	ldi	r20, 0x3F	; 63
    2c58:	57 e0       	ldi	r21, 0x07	; 7
    2c5a:	0e 94 b8 19 	call	0x3370	; 0x3370 <__ultoa_ncheck>
		ultoa(curSpeicher, uart_out, 10);
		usart_transmit_string(&uart_out[0]);
    2c5e:	8f e3       	ldi	r24, 0x3F	; 63
    2c60:	97 e0       	ldi	r25, 0x07	; 7
    2c62:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		usart_transmit_string(" A \r\n");
    2c66:	88 e7       	ldi	r24, 0x78	; 120
    2c68:	95 e0       	ldi	r25, 0x05	; 5
    2c6a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
    2c6e:	36 c0       	rjmp	.+108    	; 0x2cdc <timer_500ms_task+0x69e>
	}
	else if (bms.cur.cur_transmit >= 100000) //>0.1A
    2c70:	60 3a       	cpi	r22, 0xA0	; 160
    2c72:	76 48       	sbci	r23, 0x86	; 134
    2c74:	81 40       	sbci	r24, 0x01	; 1
    2c76:	91 05       	cpc	r25, r1
    2c78:	40 f1       	brcs	.+80     	; 0x2cca <timer_500ms_task+0x68c>
	{
		while(!(usart_transmit_char('0')));
    2c7a:	80 e3       	ldi	r24, 0x30	; 48
    2c7c:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    2c80:	88 23       	and	r24, r24
    2c82:	d9 f3       	breq	.-10     	; 0x2c7a <timer_500ms_task+0x63c>
		while(!(usart_transmit_char(',')));
    2c84:	8c e2       	ldi	r24, 0x2C	; 44
    2c86:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    2c8a:	88 23       	and	r24, r24
    2c8c:	d9 f3       	breq	.-10     	; 0x2c84 <timer_500ms_task+0x646>
		curSpeicher = (bms.cur.cur_transmit);
    2c8e:	60 91 56 09 	lds	r22, 0x0956
    2c92:	70 91 57 09 	lds	r23, 0x0957
    2c96:	80 91 58 09 	lds	r24, 0x0958
    2c9a:	90 91 59 09 	lds	r25, 0x0959
    2c9e:	60 93 27 0a 	sts	0x0A27, r22
    2ca2:	70 93 28 0a 	sts	0x0A28, r23
    2ca6:	80 93 29 0a 	sts	0x0A29, r24
    2caa:	90 93 2a 0a 	sts	0x0A2A, r25
    2cae:	2a e0       	ldi	r18, 0x0A	; 10
    2cb0:	4f e3       	ldi	r20, 0x3F	; 63
    2cb2:	57 e0       	ldi	r21, 0x07	; 7
    2cb4:	0e 94 b8 19 	call	0x3370	; 0x3370 <__ultoa_ncheck>
		ultoa(curSpeicher, uart_out, 10);
		usart_transmit_string(&uart_out[0]);
    2cb8:	8f e3       	ldi	r24, 0x3F	; 63
    2cba:	97 e0       	ldi	r25, 0x07	; 7
    2cbc:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
		usart_transmit_string(" A \r\n");
    2cc0:	88 e7       	ldi	r24, 0x78	; 120
    2cc2:	95 e0       	ldi	r25, 0x05	; 5
    2cc4:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
    2cc8:	09 c0       	rjmp	.+18     	; 0x2cdc <timer_500ms_task+0x69e>
	}
	else
	{
		while(!(usart_transmit_char('0')));
    2cca:	80 e3       	ldi	r24, 0x30	; 48
    2ccc:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    2cd0:	88 23       	and	r24, r24
    2cd2:	d9 f3       	breq	.-10     	; 0x2cca <timer_500ms_task+0x68c>
		usart_transmit_string(" A \r\n");
    2cd4:	88 e7       	ldi	r24, 0x78	; 120
    2cd6:	95 e0       	ldi	r25, 0x05	; 5
    2cd8:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	}

	//Ausgabe Strom-Status
	if(bms.cur.cur_flag & 0x01)
    2cdc:	80 91 5a 09 	lds	r24, 0x095A
    2ce0:	80 ff       	sbrs	r24, 0
    2ce2:	05 c0       	rjmp	.+10     	; 0x2cee <timer_500ms_task+0x6b0>
	{
		usart_transmit_string(" Strom befindet sich in kritischem Bereich: -2A ... 0A \r\n");
    2ce4:	8e e7       	ldi	r24, 0x7E	; 126
    2ce6:	95 e0       	ldi	r25, 0x05	; 5
    2ce8:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
    2cec:	1b c0       	rjmp	.+54     	; 0x2d24 <timer_500ms_task+0x6e6>
	}
	else if(bms.cur.cur_flag & 0x02)
    2cee:	81 ff       	sbrs	r24, 1
    2cf0:	05 c0       	rjmp	.+10     	; 0x2cfc <timer_500ms_task+0x6be>
	{
		usart_transmit_string(" Fehler: Strom fliesst in den Speicher! \r\n");
    2cf2:	88 eb       	ldi	r24, 0xB8	; 184
    2cf4:	95 e0       	ldi	r25, 0x05	; 5
    2cf6:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
    2cfa:	14 c0       	rjmp	.+40     	; 0x2d24 <timer_500ms_task+0x6e6>
	}
	else if(bms.cur.cur_flag & 0x04)
    2cfc:	82 ff       	sbrs	r24, 2
    2cfe:	05 c0       	rjmp	.+10     	; 0x2d0a <timer_500ms_task+0x6cc>
	{
		usart_transmit_string(" Strom befindet sich in kritischem Bereich: 0A ... +2A \r\n");
    2d00:	83 ee       	ldi	r24, 0xE3	; 227
    2d02:	95 e0       	ldi	r25, 0x05	; 5
    2d04:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
    2d08:	0d c0       	rjmp	.+26     	; 0x2d24 <timer_500ms_task+0x6e6>
	}
	else if(bms.cur.cur_flag & 0x08)
    2d0a:	83 ff       	sbrs	r24, 3
    2d0c:	05 c0       	rjmp	.+10     	; 0x2d18 <timer_500ms_task+0x6da>
	{
		usart_transmit_string(" Fehler: Strom fliesst aus dem Speicher! \r\n");
    2d0e:	8d e1       	ldi	r24, 0x1D	; 29
    2d10:	96 e0       	ldi	r25, 0x06	; 6
    2d12:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
    2d16:	06 c0       	rjmp	.+12     	; 0x2d24 <timer_500ms_task+0x6e6>
	}
	else if(bms.cur.cur_flag & 0x10)
    2d18:	84 ff       	sbrs	r24, 4
    2d1a:	04 c0       	rjmp	.+8      	; 0x2d24 <timer_500ms_task+0x6e6>
	{
		usart_transmit_string(" Fehler: Betriebsbereich ueberschritten! \r\n");
    2d1c:	89 e4       	ldi	r24, 0x49	; 73
    2d1e:	96 e0       	ldi	r25, 0x06	; 6
    2d20:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	}
	// *****************************************************************************************

	// *** Balancing Eingabe via UART **********************************************************
	usart_transmit_string("\r\n Balancing empfohlen an ");
    2d24:	85 e7       	ldi	r24, 0x75	; 117
    2d26:	96 e0       	ldi	r25, 0x06	; 6
    2d28:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	utoa(Rec, uart_out, 10);
    2d2c:	80 91 01 07 	lds	r24, 0x0701
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    2d30:	4a e0       	ldi	r20, 0x0A	; 10
    2d32:	6f e3       	ldi	r22, 0x3F	; 63
    2d34:	77 e0       	ldi	r23, 0x07	; 7
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__utoa_ncheck>
	usart_transmit_string(&uart_out[0]);
    2d3c:	8f e3       	ldi	r24, 0x3F	; 63
    2d3e:	97 e0       	ldi	r25, 0x07	; 7
    2d40:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	usart_transmit_string(" Zellen.");
    2d44:	80 e9       	ldi	r24, 0x90	; 144
    2d46:	96 e0       	ldi	r25, 0x06	; 6
    2d48:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	usart_transmit_string("\r\n Balancing-Mode:    ");
    2d4c:	89 e9       	ldi	r24, 0x99	; 153
    2d4e:	96 e0       	ldi	r25, 0x06	; 6
    2d50:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	while(!(usart_transmit_char(mode)));
    2d54:	80 91 06 01 	lds	r24, 0x0106
    2d58:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <usart_transmit_char>
    2d5c:	88 23       	and	r24, r24
    2d5e:	d1 f3       	breq	.-12     	; 0x2d54 <timer_500ms_task+0x716>
	usart_transmit_string("\r\n <1> Charge ");
    2d60:	80 eb       	ldi	r24, 0xB0	; 176
    2d62:	96 e0       	ldi	r25, 0x06	; 6
    2d64:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
	usart_transmit_string("\r\n <0> Drive ");
    2d68:	8f eb       	ldi	r24, 0xBF	; 191
    2d6a:	96 e0       	ldi	r25, 0x06	; 6
    2d6c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <usart_transmit_string>
    2d70:	0e c0       	rjmp	.+28     	; 0x2d8e <timer_500ms_task+0x750>
    2d72:	cf e3       	ldi	r28, 0x3F	; 63
    2d74:	d7 e0       	ldi	r29, 0x07	; 7
	for(i=0; i<12; i++)
	{
		usart_transmit_string(" \r\n");
		usart_transmit_string(" Zelle ");
		utoa(i+1, uart_out, 10);
		while(!(usart_transmit_char(uart_out[0])));
    2d76:	0c 2f       	mov	r16, r28
    2d78:	1d 2f       	mov	r17, r29
		while(!(usart_transmit_char(uart_out[1])));
    2d7a:	0f 2e       	mov	r0, r31
    2d7c:	f0 e4       	ldi	r31, 0x40	; 64
    2d7e:	ef 2e       	mov	r14, r31
    2d80:	f7 e0       	ldi	r31, 0x07	; 7
    2d82:	ff 2e       	mov	r15, r31
    2d84:	f0 2d       	mov	r31, r0
		usart_transmit_string(": \t");
		
		for(i1=0; i1<slave_boards; i1++)
		{
			if(cells_per_board[i1] & (1<<i))
    2d86:	cc 24       	eor	r12, r12
    2d88:	c3 94       	inc	r12
    2d8a:	d1 2c       	mov	r13, r1
    2d8c:	ef cc       	rjmp	.-1570   	; 0x276c <timer_500ms_task+0x12e>
	while(!(usart_transmit_char(mode)));
	usart_transmit_string("\r\n <1> Charge ");
	usart_transmit_string("\r\n <0> Drive ");
	// *****************************************************************************************

}
    2d8e:	df 91       	pop	r29
    2d90:	cf 91       	pop	r28
    2d92:	1f 91       	pop	r17
    2d94:	0f 91       	pop	r16
    2d96:	ff 90       	pop	r15
    2d98:	ef 90       	pop	r14
    2d9a:	df 90       	pop	r13
    2d9c:	cf 90       	pop	r12
    2d9e:	08 95       	ret

00002da0 <timer_1s_task>:


void timer_1s_task()		//1 Hz
{
    2da0:	08 95       	ret

00002da2 <main_loop_task>:
	//----------------
}


void main_loop_task()
{
    2da2:	08 95       	ret

00002da4 <can_receive_task>:
	//----------------
}


void can_receive_task(can_msg_t msg)
{
    2da4:	cf 92       	push	r12
    2da6:	df 92       	push	r13
    2da8:	ef 92       	push	r14
    2daa:	ff 92       	push	r15
    2dac:	0f 93       	push	r16
    2dae:	1f 93       	push	r17
    2db0:	cf 93       	push	r28
    2db2:	df 93       	push	r29
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	2d 97       	sbiw	r28, 0x0d	; 13
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	de bf       	out	0x3e, r29	; 62
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	cd bf       	out	0x3d, r28	; 61
    2dc4:	c9 82       	std	Y+1, r12	; 0x01
    2dc6:	da 82       	std	Y+2, r13	; 0x02
    2dc8:	eb 82       	std	Y+3, r14	; 0x03
    2dca:	fc 82       	std	Y+4, r15	; 0x04
	switch(msg.id)
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd0:	ab 81       	ldd	r26, Y+3	; 0x03
    2dd2:	bc 81       	ldd	r27, Y+4	; 0x04
    2dd4:	81 30       	cpi	r24, 0x01	; 1
    2dd6:	91 05       	cpc	r25, r1
    2dd8:	a1 05       	cpc	r26, r1
    2dda:	b1 05       	cpc	r27, r1
    2ddc:	31 f0       	breq	.+12     	; 0x2dea <can_receive_task+0x46>
    2dde:	81 15       	cp	r24, r1
    2de0:	91 40       	sbci	r25, 0x01	; 1
    2de2:	a1 05       	cpc	r26, r1
    2de4:	b1 05       	cpc	r27, r1
    2de6:	99 f0       	breq	.+38     	; 0x2e0e <can_receive_task+0x6a>
    2de8:	18 c0       	rjmp	.+48     	; 0x2e1a <can_receive_task+0x76>
	{
		//Für Systemreset reserviert
		//case 0x000: if()
		
		//STM-Flag!
		case 0x001:	STM_flag = msg.data.b[0];
    2dea:	10 93 0d 07 	sts	0x070D, r17
					if((msg.data.b[1] == 1))
    2dee:	21 30       	cpi	r18, 0x01	; 1
    2df0:	31 f4       	brne	.+12     	; 0x2dfe <can_receive_task+0x5a>
						SET_TRUE(flagBalActiv);
    2df2:	e9 ec       	ldi	r30, 0xC9	; 201
    2df4:	f7 e0       	ldi	r31, 0x07	; 7
    2df6:	80 81       	ld	r24, Z
    2df8:	80 64       	ori	r24, 0x40	; 64
    2dfa:	80 83       	st	Z, r24
    2dfc:	05 c0       	rjmp	.+10     	; 0x2e08 <can_receive_task+0x64>
					else
						SET_FALSE(flagBalActiv);
    2dfe:	e9 ec       	ldi	r30, 0xC9	; 201
    2e00:	f7 e0       	ldi	r31, 0x07	; 7
    2e02:	80 81       	ld	r24, Z
    2e04:	8f 7b       	andi	r24, 0xBF	; 191
    2e06:	80 83       	st	Z, r24
					curDirect = msg.data.b[2];
    2e08:	30 93 08 07 	sts	0x0708, r19
					break;
    2e0c:	06 c0       	rjmp	.+12     	; 0x2e1a <can_receive_task+0x76>
	
		//Initialisierung und Testlauf erlaubt!
		case 0x100:	Test_flag = msg.data.b[0];
    2e0e:	10 93 0b 07 	sts	0x070B, r17
					slave = msg.data.b[1];
    2e12:	20 93 09 07 	sts	0x0709, r18
					curDirect = msg.data.b[2];
    2e16:	30 93 08 07 	sts	0x0708, r19
					break;
		
		default: 	break;
	}
}
    2e1a:	2d 96       	adiw	r28, 0x0d	; 13
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61
    2e26:	df 91       	pop	r29
    2e28:	cf 91       	pop	r28
    2e2a:	1f 91       	pop	r17
    2e2c:	0f 91       	pop	r16
    2e2e:	ff 90       	pop	r15
    2e30:	ef 90       	pop	r14
    2e32:	df 90       	pop	r13
    2e34:	cf 90       	pop	r12
    2e36:	08 95       	ret

00002e38 <can_send_task>:

void can_send_task(uint8_t index)
{
    2e38:	5f 92       	push	r5
    2e3a:	6f 92       	push	r6
    2e3c:	7f 92       	push	r7
    2e3e:	8f 92       	push	r8
    2e40:	9f 92       	push	r9
    2e42:	af 92       	push	r10
    2e44:	bf 92       	push	r11
    2e46:	cf 92       	push	r12
    2e48:	df 92       	push	r13
    2e4a:	ef 92       	push	r14
    2e4c:	ff 92       	push	r15
    2e4e:	0f 93       	push	r16
    2e50:	1f 93       	push	r17
    2e52:	cf 93       	push	r28
    2e54:	df 93       	push	r29
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	2d 97       	sbiw	r28, 0x0d	; 13
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, i1;
	u32 transfer;
	can_msg_t msg;
	
	switch(index)			//index 0 - 7 equals bits set in can_tx_flags mask
    2e66:	82 30       	cpi	r24, 0x02	; 2
    2e68:	c9 f0       	breq	.+50     	; 0x2e9c <can_send_task+0x64>
    2e6a:	18 f4       	brcc	.+6      	; 0x2e72 <can_send_task+0x3a>
    2e6c:	88 23       	and	r24, r24
    2e6e:	39 f1       	breq	.+78     	; 0x2ebe <can_send_task+0x86>
    2e70:	15 c1       	rjmp	.+554    	; 0x309c <can_send_task+0x264>
    2e72:	83 30       	cpi	r24, 0x03	; 3
    2e74:	59 f0       	breq	.+22     	; 0x2e8c <can_send_task+0x54>
    2e76:	84 30       	cpi	r24, 0x04	; 4
    2e78:	09 f0       	breq	.+2      	; 0x2e7c <can_send_task+0x44>
    2e7a:	10 c1       	rjmp	.+544    	; 0x309c <can_send_task+0x264>
    2e7c:	91 2c       	mov	r9, r1
						break;
		
		//Temperatur & Status
		case 4:			for(i=0; i<slave_boards; i++)
						{	
							transfer.l = bms.temp.temp_transmit[i];						
    2e7e:	0f 2e       	mov	r0, r31
    2e80:	f9 ec       	ldi	r31, 0xC9	; 201
    2e82:	af 2e       	mov	r10, r31
    2e84:	f7 e0       	ldi	r31, 0x07	; 7
    2e86:	bf 2e       	mov	r11, r31
    2e88:	f0 2d       	mov	r31, r0
    2e8a:	04 c1       	rjmp	.+520    	; 0x3094 <can_send_task+0x25c>
{
	uint8_t i, i1;
	u32 transfer;
	can_msg_t msg;
	
	switch(index)			//index 0 - 7 equals bits set in can_tx_flags mask
    2e8c:	91 2c       	mov	r9, r1
			 			break;
		
		//Balancing & Recommended & Status
		case 3:			for(i=0; i<slave_boards; i++)
						{
							msg.data.b[0] = (GET_LOW_BYTE(bms.balancing.cells[i]));	
    2e8e:	0f 2e       	mov	r0, r31
    2e90:	f9 ec       	ldi	r31, 0xC9	; 201
    2e92:	af 2e       	mov	r10, r31
    2e94:	f7 e0       	ldi	r31, 0x07	; 7
    2e96:	bf 2e       	mov	r11, r31
    2e98:	f0 2d       	mov	r31, r0
    2e9a:	d1 c0       	rjmp	.+418    	; 0x303e <can_send_task+0x206>
						while(!(can_send_message(msg.id, msg.dlc, msg.data.ll)));
						transfer.l = 0;
						break;*/
						
		//Spannungsmesswerte & Status
		case 2: 		for(i=0; i<slave_boards; i++)
    2e9c:	80 91 24 07 	lds	r24, 0x0724
    2ea0:	88 23       	and	r24, r24
    2ea2:	09 f4       	brne	.+2      	; 0x2ea6 <can_send_task+0x6e>
    2ea4:	fb c0       	rjmp	.+502    	; 0x309c <can_send_task+0x264>
    2ea6:	0f 2e       	mov	r0, r31
    2ea8:	ff e0       	ldi	r31, 0x0F	; 15
    2eaa:	7f 2e       	mov	r7, r31
    2eac:	f0 2d       	mov	r31, r0
    2eae:	61 2c       	mov	r6, r1
								msg.data.b[2] = (GET_LOW_BYTE(bms.volt.val[(i*12)+(i1*3)+1]));	
								msg.data.b[3] = (GET_HIGH_BYTE(bms.volt.val[(i*12)+(i1*3)+1]));	
								msg.data.b[4] = (GET_LOW_BYTE(bms.volt.val[(i*12)+(i1*3)+2]));	
								msg.data.b[5] = (GET_HIGH_BYTE(bms.volt.val[(i*12)+(i1*3)+2]));	
								msg.data.b[6] = (i*12)+(i1*3)+3;		//Anzahl der bisher uebertragenen Werte (Die letzten 3 miteinbezogen)
								msg.data.b[7] = bms.bms_flag;
    2eb0:	0f 2e       	mov	r0, r31
    2eb2:	f9 ec       	ldi	r31, 0xC9	; 201
    2eb4:	8f 2e       	mov	r8, r31
    2eb6:	f7 e0       	ldi	r31, 0x07	; 7
    2eb8:	9f 2e       	mov	r9, r31
    2eba:	f0 2d       	mov	r31, r0
    2ebc:	86 c0       	rjmp	.+268    	; 0x2fca <can_send_task+0x192>
	can_msg_t msg;
	
	switch(index)			//index 0 - 7 equals bits set in can_tx_flags mask
	{
		//Freigabesignal & Fehler
		case 0:			msg.data.b[0] = bms.bms_flag;
    2ebe:	80 91 c9 07 	lds	r24, 0x07C9
    2ec2:	8e 83       	std	Y+6, r24	; 0x06
						if((Freigabe_flag == 1) && (Test_flag == 0))
    2ec4:	80 91 0a 07 	lds	r24, 0x070A
    2ec8:	81 30       	cpi	r24, 0x01	; 1
    2eca:	e1 f4       	brne	.+56     	; 0x2f04 <can_send_task+0xcc>
    2ecc:	80 91 0b 07 	lds	r24, 0x070B
    2ed0:	81 11       	cpse	r24, r1
    2ed2:	35 c0       	rjmp	.+106    	; 0x2f3e <can_send_task+0x106>
						{
							msg.data.b[1] = Init_flag;
    2ed4:	80 91 0c 07 	lds	r24, 0x070C
    2ed8:	8f 83       	std	Y+7, r24	; 0x07
							msg.data.b[2] = Test_flag;
    2eda:	18 86       	std	Y+8, r1	; 0x08
							msg.data.b[3] = Freigabe_flag;	
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	89 87       	std	Y+9, r24	; 0x09
							msg.id = 0x002;
			 				msg.dlc = 4;	
							while(!(can_send_message(msg.id, msg.dlc, msg.data.ll)));				
    2ee0:	ce 80       	ldd	r12, Y+6	; 0x06
    2ee2:	df 80       	ldd	r13, Y+7	; 0x07
    2ee4:	e8 84       	ldd	r14, Y+8	; 0x08
    2ee6:	f9 84       	ldd	r15, Y+9	; 0x09
    2ee8:	0a 85       	ldd	r16, Y+10	; 0x0a
    2eea:	1b 85       	ldd	r17, Y+11	; 0x0b
    2eec:	2c 85       	ldd	r18, Y+12	; 0x0c
    2eee:	3d 85       	ldd	r19, Y+13	; 0x0d
    2ef0:	44 e0       	ldi	r20, 0x04	; 4
    2ef2:	62 e0       	ldi	r22, 0x02	; 2
    2ef4:	70 e0       	ldi	r23, 0x00	; 0
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <can_send_message>
    2efe:	88 23       	and	r24, r24
    2f00:	79 f3       	breq	.-34     	; 0x2ee0 <can_send_task+0xa8>
    2f02:	cc c0       	rjmp	.+408    	; 0x309c <can_send_task+0x264>
						}
						else if((Freigabe_flag == 0) && (Test_flag == 1 ))
    2f04:	81 11       	cpse	r24, r1
    2f06:	1b c0       	rjmp	.+54     	; 0x2f3e <can_send_task+0x106>
    2f08:	80 91 0b 07 	lds	r24, 0x070B
    2f0c:	81 30       	cpi	r24, 0x01	; 1
    2f0e:	b9 f4       	brne	.+46     	; 0x2f3e <can_send_task+0x106>
						{
							msg.data.b[1] = Init_flag;							
    2f10:	80 91 0c 07 	lds	r24, 0x070C
    2f14:	8f 83       	std	Y+7, r24	; 0x07
							msg.data.b[2] = Test_flag;
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	88 87       	std	Y+8, r24	; 0x08
							msg.id = 0x002;
							msg.dlc = 3;
							while(!(can_send_message(msg.id, msg.dlc, msg.data.ll)));
    2f1a:	ce 80       	ldd	r12, Y+6	; 0x06
    2f1c:	df 80       	ldd	r13, Y+7	; 0x07
    2f1e:	e8 84       	ldd	r14, Y+8	; 0x08
    2f20:	f9 84       	ldd	r15, Y+9	; 0x09
    2f22:	0a 85       	ldd	r16, Y+10	; 0x0a
    2f24:	1b 85       	ldd	r17, Y+11	; 0x0b
    2f26:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f28:	3d 85       	ldd	r19, Y+13	; 0x0d
    2f2a:	43 e0       	ldi	r20, 0x03	; 3
    2f2c:	62 e0       	ldi	r22, 0x02	; 2
    2f2e:	70 e0       	ldi	r23, 0x00	; 0
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <can_send_message>
    2f38:	88 23       	and	r24, r24
    2f3a:	79 f3       	breq	.-34     	; 0x2f1a <can_send_task+0xe2>
    2f3c:	af c0       	rjmp	.+350    	; 0x309c <can_send_task+0x264>
						}
						else
						{
							msg.data.b[1] = Init_flag;
    2f3e:	80 91 0c 07 	lds	r24, 0x070C
    2f42:	8f 83       	std	Y+7, r24	; 0x07
							msg.id = 0x002;
							msg.dlc = 2;
							while(!(can_send_message(msg.id, msg.dlc, msg.data.ll)));						
    2f44:	ce 80       	ldd	r12, Y+6	; 0x06
    2f46:	df 80       	ldd	r13, Y+7	; 0x07
    2f48:	e8 84       	ldd	r14, Y+8	; 0x08
    2f4a:	f9 84       	ldd	r15, Y+9	; 0x09
    2f4c:	0a 85       	ldd	r16, Y+10	; 0x0a
    2f4e:	1b 85       	ldd	r17, Y+11	; 0x0b
    2f50:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f52:	3d 85       	ldd	r19, Y+13	; 0x0d
    2f54:	42 e0       	ldi	r20, 0x02	; 2
    2f56:	62 e0       	ldi	r22, 0x02	; 2
    2f58:	70 e0       	ldi	r23, 0x00	; 0
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <can_send_message>
    2f62:	88 23       	and	r24, r24
    2f64:	79 f3       	breq	.-34     	; 0x2f44 <can_send_task+0x10c>
    2f66:	9a c0       	rjmp	.+308    	; 0x309c <can_send_task+0x264>
		//Spannungsmesswerte & Status
		case 2: 		for(i=0; i<slave_boards; i++)
						{
							for(i1=0; i1<4; i1++)
							{
								msg.data.b[0] = (GET_LOW_BYTE(bms.volt.val[(i*12)+(i1*3)]));	
    2f68:	f5 01       	movw	r30, r10
    2f6a:	90 81       	ld	r25, Z
    2f6c:	81 81       	ldd	r24, Z+1	; 0x01
    2f6e:	9e 83       	std	Y+6, r25	; 0x06
								msg.data.b[1] = (GET_HIGH_BYTE(bms.volt.val[(i*12)+(i1*3)]));	
    2f70:	8f 83       	std	Y+7, r24	; 0x07
								msg.data.b[2] = (GET_LOW_BYTE(bms.volt.val[(i*12)+(i1*3)+1]));	
    2f72:	92 81       	ldd	r25, Z+2	; 0x02
    2f74:	83 81       	ldd	r24, Z+3	; 0x03
    2f76:	98 87       	std	Y+8, r25	; 0x08
								msg.data.b[3] = (GET_HIGH_BYTE(bms.volt.val[(i*12)+(i1*3)+1]));	
    2f78:	89 87       	std	Y+9, r24	; 0x09
								msg.data.b[4] = (GET_LOW_BYTE(bms.volt.val[(i*12)+(i1*3)+2]));	
    2f7a:	94 81       	ldd	r25, Z+4	; 0x04
    2f7c:	85 81       	ldd	r24, Z+5	; 0x05
    2f7e:	9a 87       	std	Y+10, r25	; 0x0a
								msg.data.b[5] = (GET_HIGH_BYTE(bms.volt.val[(i*12)+(i1*3)+2]));	
    2f80:	8b 87       	std	Y+11, r24	; 0x0b
								msg.data.b[6] = (i*12)+(i1*3)+3;		//Anzahl der bisher uebertragenen Werte (Die letzten 3 miteinbezogen)
    2f82:	5c 86       	std	Y+12, r5	; 0x0c
								msg.data.b[7] = bms.bms_flag;
    2f84:	f4 01       	movw	r30, r8
    2f86:	80 81       	ld	r24, Z
    2f88:	8d 87       	std	Y+13, r24	; 0x0d
								
								msg.id = 0x004;
								msg.dlc = 8;
								while(!(can_send_message(msg.id, msg.dlc, msg.data.ll)));
    2f8a:	ce 80       	ldd	r12, Y+6	; 0x06
    2f8c:	df 80       	ldd	r13, Y+7	; 0x07
    2f8e:	e8 84       	ldd	r14, Y+8	; 0x08
    2f90:	f9 84       	ldd	r15, Y+9	; 0x09
    2f92:	0a 85       	ldd	r16, Y+10	; 0x0a
    2f94:	1b 85       	ldd	r17, Y+11	; 0x0b
    2f96:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f98:	3d 85       	ldd	r19, Y+13	; 0x0d
    2f9a:	48 e0       	ldi	r20, 0x08	; 8
    2f9c:	64 e0       	ldi	r22, 0x04	; 4
    2f9e:	70 e0       	ldi	r23, 0x00	; 0
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <can_send_message>
    2fa8:	88 23       	and	r24, r24
    2faa:	79 f3       	breq	.-34     	; 0x2f8a <can_send_task+0x152>
    2fac:	f6 e0       	ldi	r31, 0x06	; 6
    2fae:	af 0e       	add	r10, r31
    2fb0:	b1 1c       	adc	r11, r1
    2fb2:	23 e0       	ldi	r18, 0x03	; 3
    2fb4:	52 0e       	add	r5, r18
						break;*/
						
		//Spannungsmesswerte & Status
		case 2: 		for(i=0; i<slave_boards; i++)
						{
							for(i1=0; i1<4; i1++)
    2fb6:	57 10       	cpse	r5, r7
    2fb8:	d7 cf       	rjmp	.-82     	; 0x2f68 <can_send_task+0x130>
						while(!(can_send_message(msg.id, msg.dlc, msg.data.ll)));
						transfer.l = 0;
						break;*/
						
		//Spannungsmesswerte & Status
		case 2: 		for(i=0; i<slave_boards; i++)
    2fba:	63 94       	inc	r6
    2fbc:	3c e0       	ldi	r19, 0x0C	; 12
    2fbe:	73 0e       	add	r7, r19
    2fc0:	80 91 24 07 	lds	r24, 0x0724
    2fc4:	68 16       	cp	r6, r24
    2fc6:	08 f0       	brcs	.+2      	; 0x2fca <can_send_task+0x192>
    2fc8:	69 c0       	rjmp	.+210    	; 0x309c <can_send_task+0x264>
						{
							for(i1=0; i1<4; i1++)
							{
								msg.data.b[0] = (GET_LOW_BYTE(bms.volt.val[(i*12)+(i1*3)]));	
    2fca:	86 2d       	mov	r24, r6
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	5c 01       	movw	r10, r24
    2fd0:	aa 0c       	add	r10, r10
    2fd2:	bb 1c       	adc	r11, r11
    2fd4:	8a 0d       	add	r24, r10
    2fd6:	9b 1d       	adc	r25, r11
    2fd8:	88 0f       	add	r24, r24
    2fda:	99 1f       	adc	r25, r25
    2fdc:	88 0f       	add	r24, r24
    2fde:	99 1f       	adc	r25, r25
    2fe0:	88 0f       	add	r24, r24
    2fe2:	99 1f       	adc	r25, r25
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	e5 53       	subi	r30, 0x35	; 53
    2fe8:	f8 4f       	sbci	r31, 0xF8	; 248
    2fea:	5f 01       	movw	r10, r30
    2fec:	0f 2e       	mov	r0, r31
    2fee:	f4 ef       	ldi	r31, 0xF4	; 244
    2ff0:	5f 2e       	mov	r5, r31
    2ff2:	f0 2d       	mov	r31, r0
    2ff4:	57 0c       	add	r5, r7
    2ff6:	b8 cf       	rjmp	.-144    	; 0x2f68 <can_send_task+0x130>
			 			break;
		
		//Balancing & Recommended & Status
		case 3:			for(i=0; i<slave_boards; i++)
						{
							msg.data.b[0] = (GET_LOW_BYTE(bms.balancing.cells[i]));	
    2ff8:	e9 2d       	mov	r30, r9
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	ee 0f       	add	r30, r30
    2ffe:	ff 1f       	adc	r31, r31
    3000:	e5 5a       	subi	r30, 0xA5	; 165
    3002:	f6 4f       	sbci	r31, 0xF6	; 246
    3004:	90 81       	ld	r25, Z
    3006:	81 81       	ldd	r24, Z+1	; 0x01
    3008:	9e 83       	std	Y+6, r25	; 0x06
							msg.data.b[1] = (GET_HIGH_BYTE(bms.balancing.cells[i]));
    300a:	8f 83       	std	Y+7, r24	; 0x07
							msg.data.b[2] = Rec;	
    300c:	80 91 01 07 	lds	r24, 0x0701
    3010:	88 87       	std	Y+8, r24	; 0x08
							msg.data.b[3] = (i+1);
    3012:	93 94       	inc	r9
    3014:	99 86       	std	Y+9, r9	; 0x09
							msg.data.b[4] = bms.bms_flag;	
    3016:	f5 01       	movw	r30, r10
    3018:	80 81       	ld	r24, Z
    301a:	8a 87       	std	Y+10, r24	; 0x0a
							msg.id = 0x005;
							msg.dlc = 5;
							while(!(can_send_message(msg.id, msg.dlc, msg.data.ll)));
    301c:	ce 80       	ldd	r12, Y+6	; 0x06
    301e:	df 80       	ldd	r13, Y+7	; 0x07
    3020:	e8 84       	ldd	r14, Y+8	; 0x08
    3022:	f9 84       	ldd	r15, Y+9	; 0x09
    3024:	0a 85       	ldd	r16, Y+10	; 0x0a
    3026:	1b 85       	ldd	r17, Y+11	; 0x0b
    3028:	2c 85       	ldd	r18, Y+12	; 0x0c
    302a:	3d 85       	ldd	r19, Y+13	; 0x0d
    302c:	45 e0       	ldi	r20, 0x05	; 5
    302e:	65 e0       	ldi	r22, 0x05	; 5
    3030:	70 e0       	ldi	r23, 0x00	; 0
    3032:	80 e0       	ldi	r24, 0x00	; 0
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <can_send_message>
    303a:	88 23       	and	r24, r24
    303c:	79 f3       	breq	.-34     	; 0x301c <can_send_task+0x1e4>
							}						
						}
			 			break;
		
		//Balancing & Recommended & Status
		case 3:			for(i=0; i<slave_boards; i++)
    303e:	80 91 24 07 	lds	r24, 0x0724
    3042:	98 16       	cp	r9, r24
    3044:	c8 f2       	brcs	.-78     	; 0x2ff8 <can_send_task+0x1c0>
    3046:	2a c0       	rjmp	.+84     	; 0x309c <can_send_task+0x264>
						break;
		
		//Temperatur & Status
		case 4:			for(i=0; i<slave_boards; i++)
						{	
							transfer.l = bms.temp.temp_transmit[i];						
    3048:	e9 2d       	mov	r30, r9
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	ee 0f       	add	r30, r30
    304e:	ff 1f       	adc	r31, r31
    3050:	ee 0f       	add	r30, r30
    3052:	ff 1f       	adc	r31, r31
    3054:	ed 51       	subi	r30, 0x1D	; 29
    3056:	f6 4f       	sbci	r31, 0xF6	; 246
    3058:	30 81       	ld	r19, Z
    305a:	21 81       	ldd	r18, Z+1	; 0x01
    305c:	92 81       	ldd	r25, Z+2	; 0x02
    305e:	83 81       	ldd	r24, Z+3	; 0x03
							msg.data.b[0] = transfer.b[0];
    3060:	3e 83       	std	Y+6, r19	; 0x06
							msg.data.b[1] = transfer.b[1];
    3062:	2f 83       	std	Y+7, r18	; 0x07
							msg.data.b[2] = transfer.b[2];
    3064:	98 87       	std	Y+8, r25	; 0x08
							msg.data.b[3] = transfer.b[3];
    3066:	89 87       	std	Y+9, r24	; 0x09
							msg.data.b[4] = (i+1);	
    3068:	93 94       	inc	r9
    306a:	9a 86       	std	Y+10, r9	; 0x0a
							msg.data.b[5] = bms.bms_flag;							
    306c:	f5 01       	movw	r30, r10
    306e:	80 81       	ld	r24, Z
    3070:	8b 87       	std	Y+11, r24	; 0x0b
							msg.id = 0x006;
							msg.dlc = 6;
							while(!(can_send_message(msg.id, msg.dlc, msg.data.ll)));
    3072:	ce 80       	ldd	r12, Y+6	; 0x06
    3074:	df 80       	ldd	r13, Y+7	; 0x07
    3076:	e8 84       	ldd	r14, Y+8	; 0x08
    3078:	f9 84       	ldd	r15, Y+9	; 0x09
    307a:	0a 85       	ldd	r16, Y+10	; 0x0a
    307c:	1b 85       	ldd	r17, Y+11	; 0x0b
    307e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3080:	3d 85       	ldd	r19, Y+13	; 0x0d
    3082:	46 e0       	ldi	r20, 0x06	; 6
    3084:	66 e0       	ldi	r22, 0x06	; 6
    3086:	70 e0       	ldi	r23, 0x00	; 0
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <can_send_message>
    3090:	88 23       	and	r24, r24
    3092:	79 f3       	breq	.-34     	; 0x3072 <can_send_task+0x23a>
							while(!(can_send_message(msg.id, msg.dlc, msg.data.ll)));
						}
						break;
		
		//Temperatur & Status
		case 4:			for(i=0; i<slave_boards; i++)
    3094:	80 91 24 07 	lds	r24, 0x0724
    3098:	98 16       	cp	r9, r24
    309a:	b0 f2       	brcs	.-84     	; 0x3048 <can_send_task+0x210>
		//				can_send_message(msg.id, msg.dlc, msg.data.ll);
		//				break;
		
		default:		break;
	}
}
    309c:	2d 96       	adiw	r28, 0x0d	; 13
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	df 91       	pop	r29
    30aa:	cf 91       	pop	r28
    30ac:	1f 91       	pop	r17
    30ae:	0f 91       	pop	r16
    30b0:	ff 90       	pop	r15
    30b2:	ef 90       	pop	r14
    30b4:	df 90       	pop	r13
    30b6:	cf 90       	pop	r12
    30b8:	bf 90       	pop	r11
    30ba:	af 90       	pop	r10
    30bc:	9f 90       	pop	r9
    30be:	8f 90       	pop	r8
    30c0:	7f 90       	pop	r7
    30c2:	6f 90       	pop	r6
    30c4:	5f 90       	pop	r5
    30c6:	08 95       	ret

000030c8 <__udivmodsi4>:
    30c8:	a1 e2       	ldi	r26, 0x21	; 33
    30ca:	1a 2e       	mov	r1, r26
    30cc:	aa 1b       	sub	r26, r26
    30ce:	bb 1b       	sub	r27, r27
    30d0:	fd 01       	movw	r30, r26
    30d2:	0d c0       	rjmp	.+26     	; 0x30ee <__udivmodsi4_ep>

000030d4 <__udivmodsi4_loop>:
    30d4:	aa 1f       	adc	r26, r26
    30d6:	bb 1f       	adc	r27, r27
    30d8:	ee 1f       	adc	r30, r30
    30da:	ff 1f       	adc	r31, r31
    30dc:	a2 17       	cp	r26, r18
    30de:	b3 07       	cpc	r27, r19
    30e0:	e4 07       	cpc	r30, r20
    30e2:	f5 07       	cpc	r31, r21
    30e4:	20 f0       	brcs	.+8      	; 0x30ee <__udivmodsi4_ep>
    30e6:	a2 1b       	sub	r26, r18
    30e8:	b3 0b       	sbc	r27, r19
    30ea:	e4 0b       	sbc	r30, r20
    30ec:	f5 0b       	sbc	r31, r21

000030ee <__udivmodsi4_ep>:
    30ee:	66 1f       	adc	r22, r22
    30f0:	77 1f       	adc	r23, r23
    30f2:	88 1f       	adc	r24, r24
    30f4:	99 1f       	adc	r25, r25
    30f6:	1a 94       	dec	r1
    30f8:	69 f7       	brne	.-38     	; 0x30d4 <__udivmodsi4_loop>
    30fa:	60 95       	com	r22
    30fc:	70 95       	com	r23
    30fe:	80 95       	com	r24
    3100:	90 95       	com	r25
    3102:	9b 01       	movw	r18, r22
    3104:	ac 01       	movw	r20, r24
    3106:	bd 01       	movw	r22, r26
    3108:	cf 01       	movw	r24, r30
    310a:	08 95       	ret

0000310c <__divmodsi4>:
    310c:	05 2e       	mov	r0, r21
    310e:	97 fb       	bst	r25, 7
    3110:	1e f4       	brtc	.+6      	; 0x3118 <__divmodsi4+0xc>
    3112:	00 94       	com	r0
    3114:	0e 94 9d 18 	call	0x313a	; 0x313a <__negsi2>
    3118:	57 fd       	sbrc	r21, 7
    311a:	07 d0       	rcall	.+14     	; 0x312a <__divmodsi4_neg2>
    311c:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__udivmodsi4>
    3120:	07 fc       	sbrc	r0, 7
    3122:	03 d0       	rcall	.+6      	; 0x312a <__divmodsi4_neg2>
    3124:	4e f4       	brtc	.+18     	; 0x3138 <__divmodsi4_exit>
    3126:	0c 94 9d 18 	jmp	0x313a	; 0x313a <__negsi2>

0000312a <__divmodsi4_neg2>:
    312a:	50 95       	com	r21
    312c:	40 95       	com	r20
    312e:	30 95       	com	r19
    3130:	21 95       	neg	r18
    3132:	3f 4f       	sbci	r19, 0xFF	; 255
    3134:	4f 4f       	sbci	r20, 0xFF	; 255
    3136:	5f 4f       	sbci	r21, 0xFF	; 255

00003138 <__divmodsi4_exit>:
    3138:	08 95       	ret

0000313a <__negsi2>:
    313a:	90 95       	com	r25
    313c:	80 95       	com	r24
    313e:	70 95       	com	r23
    3140:	61 95       	neg	r22
    3142:	7f 4f       	sbci	r23, 0xFF	; 255
    3144:	8f 4f       	sbci	r24, 0xFF	; 255
    3146:	9f 4f       	sbci	r25, 0xFF	; 255
    3148:	08 95       	ret

0000314a <__tablejump2__>:
    314a:	ee 0f       	add	r30, r30
    314c:	ff 1f       	adc	r31, r31

0000314e <__tablejump__>:
    314e:	05 90       	lpm	r0, Z+
    3150:	f4 91       	lpm	r31, Z
    3152:	e0 2d       	mov	r30, r0
    3154:	09 94       	ijmp

00003156 <__moddi3>:
    3156:	68 94       	set
    3158:	01 c0       	rjmp	.+2      	; 0x315c <__divdi3_moddi3>

0000315a <__divdi3>:
    315a:	e8 94       	clt

0000315c <__divdi3_moddi3>:
    315c:	f9 2f       	mov	r31, r25
    315e:	f1 2b       	or	r31, r17
    3160:	12 f0       	brmi	.+4      	; 0x3166 <__divdi3_moddi3+0xa>
    3162:	0c 94 df 18 	jmp	0x31be	; 0x31be <__udivdi3_umoddi3>
    3166:	a0 e0       	ldi	r26, 0x00	; 0
    3168:	b0 e0       	ldi	r27, 0x00	; 0
    316a:	e9 eb       	ldi	r30, 0xB9	; 185
    316c:	f8 e1       	ldi	r31, 0x18	; 24
    316e:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <__prologue_saves__+0xc>
    3172:	09 2e       	mov	r0, r25
    3174:	05 94       	asr	r0
    3176:	22 f4       	brpl	.+8      	; 0x3180 <__divdi3_moddi3+0x24>
    3178:	0e 94 3b 19 	call	0x3276	; 0x3276 <__negdi2>
    317c:	11 23       	and	r17, r17
    317e:	92 f4       	brpl	.+36     	; 0x31a4 <__divdi3_moddi3+0x48>
    3180:	f0 e8       	ldi	r31, 0x80	; 128
    3182:	0f 26       	eor	r0, r31
    3184:	ff ef       	ldi	r31, 0xFF	; 255
    3186:	e0 94       	com	r14
    3188:	f0 94       	com	r15
    318a:	00 95       	com	r16
    318c:	10 95       	com	r17
    318e:	b0 94       	com	r11
    3190:	c0 94       	com	r12
    3192:	d0 94       	com	r13
    3194:	a1 94       	neg	r10
    3196:	bf 0a       	sbc	r11, r31
    3198:	cf 0a       	sbc	r12, r31
    319a:	df 0a       	sbc	r13, r31
    319c:	ef 0a       	sbc	r14, r31
    319e:	ff 0a       	sbc	r15, r31
    31a0:	0f 0b       	sbc	r16, r31
    31a2:	1f 0b       	sbc	r17, r31
    31a4:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <__udivmod64>
    31a8:	07 fc       	sbrc	r0, 7
    31aa:	0e 94 3b 19 	call	0x3276	; 0x3276 <__negdi2>
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
    31b2:	ec e0       	ldi	r30, 0x0C	; 12
    31b4:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__epilogue_restores__+0xc>

000031b8 <__umoddi3>:
    31b8:	68 94       	set
    31ba:	01 c0       	rjmp	.+2      	; 0x31be <__udivdi3_umoddi3>

000031bc <__udivdi3>:
    31bc:	e8 94       	clt

000031be <__udivdi3_umoddi3>:
    31be:	8f 92       	push	r8
    31c0:	9f 92       	push	r9
    31c2:	cf 93       	push	r28
    31c4:	df 93       	push	r29
    31c6:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <__udivmod64>
    31ca:	df 91       	pop	r29
    31cc:	cf 91       	pop	r28
    31ce:	9f 90       	pop	r9
    31d0:	8f 90       	pop	r8
    31d2:	08 95       	ret

000031d4 <__udivmod64>:
    31d4:	88 24       	eor	r8, r8
    31d6:	99 24       	eor	r9, r9
    31d8:	f4 01       	movw	r30, r8
    31da:	e4 01       	movw	r28, r8
    31dc:	b0 e4       	ldi	r27, 0x40	; 64
    31de:	9f 93       	push	r25
    31e0:	aa 27       	eor	r26, r26
    31e2:	9a 15       	cp	r25, r10
    31e4:	8b 04       	cpc	r8, r11
    31e6:	9c 04       	cpc	r9, r12
    31e8:	ed 05       	cpc	r30, r13
    31ea:	fe 05       	cpc	r31, r14
    31ec:	cf 05       	cpc	r28, r15
    31ee:	d0 07       	cpc	r29, r16
    31f0:	a1 07       	cpc	r26, r17
    31f2:	98 f4       	brcc	.+38     	; 0x321a <__udivmod64+0x46>
    31f4:	ad 2f       	mov	r26, r29
    31f6:	dc 2f       	mov	r29, r28
    31f8:	cf 2f       	mov	r28, r31
    31fa:	fe 2f       	mov	r31, r30
    31fc:	e9 2d       	mov	r30, r9
    31fe:	98 2c       	mov	r9, r8
    3200:	89 2e       	mov	r8, r25
    3202:	98 2f       	mov	r25, r24
    3204:	87 2f       	mov	r24, r23
    3206:	76 2f       	mov	r23, r22
    3208:	65 2f       	mov	r22, r21
    320a:	54 2f       	mov	r21, r20
    320c:	43 2f       	mov	r20, r19
    320e:	32 2f       	mov	r19, r18
    3210:	22 27       	eor	r18, r18
    3212:	b8 50       	subi	r27, 0x08	; 8
    3214:	31 f7       	brne	.-52     	; 0x31e2 <__udivmod64+0xe>
    3216:	bf 91       	pop	r27
    3218:	27 c0       	rjmp	.+78     	; 0x3268 <__udivmod64+0x94>
    321a:	1b 2e       	mov	r1, r27
    321c:	bf 91       	pop	r27
    321e:	bb 27       	eor	r27, r27
    3220:	22 0f       	add	r18, r18
    3222:	33 1f       	adc	r19, r19
    3224:	44 1f       	adc	r20, r20
    3226:	55 1f       	adc	r21, r21
    3228:	66 1f       	adc	r22, r22
    322a:	77 1f       	adc	r23, r23
    322c:	88 1f       	adc	r24, r24
    322e:	99 1f       	adc	r25, r25
    3230:	88 1c       	adc	r8, r8
    3232:	99 1c       	adc	r9, r9
    3234:	ee 1f       	adc	r30, r30
    3236:	ff 1f       	adc	r31, r31
    3238:	cc 1f       	adc	r28, r28
    323a:	dd 1f       	adc	r29, r29
    323c:	aa 1f       	adc	r26, r26
    323e:	bb 1f       	adc	r27, r27
    3240:	8a 14       	cp	r8, r10
    3242:	9b 04       	cpc	r9, r11
    3244:	ec 05       	cpc	r30, r12
    3246:	fd 05       	cpc	r31, r13
    3248:	ce 05       	cpc	r28, r14
    324a:	df 05       	cpc	r29, r15
    324c:	a0 07       	cpc	r26, r16
    324e:	b1 07       	cpc	r27, r17
    3250:	48 f0       	brcs	.+18     	; 0x3264 <__udivmod64+0x90>
    3252:	8a 18       	sub	r8, r10
    3254:	9b 08       	sbc	r9, r11
    3256:	ec 09       	sbc	r30, r12
    3258:	fd 09       	sbc	r31, r13
    325a:	ce 09       	sbc	r28, r14
    325c:	df 09       	sbc	r29, r15
    325e:	a0 0b       	sbc	r26, r16
    3260:	b1 0b       	sbc	r27, r17
    3262:	21 60       	ori	r18, 0x01	; 1
    3264:	1a 94       	dec	r1
    3266:	e1 f6       	brne	.-72     	; 0x3220 <__udivmod64+0x4c>
    3268:	2e f4       	brtc	.+10     	; 0x3274 <__udivmod64+0xa0>
    326a:	94 01       	movw	r18, r8
    326c:	af 01       	movw	r20, r30
    326e:	be 01       	movw	r22, r28
    3270:	cd 01       	movw	r24, r26
    3272:	00 0c       	add	r0, r0
    3274:	08 95       	ret

00003276 <__negdi2>:
    3276:	60 95       	com	r22
    3278:	70 95       	com	r23
    327a:	80 95       	com	r24
    327c:	90 95       	com	r25
    327e:	30 95       	com	r19
    3280:	40 95       	com	r20
    3282:	50 95       	com	r21
    3284:	21 95       	neg	r18
    3286:	3f 4f       	sbci	r19, 0xFF	; 255
    3288:	4f 4f       	sbci	r20, 0xFF	; 255
    328a:	5f 4f       	sbci	r21, 0xFF	; 255
    328c:	6f 4f       	sbci	r22, 0xFF	; 255
    328e:	7f 4f       	sbci	r23, 0xFF	; 255
    3290:	8f 4f       	sbci	r24, 0xFF	; 255
    3292:	9f 4f       	sbci	r25, 0xFF	; 255
    3294:	08 95       	ret

00003296 <__prologue_saves__>:
    3296:	2f 92       	push	r2
    3298:	3f 92       	push	r3
    329a:	4f 92       	push	r4
    329c:	5f 92       	push	r5
    329e:	6f 92       	push	r6
    32a0:	7f 92       	push	r7
    32a2:	8f 92       	push	r8
    32a4:	9f 92       	push	r9
    32a6:	af 92       	push	r10
    32a8:	bf 92       	push	r11
    32aa:	cf 92       	push	r12
    32ac:	df 92       	push	r13
    32ae:	ef 92       	push	r14
    32b0:	ff 92       	push	r15
    32b2:	0f 93       	push	r16
    32b4:	1f 93       	push	r17
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
    32be:	ca 1b       	sub	r28, r26
    32c0:	db 0b       	sbc	r29, r27
    32c2:	0f b6       	in	r0, 0x3f	; 63
    32c4:	f8 94       	cli
    32c6:	de bf       	out	0x3e, r29	; 62
    32c8:	0f be       	out	0x3f, r0	; 63
    32ca:	cd bf       	out	0x3d, r28	; 61
    32cc:	09 94       	ijmp

000032ce <__epilogue_restores__>:
    32ce:	2a 88       	ldd	r2, Y+18	; 0x12
    32d0:	39 88       	ldd	r3, Y+17	; 0x11
    32d2:	48 88       	ldd	r4, Y+16	; 0x10
    32d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    32d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    32d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    32da:	8c 84       	ldd	r8, Y+12	; 0x0c
    32dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    32de:	aa 84       	ldd	r10, Y+10	; 0x0a
    32e0:	b9 84       	ldd	r11, Y+9	; 0x09
    32e2:	c8 84       	ldd	r12, Y+8	; 0x08
    32e4:	df 80       	ldd	r13, Y+7	; 0x07
    32e6:	ee 80       	ldd	r14, Y+6	; 0x06
    32e8:	fd 80       	ldd	r15, Y+5	; 0x05
    32ea:	0c 81       	ldd	r16, Y+4	; 0x04
    32ec:	1b 81       	ldd	r17, Y+3	; 0x03
    32ee:	aa 81       	ldd	r26, Y+2	; 0x02
    32f0:	b9 81       	ldd	r27, Y+1	; 0x01
    32f2:	ce 0f       	add	r28, r30
    32f4:	d1 1d       	adc	r29, r1
    32f6:	0f b6       	in	r0, 0x3f	; 63
    32f8:	f8 94       	cli
    32fa:	de bf       	out	0x3e, r29	; 62
    32fc:	0f be       	out	0x3f, r0	; 63
    32fe:	cd bf       	out	0x3d, r28	; 61
    3300:	ed 01       	movw	r28, r26
    3302:	08 95       	ret

00003304 <__ashldi3>:
    3304:	0f 93       	push	r16
    3306:	08 30       	cpi	r16, 0x08	; 8
    3308:	90 f0       	brcs	.+36     	; 0x332e <__ashldi3+0x2a>
    330a:	98 2f       	mov	r25, r24
    330c:	87 2f       	mov	r24, r23
    330e:	76 2f       	mov	r23, r22
    3310:	65 2f       	mov	r22, r21
    3312:	54 2f       	mov	r21, r20
    3314:	43 2f       	mov	r20, r19
    3316:	32 2f       	mov	r19, r18
    3318:	22 27       	eor	r18, r18
    331a:	08 50       	subi	r16, 0x08	; 8
    331c:	f4 cf       	rjmp	.-24     	; 0x3306 <__ashldi3+0x2>
    331e:	22 0f       	add	r18, r18
    3320:	33 1f       	adc	r19, r19
    3322:	44 1f       	adc	r20, r20
    3324:	55 1f       	adc	r21, r21
    3326:	66 1f       	adc	r22, r22
    3328:	77 1f       	adc	r23, r23
    332a:	88 1f       	adc	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	0a 95       	dec	r16
    3330:	b2 f7       	brpl	.-20     	; 0x331e <__ashldi3+0x1a>
    3332:	0f 91       	pop	r16
    3334:	08 95       	ret

00003336 <__adddi3>:
    3336:	2a 0d       	add	r18, r10
    3338:	3b 1d       	adc	r19, r11
    333a:	4c 1d       	adc	r20, r12
    333c:	5d 1d       	adc	r21, r13
    333e:	6e 1d       	adc	r22, r14
    3340:	7f 1d       	adc	r23, r15
    3342:	80 1f       	adc	r24, r16
    3344:	91 1f       	adc	r25, r17
    3346:	08 95       	ret

00003348 <__subdi3>:
    3348:	2a 19       	sub	r18, r10
    334a:	3b 09       	sbc	r19, r11
    334c:	4c 09       	sbc	r20, r12
    334e:	5d 09       	sbc	r21, r13
    3350:	6e 09       	sbc	r22, r14
    3352:	7f 09       	sbc	r23, r15
    3354:	80 0b       	sbc	r24, r16
    3356:	91 0b       	sbc	r25, r17
    3358:	08 95       	ret

0000335a <__itoa_ncheck>:
    335a:	bb 27       	eor	r27, r27
    335c:	4a 30       	cpi	r20, 0x0A	; 10
    335e:	31 f4       	brne	.+12     	; 0x336c <__itoa_ncheck+0x12>
    3360:	99 23       	and	r25, r25
    3362:	22 f4       	brpl	.+8      	; 0x336c <__itoa_ncheck+0x12>
    3364:	bd e2       	ldi	r27, 0x2D	; 45
    3366:	90 95       	com	r25
    3368:	81 95       	neg	r24
    336a:	9f 4f       	sbci	r25, 0xFF	; 255
    336c:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__utoa_common>

00003370 <__ultoa_ncheck>:
    3370:	bb 27       	eor	r27, r27

00003372 <__ultoa_common>:
    3372:	fa 01       	movw	r30, r20
    3374:	a6 2f       	mov	r26, r22
    3376:	62 17       	cp	r22, r18
    3378:	71 05       	cpc	r23, r1
    337a:	81 05       	cpc	r24, r1
    337c:	91 05       	cpc	r25, r1
    337e:	33 0b       	sbc	r19, r19
    3380:	30 fb       	bst	r19, 0
    3382:	66 f0       	brts	.+24     	; 0x339c <__ultoa_common+0x2a>
    3384:	aa 27       	eor	r26, r26
    3386:	66 0f       	add	r22, r22
    3388:	77 1f       	adc	r23, r23
    338a:	88 1f       	adc	r24, r24
    338c:	99 1f       	adc	r25, r25
    338e:	aa 1f       	adc	r26, r26
    3390:	a2 17       	cp	r26, r18
    3392:	10 f0       	brcs	.+4      	; 0x3398 <__ultoa_common+0x26>
    3394:	a2 1b       	sub	r26, r18
    3396:	63 95       	inc	r22
    3398:	38 50       	subi	r19, 0x08	; 8
    339a:	a9 f7       	brne	.-22     	; 0x3386 <__ultoa_common+0x14>
    339c:	a0 5d       	subi	r26, 0xD0	; 208
    339e:	aa 33       	cpi	r26, 0x3A	; 58
    33a0:	08 f0       	brcs	.+2      	; 0x33a4 <__ultoa_common+0x32>
    33a2:	a9 5d       	subi	r26, 0xD9	; 217
    33a4:	a1 93       	st	Z+, r26
    33a6:	36 f7       	brtc	.-52     	; 0x3374 <__ultoa_common+0x2>
    33a8:	b1 11       	cpse	r27, r1
    33aa:	b1 93       	st	Z+, r27
    33ac:	10 82       	st	Z, r1
    33ae:	ca 01       	movw	r24, r20
    33b0:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <strrev>

000033b4 <__utoa_ncheck>:
    33b4:	bb 27       	eor	r27, r27

000033b6 <__utoa_common>:
    33b6:	fb 01       	movw	r30, r22
    33b8:	55 27       	eor	r21, r21
    33ba:	aa 27       	eor	r26, r26
    33bc:	88 0f       	add	r24, r24
    33be:	99 1f       	adc	r25, r25
    33c0:	aa 1f       	adc	r26, r26
    33c2:	a4 17       	cp	r26, r20
    33c4:	10 f0       	brcs	.+4      	; 0x33ca <__utoa_common+0x14>
    33c6:	a4 1b       	sub	r26, r20
    33c8:	83 95       	inc	r24
    33ca:	50 51       	subi	r21, 0x10	; 16
    33cc:	b9 f7       	brne	.-18     	; 0x33bc <__utoa_common+0x6>
    33ce:	a0 5d       	subi	r26, 0xD0	; 208
    33d0:	aa 33       	cpi	r26, 0x3A	; 58
    33d2:	08 f0       	brcs	.+2      	; 0x33d6 <__utoa_common+0x20>
    33d4:	a9 5d       	subi	r26, 0xD9	; 217
    33d6:	a1 93       	st	Z+, r26
    33d8:	00 97       	sbiw	r24, 0x00	; 0
    33da:	79 f7       	brne	.-34     	; 0x33ba <__utoa_common+0x4>
    33dc:	b1 11       	cpse	r27, r1
    33de:	b1 93       	st	Z+, r27
    33e0:	11 92       	st	Z+, r1
    33e2:	cb 01       	movw	r24, r22
    33e4:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <strrev>

000033e8 <strrev>:
    33e8:	dc 01       	movw	r26, r24
    33ea:	fc 01       	movw	r30, r24
    33ec:	67 2f       	mov	r22, r23
    33ee:	71 91       	ld	r23, Z+
    33f0:	77 23       	and	r23, r23
    33f2:	e1 f7       	brne	.-8      	; 0x33ec <strrev+0x4>
    33f4:	32 97       	sbiw	r30, 0x02	; 2
    33f6:	04 c0       	rjmp	.+8      	; 0x3400 <strrev+0x18>
    33f8:	7c 91       	ld	r23, X
    33fa:	6d 93       	st	X+, r22
    33fc:	70 83       	st	Z, r23
    33fe:	62 91       	ld	r22, -Z
    3400:	ae 17       	cp	r26, r30
    3402:	bf 07       	cpc	r27, r31
    3404:	c8 f3       	brcs	.-14     	; 0x33f8 <strrev+0x10>
    3406:	08 95       	ret

00003408 <_exit>:
    3408:	f8 94       	cli

0000340a <__stop_program>:
    340a:	ff cf       	rjmp	.-2      	; 0x340a <__stop_program>
