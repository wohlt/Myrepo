
BMS_Master_Welzmiller_6_2(6).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005f0  00800100  0000340a  0000349e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000340a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000340  008006f0  008006f0  00003a8e  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00003a8e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003af0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00003b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004136  00000000  00000000  00003e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f2d  00000000  00000000  00007f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001233  00000000  00000000  00008e83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a68  00000000  00000000  0000a0b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b59  00000000  00000000  0000ab20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000359e  00000000  00000000  0000b679  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000ec17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__ctors_end>
       4:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
       8:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
       c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      10:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      14:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      18:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      1c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      20:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      24:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      28:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      2c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      30:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      34:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      38:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__vector_14>
      3c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      40:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      44:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      48:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      4c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      50:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__vector_20>
      54:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      58:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      5c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      60:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      64:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      68:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__vector_26>
      6c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      70:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      74:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      78:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      7c:	d3 0d       	add	r29, r3
      7e:	dd 0d       	add	r29, r13
      80:	d5 0d       	add	r29, r5
      82:	f8 0d       	add	r31, r8
      84:	cb 0d       	add	r28, r11
      86:	cd 0d       	add	r28, r13
      88:	cf 0d       	add	r28, r15
      8a:	d1 0d       	add	r29, r1
      8c:	d7 0d       	add	r29, r7
      8e:	d9 0d       	add	r29, r9
      90:	db 0d       	add	r29, r11
      92:	f1 0d       	add	r31, r1
      94:	f3 0d       	add	r31, r3
      96:	f5 0d       	add	r31, r5
      98:	f7 0d       	add	r31, r7
      9a:	f8 0d       	add	r31, r8
      9c:	f8 0d       	add	r31, r8
      9e:	f8 0d       	add	r31, r8
      a0:	f8 0d       	add	r31, r8
      a2:	f8 0d       	add	r31, r8
      a4:	f8 0d       	add	r31, r8
      a6:	f8 0d       	add	r31, r8
      a8:	f8 0d       	add	r31, r8
      aa:	f8 0d       	add	r31, r8
      ac:	f8 0d       	add	r31, r8
      ae:	f8 0d       	add	r31, r8
      b0:	f8 0d       	add	r31, r8
      b2:	f8 0d       	add	r31, r8
      b4:	f8 0d       	add	r31, r8
      b6:	f8 0d       	add	r31, r8
      b8:	f8 0d       	add	r31, r8
      ba:	f8 0d       	add	r31, r8
      bc:	f8 0d       	add	r31, r8
      be:	f8 0d       	add	r31, r8
      c0:	f8 0d       	add	r31, r8
      c2:	f8 0d       	add	r31, r8
      c4:	f8 0d       	add	r31, r8
      c6:	f8 0d       	add	r31, r8
      c8:	f8 0d       	add	r31, r8
      ca:	f8 0d       	add	r31, r8
      cc:	f8 0d       	add	r31, r8
      ce:	f8 0d       	add	r31, r8
      d0:	f8 0d       	add	r31, r8
      d2:	f8 0d       	add	r31, r8
      d4:	f8 0d       	add	r31, r8
      d6:	f8 0d       	add	r31, r8
      d8:	f8 0d       	add	r31, r8
      da:	f8 0d       	add	r31, r8
      dc:	f8 0d       	add	r31, r8
      de:	f8 0d       	add	r31, r8
      e0:	f8 0d       	add	r31, r8
      e2:	f8 0d       	add	r31, r8
      e4:	f8 0d       	add	r31, r8
      e6:	f8 0d       	add	r31, r8
      e8:	f8 0d       	add	r31, r8
      ea:	f8 0d       	add	r31, r8
      ec:	f8 0d       	add	r31, r8
      ee:	f8 0d       	add	r31, r8
      f0:	f8 0d       	add	r31, r8
      f2:	f8 0d       	add	r31, r8
      f4:	f8 0d       	add	r31, r8
      f6:	f8 0d       	add	r31, r8
      f8:	f8 0d       	add	r31, r8
      fa:	f8 0d       	add	r31, r8
      fc:	f8 0d       	add	r31, r8
      fe:	f8 0d       	add	r31, r8
     100:	f8 0d       	add	r31, r8
     102:	f8 0d       	add	r31, r8
     104:	f8 0d       	add	r31, r8
     106:	f8 0d       	add	r31, r8
     108:	f8 0d       	add	r31, r8
     10a:	f8 0d       	add	r31, r8
     10c:	f8 0d       	add	r31, r8
     10e:	f8 0d       	add	r31, r8
     110:	f8 0d       	add	r31, r8
     112:	f8 0d       	add	r31, r8
     114:	f8 0d       	add	r31, r8
     116:	f8 0d       	add	r31, r8
     118:	f8 0d       	add	r31, r8
     11a:	f8 0d       	add	r31, r8
     11c:	f8 0d       	add	r31, r8
     11e:	f8 0d       	add	r31, r8
     120:	f8 0d       	add	r31, r8
     122:	f8 0d       	add	r31, r8
     124:	f8 0d       	add	r31, r8
     126:	f8 0d       	add	r31, r8
     128:	f8 0d       	add	r31, r8
     12a:	f8 0d       	add	r31, r8
     12c:	f8 0d       	add	r31, r8
     12e:	f8 0d       	add	r31, r8
     130:	f8 0d       	add	r31, r8
     132:	f8 0d       	add	r31, r8
     134:	f8 0d       	add	r31, r8
     136:	f8 0d       	add	r31, r8
     138:	f8 0d       	add	r31, r8
     13a:	f8 0d       	add	r31, r8
     13c:	f8 0d       	add	r31, r8
     13e:	f8 0d       	add	r31, r8
     140:	f8 0d       	add	r31, r8
     142:	f8 0d       	add	r31, r8
     144:	f8 0d       	add	r31, r8
     146:	ef 0d       	add	r30, r15
     148:	f8 0d       	add	r31, r8
     14a:	ed 0d       	add	r30, r13
     14c:	eb 0d       	add	r30, r11
     14e:	e9 0d       	add	r30, r9
     150:	e7 0d       	add	r30, r7
     152:	e5 0d       	add	r30, r5
     154:	e3 0d       	add	r30, r3
     156:	e1 0d       	add	r30, r1
     158:	df 0d       	add	r29, r15

0000015a <__ctors_end>:
     15a:	11 24       	eor	r1, r1
     15c:	1f be       	out	0x3f, r1	; 63
     15e:	cf ef       	ldi	r28, 0xFF	; 255
     160:	d0 e1       	ldi	r29, 0x10	; 16
     162:	de bf       	out	0x3e, r29	; 62
     164:	cd bf       	out	0x3d, r28	; 61

00000166 <__do_copy_data>:
     166:	16 e0       	ldi	r17, 0x06	; 6
     168:	a0 e0       	ldi	r26, 0x00	; 0
     16a:	b1 e0       	ldi	r27, 0x01	; 1
     16c:	ea e0       	ldi	r30, 0x0A	; 10
     16e:	f4 e3       	ldi	r31, 0x34	; 52
     170:	02 c0       	rjmp	.+4      	; 0x176 <__do_copy_data+0x10>
     172:	05 90       	lpm	r0, Z+
     174:	0d 92       	st	X+, r0
     176:	a0 3f       	cpi	r26, 0xF0	; 240
     178:	b1 07       	cpc	r27, r17
     17a:	d9 f7       	brne	.-10     	; 0x172 <__do_copy_data+0xc>

0000017c <__do_clear_bss>:
     17c:	2a e0       	ldi	r18, 0x0A	; 10
     17e:	a0 ef       	ldi	r26, 0xF0	; 240
     180:	b6 e0       	ldi	r27, 0x06	; 6
     182:	01 c0       	rjmp	.+2      	; 0x186 <.do_clear_bss_start>

00000184 <.do_clear_bss_loop>:
     184:	1d 92       	st	X+, r1

00000186 <.do_clear_bss_start>:
     186:	a0 33       	cpi	r26, 0x30	; 48
     188:	b2 07       	cpc	r27, r18
     18a:	e1 f7       	brne	.-8      	; 0x184 <.do_clear_bss_loop>
     18c:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <main>
     190:	0c 94 03 1a 	jmp	0x3406	; 0x3406 <_exit>

00000194 <__bad_interrupt>:
     194:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000198 <adc_init>:
void adc_init(void) {
 
  uint16_t result;
 
  // reference Voltage = intern Voltage = 5V
  ADMUX = (0<<REFS1) | (1<<REFS0);
     198:	80 e4       	ldi	r24, 0x40	; 64
     19a:	80 93 7c 00 	sts	0x007C, r24
  
  //ADCSRB |= (1<<AREFEN);  //AREF Pin aktivieren - Stabilisierung der Referenzspannung durch externe Kapazität

    
  ADCSRA = (1<<ADPS2)|(0<<ADPS1)|(0<<ADPS0);     // Prescaler auf 16 setzen -> 1 MHz ADC-Takt bei 16 MHz CPU-Takt
     19e:	ea e7       	ldi	r30, 0x7A	; 122
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	84 e0       	ldi	r24, 0x04	; 4
     1a4:	80 83       	st	Z, r24
  ADCSRA |= (1<<ADEN);							 // ADC aktivieren
     1a6:	80 81       	ld	r24, Z
     1a8:	80 68       	ori	r24, 0x80	; 128
     1aa:	80 83       	st	Z, r24
 
  /* nach Aktivieren des ADC wird ein "Dummy-Readout" empfohlen, man liest
     also einen Wert und verwirft diesen, um den ADC "warmlaufen zu lassen" */
 
  ADCSRA |= (1<<ADSC);                  // eine ADC-Wandlung 
     1ac:	80 81       	ld	r24, Z
     1ae:	80 64       	ori	r24, 0x40	; 64
     1b0:	80 83       	st	Z, r24
  while (ADCSRA & (1<<ADSC) ) {}        // auf Abschluss der Konvertierung warten
     1b2:	80 81       	ld	r24, Z
     1b4:	86 fd       	sbrc	r24, 6
     1b6:	fd cf       	rjmp	.-6      	; 0x1b2 <adc_init+0x1a>
  /* ADCW muss einmal gelesen werden, sonst wird Ergebnis der nächsten
     Wandlung nicht übernommen. */
  result = ADCW;
     1b8:	80 91 78 00 	lds	r24, 0x0078
     1bc:	90 91 79 00 	lds	r25, 0x0079
     1c0:	08 95       	ret

000001c2 <adc_background_read_init>:


void adc_background_read_init(uint16_t channelmask)
{	

	adc_channelmask = channelmask;
     1c2:	90 93 f3 06 	sts	0x06F3, r25
     1c6:	80 93 f2 06 	sts	0x06F2, r24
	adc_current_channel = 0;
     1ca:	10 92 f4 06 	sts	0x06F4, r1
	while(!(channelmask & 0x01))
     1ce:	80 fd       	sbrc	r24, 0
     1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <adc_background_read_init+0x26>
     1d2:	21 e0       	ldi	r18, 0x01	; 1
	{
		channelmask >>= 1;
     1d4:	96 95       	lsr	r25
     1d6:	87 95       	ror	r24
     1d8:	31 e0       	ldi	r19, 0x01	; 1
     1da:	32 0f       	add	r19, r18
void adc_background_read_init(uint16_t channelmask)
{	

	adc_channelmask = channelmask;
	adc_current_channel = 0;
	while(!(channelmask & 0x01))
     1dc:	80 fd       	sbrc	r24, 0
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <adc_background_read_init+0x22>
     1e0:	23 2f       	mov	r18, r19
     1e2:	f8 cf       	rjmp	.-16     	; 0x1d4 <adc_background_read_init+0x12>
     1e4:	20 93 f4 06 	sts	0x06F4, r18
		channelmask >>= 1;
		adc_current_channel++;
	}
	
	//start first conversion
	ADMUX = (ADMUX & ~(0x1F)) | (adc_current_channel & 0x1F);	//switch MUX to new channel
     1e8:	ec e7       	ldi	r30, 0x7C	; 124
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	80 81       	ld	r24, Z
     1ee:	90 91 f4 06 	lds	r25, 0x06F4
     1f2:	9f 71       	andi	r25, 0x1F	; 31
     1f4:	80 7e       	andi	r24, 0xE0	; 224
     1f6:	89 2b       	or	r24, r25
     1f8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);												//start single conversion
     1fa:	ea e7       	ldi	r30, 0x7A	; 122
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	80 64       	ori	r24, 0x40	; 64
     202:	80 83       	st	Z, r24
	adc_bgmode_enabled = 1;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	80 93 f5 06 	sts	0x06F5, r24
     20a:	08 95       	ret

0000020c <adc_task>:
}


void adc_task()
{
	if (adc_bgmode_enabled)
     20c:	80 91 f5 06 	lds	r24, 0x06F5
     210:	88 23       	and	r24, r24
     212:	09 f4       	brne	.+2      	; 0x216 <adc_task+0xa>
     214:	47 c0       	rjmp	.+142    	; 0x2a4 <adc_task+0x98>
	{
		if (!(ADCSRA & (1<<ADSC)))	//last conversion completed, ADC inactive
     216:	80 91 7a 00 	lds	r24, 0x007A
     21a:	86 fd       	sbrc	r24, 6
     21c:	43 c0       	rjmp	.+134    	; 0x2a4 <adc_task+0x98>
		{
			adc_buffer[adc_current_channel] = ADCW;			//store converted ADC Value
     21e:	40 91 f4 06 	lds	r20, 0x06F4
     222:	e4 2f       	mov	r30, r20
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	80 91 78 00 	lds	r24, 0x0078
     22a:	90 91 79 00 	lds	r25, 0x0079
     22e:	ee 0f       	add	r30, r30
     230:	ff 1f       	adc	r31, r31
     232:	e0 5f       	subi	r30, 0xF0	; 240
     234:	f8 4f       	sbci	r31, 0xF8	; 248
     236:	91 83       	std	Z+1, r25	; 0x01
     238:	80 83       	st	Z, r24
			adc_flags |= (1<<adc_current_channel);			//set corresponding Flag
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	04 2e       	mov	r0, r20
     240:	02 c0       	rjmp	.+4      	; 0x246 <adc_task+0x3a>
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	0a 94       	dec	r0
     248:	e2 f7       	brpl	.-8      	; 0x242 <adc_task+0x36>
     24a:	20 91 f0 06 	lds	r18, 0x06F0
     24e:	30 91 f1 06 	lds	r19, 0x06F1
     252:	82 2b       	or	r24, r18
     254:	93 2b       	or	r25, r19
     256:	90 93 f1 06 	sts	0x06F1, r25
     25a:	80 93 f0 06 	sts	0x06F0, r24
			
			adc_current_channel++;							//select next channel
			while (!((adc_channelmask >> adc_current_channel) & 0x0001))	//channel not active? -> check channelmask.
     25e:	20 91 f2 06 	lds	r18, 0x06F2
     262:	30 91 f3 06 	lds	r19, 0x06F3
     266:	4f 5f       	subi	r20, 0xFF	; 255
				{
					adc_current_channel++;					//select next channel
				}
				else
				{
					adc_current_channel = 0;
     268:	50 e0       	ldi	r21, 0x00	; 0
		{
			adc_buffer[adc_current_channel] = ADCW;			//store converted ADC Value
			adc_flags |= (1<<adc_current_channel);			//set corresponding Flag
			
			adc_current_channel++;							//select next channel
			while (!((adc_channelmask >> adc_current_channel) & 0x0001))	//channel not active? -> check channelmask.
     26a:	05 c0       	rjmp	.+10     	; 0x276 <adc_task+0x6a>
			{																			
				if (adc_current_channel < 10)				//check for overrun
     26c:	4a 30       	cpi	r20, 0x0A	; 10
     26e:	10 f4       	brcc	.+4      	; 0x274 <adc_task+0x68>
				{
					adc_current_channel++;					//select next channel
     270:	4f 5f       	subi	r20, 0xFF	; 255
     272:	01 c0       	rjmp	.+2      	; 0x276 <adc_task+0x6a>
				}
				else
				{
					adc_current_channel = 0;
     274:	45 2f       	mov	r20, r21
		{
			adc_buffer[adc_current_channel] = ADCW;			//store converted ADC Value
			adc_flags |= (1<<adc_current_channel);			//set corresponding Flag
			
			adc_current_channel++;							//select next channel
			while (!((adc_channelmask >> adc_current_channel) & 0x0001))	//channel not active? -> check channelmask.
     276:	c9 01       	movw	r24, r18
     278:	04 2e       	mov	r0, r20
     27a:	02 c0       	rjmp	.+4      	; 0x280 <adc_task+0x74>
     27c:	96 95       	lsr	r25
     27e:	87 95       	ror	r24
     280:	0a 94       	dec	r0
     282:	e2 f7       	brpl	.-8      	; 0x27c <adc_task+0x70>
     284:	80 ff       	sbrs	r24, 0
     286:	f2 cf       	rjmp	.-28     	; 0x26c <adc_task+0x60>
     288:	40 93 f4 06 	sts	0x06F4, r20
				else
				{
					adc_current_channel = 0;
				}
			}
			ADMUX = (ADMUX & ~(0x1F)) | (adc_current_channel & 0x1F);	//switch MUX to new channel
     28c:	ec e7       	ldi	r30, 0x7C	; 124
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	4f 71       	andi	r20, 0x1F	; 31
     294:	80 7e       	andi	r24, 0xE0	; 224
     296:	48 2b       	or	r20, r24
     298:	40 83       	st	Z, r20
			ADCSRA |= (1<<ADSC);												//start single conversion
     29a:	ea e7       	ldi	r30, 0x7A	; 122
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	80 64       	ori	r24, 0x40	; 64
     2a2:	80 83       	st	Z, r24
     2a4:	08 95       	ret

000002a6 <bmschip_setOvUnVoltage>:
}
// *****************************************************************************************

// *** Funktion zum Festlegen kritischer Spannungsgrenzen **********************************
void bmschip_setOvUnVoltage(uint16_t * undervoltage, uint16_t * overvoltage)
{
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	ec 01       	movw	r28, r24
     2ac:	fb 01       	movw	r30, r22
	//Spannungen an LTC6804-Format anpassen
	//Aus der 16bit-Zahl wird eine 12Bit-Zahl
	if(*undervoltage > 0)
     2ae:	88 81       	ld	r24, Y
     2b0:	99 81       	ldd	r25, Y+1	; 0x01
     2b2:	00 97       	sbiw	r24, 0x00	; 0
     2b4:	49 f0       	breq	.+18     	; 0x2c8 <bmschip_setOvUnVoltage+0x22>
	{
		*undervoltage = (*undervoltage / 16) - 1;	// (Spannung in 100uV / (16 * 100uV)) - 1		
     2b6:	92 95       	swap	r25
     2b8:	82 95       	swap	r24
     2ba:	8f 70       	andi	r24, 0x0F	; 15
     2bc:	89 27       	eor	r24, r25
     2be:	9f 70       	andi	r25, 0x0F	; 15
     2c0:	89 27       	eor	r24, r25
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	99 83       	std	Y+1, r25	; 0x01
     2c6:	88 83       	st	Y, r24
	}
	*overvoltage = *overvoltage / 16;	// Spannung in 100uV / (16 * 100uV)
     2c8:	80 81       	ld	r24, Z
     2ca:	91 81       	ldd	r25, Z+1	; 0x01
     2cc:	92 95       	swap	r25
     2ce:	82 95       	swap	r24
     2d0:	8f 70       	andi	r24, 0x0F	; 15
     2d2:	89 27       	eor	r24, r25
     2d4:	9f 70       	andi	r25, 0x0F	; 15
     2d6:	89 27       	eor	r24, r25
     2d8:	91 83       	std	Z+1, r25	; 0x01
     2da:	80 83       	st	Z, r24
		
	//Konfigurationsdaten aktualisieren
	ltc6804.config[0] = 0x24;																			// 00100100 (2) wenn GPIO3 als Input gesetzt werden soll
     2dc:	ab e2       	ldi	r26, 0x2B	; 43
     2de:	b7 e0       	ldi	r27, 0x07	; 7
     2e0:	84 e2       	ldi	r24, 0x24	; 36
     2e2:	8c 93       	st	X, r24
	ltc6804.config[1] = (uint8_t) *undervoltage;														//Ein Byte aus den niedrigeren 8 Bit des 12 Bit UV-Werts
     2e4:	88 81       	ld	r24, Y
     2e6:	11 96       	adiw	r26, 0x01	; 1
     2e8:	8c 93       	st	X, r24
     2ea:	11 97       	sbiw	r26, 0x01	; 1
	ltc6804.config[2] = (uint8_t) (((*overvoltage & 0x000F) << 4) | ((*undervoltage & 0x0F00) >> 8));	//Ein Byte aus den niedrigeren 4 Bit des 12 Bit OV-Werts und der höheren 4 Bit des 12 Bit UV-Werts
     2ec:	88 81       	ld	r24, Y
     2ee:	99 81       	ldd	r25, Y+1	; 0x01
     2f0:	88 27       	eor	r24, r24
     2f2:	9f 70       	andi	r25, 0x0F	; 15
     2f4:	80 81       	ld	r24, Z
     2f6:	82 95       	swap	r24
     2f8:	80 7f       	andi	r24, 0xF0	; 240
     2fa:	89 2b       	or	r24, r25
     2fc:	12 96       	adiw	r26, 0x02	; 2
     2fe:	8c 93       	st	X, r24
     300:	12 97       	sbiw	r26, 0x02	; 2
	ltc6804.config[3] = (uint8_t) ((*overvoltage & 0x0FF0) >> 4);										//Ein Byte aus den höheren 8 Bit des 12 Bit OV-Werts
     302:	80 81       	ld	r24, Z
     304:	91 81       	ldd	r25, Z+1	; 0x01
     306:	80 7f       	andi	r24, 0xF0	; 240
     308:	9f 70       	andi	r25, 0x0F	; 15
     30a:	92 95       	swap	r25
     30c:	82 95       	swap	r24
     30e:	8f 70       	andi	r24, 0x0F	; 15
     310:	89 27       	eor	r24, r25
     312:	9f 70       	andi	r25, 0x0F	; 15
     314:	89 27       	eor	r24, r25
     316:	13 96       	adiw	r26, 0x03	; 3
     318:	8c 93       	st	X, r24
     31a:	13 97       	sbiw	r26, 0x03	; 3
	ltc6804.config[4] = 0x00;
     31c:	14 96       	adiw	r26, 0x04	; 4
     31e:	1c 92       	st	X, r1
     320:	14 97       	sbiw	r26, 0x04	; 4
	ltc6804.config[5] = 0x00;
     322:	15 96       	adiw	r26, 0x05	; 5
     324:	1c 92       	st	X, r1
	
	//Zur Fehlerkontrolle ausserhalb dieser Funktion Spannungen nach Runden zurueckrechnen
	*undervoltage = (*undervoltage + 1) * 16;
     326:	88 81       	ld	r24, Y
     328:	99 81       	ldd	r25, Y+1	; 0x01
     32a:	01 96       	adiw	r24, 0x01	; 1
     32c:	82 95       	swap	r24
     32e:	92 95       	swap	r25
     330:	90 7f       	andi	r25, 0xF0	; 240
     332:	98 27       	eor	r25, r24
     334:	80 7f       	andi	r24, 0xF0	; 240
     336:	98 27       	eor	r25, r24
     338:	99 83       	std	Y+1, r25	; 0x01
     33a:	88 83       	st	Y, r24
	*overvoltage = *overvoltage * 16;
     33c:	80 81       	ld	r24, Z
     33e:	91 81       	ldd	r25, Z+1	; 0x01
     340:	82 95       	swap	r24
     342:	92 95       	swap	r25
     344:	90 7f       	andi	r25, 0xF0	; 240
     346:	98 27       	eor	r25, r24
     348:	80 7f       	andi	r24, 0xF0	; 240
     34a:	98 27       	eor	r25, r24
     34c:	91 83       	std	Z+1, r25	; 0x01
     34e:	80 83       	st	Z, r24
}
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	08 95       	ret

00000356 <bmschip_spi_rw>:
// *****************************************************************************************

// *** Funktion zum Senden und Empfangen via SPI *******************************************
uint8_t bmschip_spi_rw (uint8_t *command, uint8_t size)
{
     356:	cf 93       	push	r28
	uint8_t i;
	
	
	if (spi.locked==0)	//Beginn des Sendens
     358:	c0 91 6e 07 	lds	r28, 0x076E
     35c:	c1 11       	cpse	r28, r1
     35e:	17 c0       	rjmp	.+46     	; 0x38e <bmschip_spi_rw+0x38>
	{
		spi.bytes = size;
     360:	60 93 6c 07 	sts	0x076C, r22
		for (i=0; i<size; i++)
     364:	66 23       	and	r22, r22
     366:	69 f0       	breq	.+26     	; 0x382 <bmschip_spi_rw+0x2c>
     368:	e8 2f       	mov	r30, r24
     36a:	f9 2f       	mov	r31, r25
     36c:	20 e0       	ldi	r18, 0x00	; 0
     36e:	30 e0       	ldi	r19, 0x00	; 0
		{
			spi.tx_buffer.b[i] = command[i];
     370:	91 91       	ld	r25, Z+
     372:	d9 01       	movw	r26, r18
     374:	a4 5b       	subi	r26, 0xB4	; 180
     376:	b8 4f       	sbci	r27, 0xF8	; 248
     378:	9c 93       	st	X, r25
     37a:	2f 5f       	subi	r18, 0xFF	; 255
     37c:	3f 4f       	sbci	r19, 0xFF	; 255
	
	
	if (spi.locked==0)	//Beginn des Sendens
	{
		spi.bytes = size;
		for (i=0; i<size; i++)
     37e:	26 17       	cp	r18, r22
     380:	b8 f3       	brcs	.-18     	; 0x370 <bmschip_spi_rw+0x1a>
		{
			spi.tx_buffer.b[i] = command[i];
		}
		SPI_CS_LTC6804_LOW;
     382:	41 98       	cbi	0x08, 1	; 8
		
		while(!(spi_start_transmission()));	//Hier wird spi.locked gesetzt
     384:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <spi_start_transmission>
     388:	88 23       	and	r24, r24
     38a:	e1 f3       	breq	.-8      	; 0x384 <bmschip_spi_rw+0x2e>
     38c:	0d c0       	rjmp	.+26     	; 0x3a8 <bmschip_spi_rw+0x52>
	}
	else if (spi.flag==0)	//Weiterschicken
     38e:	c0 91 6f 07 	lds	r28, 0x076F
     392:	c1 11       	cpse	r28, r1
     394:	03 c0       	rjmp	.+6      	; 0x39c <bmschip_spi_rw+0x46>
	{
		spi_task();
     396:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <spi_task>
     39a:	06 c0       	rjmp	.+12     	; 0x3a8 <bmschip_spi_rw+0x52>
	}
	else if (spi.flag==1)	//Übertragung fertig
     39c:	80 91 6f 07 	lds	r24, 0x076F
     3a0:	c1 e0       	ldi	r28, 0x01	; 1
     3a2:	81 30       	cpi	r24, 0x01	; 1
     3a4:	09 f0       	breq	.+2      	; 0x3a8 <bmschip_spi_rw+0x52>
     3a6:	c0 e0       	ldi	r28, 0x00	; 0
	return 0;
	//Achtung! 
	//RX-Array noch uebertragen, damit es nicht ueberschrieben wird
	//NICHT VERGESSEN: 
	//SPI_CS_LTC8604_HIGH und spi.locked = 0 nach vollständiger Uebertragung in der Hauptfkt. setzen
}
     3a8:	8c 2f       	mov	r24, r28
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <bmschip_writeDischarge>:
// *****************************************************************************************

// *** Funktion um Konfiguration fuer das Balancing zu veraendern **************************
void bmschip_writeDischarge(uint16_t cells, uint8_t time)
{
	ltc6804.config[4] = (uint8_t) cells;	//zu balancende Zellen eintragen
     3ae:	eb e2       	ldi	r30, 0x2B	; 43
     3b0:	f7 e0       	ldi	r31, 0x07	; 7
     3b2:	84 83       	std	Z+4, r24	; 0x04
	ltc6804.config[5] = (uint8_t) (((time & 0x0F) << 4) | ((cells & 0x0F00) >> 8));		//Balancing-time: Manuell
     3b4:	88 27       	eor	r24, r24
     3b6:	9f 70       	andi	r25, 0x0F	; 15
     3b8:	62 95       	swap	r22
     3ba:	60 7f       	andi	r22, 0xF0	; 240
     3bc:	69 2b       	or	r22, r25
     3be:	65 83       	std	Z+5, r22	; 0x05
     3c0:	08 95       	ret

000003c2 <bmschip_startAdc>:
}
// *****************************************************************************************

// *** Funktion zum Starten der Spannungsmessung *******************************************
void bmschip_startAdc(void)
{
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	00 d0       	rcall	.+0      	; 0x3d6 <bmschip_startAdc+0x14>
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <bmschip_startAdc+0x16>
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint8_t cmd[4];
	
	
	cmd[0]=0x00;
     3dc:	19 82       	std	Y+1, r1	; 0x01
	for (i=0; i<slave_boards; i++)
     3de:	80 91 26 07 	lds	r24, 0x0726
     3e2:	88 23       	and	r24, r24
     3e4:	09 f4       	brne	.+2      	; 0x3e8 <bmschip_startAdc+0x26>
     3e6:	42 c0       	rjmp	.+132    	; 0x46c <bmschip_startAdc+0xaa>
     3e8:	b1 2c       	mov	r11, r1
	{
		while(!(bmschip_spi_rw(cmd, 1)));	//Dummybyte, um den IsoSPI aufzuwecken
		SPI_CS_LTC6804_HIGH;
		spi.locked = 0;
     3ea:	0f 2e       	mov	r0, r31
     3ec:	fc e4       	ldi	r31, 0x4C	; 76
     3ee:	cf 2e       	mov	r12, r31
     3f0:	f7 e0       	ldi	r31, 0x07	; 7
     3f2:	df 2e       	mov	r13, r31
     3f4:	f0 2d       	mov	r31, r0
		wait_count = TCNT1;
     3f6:	04 e8       	ldi	r16, 0x84	; 132
     3f8:	10 e0       	ldi	r17, 0x00	; 0
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
     3fa:	0f 2e       	mov	r0, r31
     3fc:	f6 e8       	ldi	r31, 0x86	; 134
     3fe:	ef 2e       	mov	r14, r31
     400:	f1 2c       	mov	r15, r1
     402:	f0 2d       	mov	r31, r0
	
	
	cmd[0]=0x00;
	for (i=0; i<slave_boards; i++)
	{
		while(!(bmschip_spi_rw(cmd, 1)));	//Dummybyte, um den IsoSPI aufzuwecken
     404:	61 e0       	ldi	r22, 0x01	; 1
     406:	ce 01       	movw	r24, r28
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	0e 94 ab 01 	call	0x356	; 0x356 <bmschip_spi_rw>
     40e:	88 23       	and	r24, r24
     410:	c9 f3       	breq	.-14     	; 0x404 <bmschip_startAdc+0x42>
		SPI_CS_LTC6804_HIGH;
     412:	41 9a       	sbi	0x08, 1	; 8
		spi.locked = 0;
     414:	f6 01       	movw	r30, r12
     416:	12 a2       	std	Z+34, r1	; 0x22
		wait_count = TCNT1;
     418:	f8 01       	movw	r30, r16
     41a:	40 81       	ld	r20, Z
     41c:	51 81       	ldd	r21, Z+1	; 0x01
     41e:	50 93 2a 07 	sts	0x072A, r21
     422:	40 93 29 07 	sts	0x0729, r20
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
     426:	9a 01       	movw	r18, r20
     428:	27 5e       	subi	r18, 0xE7	; 231
     42a:	3f 4f       	sbci	r19, 0xFF	; 255
     42c:	f8 01       	movw	r30, r16
     42e:	80 81       	ld	r24, Z
     430:	91 81       	ldd	r25, Z+1	; 0x01
     432:	28 17       	cp	r18, r24
     434:	39 07       	cpc	r19, r25
     436:	28 f0       	brcs	.+10     	; 0x442 <bmschip_startAdc+0x80>
     438:	80 81       	ld	r24, Z
     43a:	91 81       	ldd	r25, Z+1	; 0x01
     43c:	48 17       	cp	r20, r24
     43e:	59 07       	cpc	r21, r25
     440:	a8 f3       	brcs	.-22     	; 0x42c <bmschip_startAdc+0x6a>
     442:	f8 01       	movw	r30, r16
     444:	80 81       	ld	r24, Z
     446:	91 81       	ldd	r25, Z+1	; 0x01
     448:	84 17       	cp	r24, r20
     44a:	95 07       	cpc	r25, r21
     44c:	50 f4       	brcc	.+20     	; 0x462 <bmschip_startAdc+0xa0>
     44e:	80 81       	ld	r24, Z
     450:	91 81       	ldd	r25, Z+1	; 0x01
     452:	f7 01       	movw	r30, r14
     454:	60 81       	ld	r22, Z
     456:	71 81       	ldd	r23, Z+1	; 0x01
     458:	86 0f       	add	r24, r22
     45a:	97 1f       	adc	r25, r23
     45c:	82 17       	cp	r24, r18
     45e:	93 07       	cpc	r25, r19
     460:	28 f3       	brcs	.-54     	; 0x42c <bmschip_startAdc+0x6a>
	uint8_t i;
	uint8_t cmd[4];
	
	
	cmd[0]=0x00;
	for (i=0; i<slave_boards; i++)
     462:	b3 94       	inc	r11
     464:	80 91 26 07 	lds	r24, 0x0726
     468:	b8 16       	cp	r11, r24
     46a:	60 f2       	brcs	.-104    	; 0x404 <bmschip_startAdc+0x42>
		wait_count = TCNT1;
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
	}
	
	//Messbefehl
	cmd[0] = 0x03;	// 00000011	ADCV0	Normal-Mode
     46c:	83 e0       	ldi	r24, 0x03	; 3
     46e:	89 83       	std	Y+1, r24	; 0x01
	cmd[1] = 0x60;	// 01100000	ADCV1	Normal-Mode, Balancing wird unterbrochen während der Messung
     470:	80 e6       	ldi	r24, 0x60	; 96
     472:	8a 83       	std	Y+2, r24	; 0x02
	cmd[2] = 0xF4;	// PEC-High-Byte
     474:	84 ef       	ldi	r24, 0xF4	; 244
     476:	8b 83       	std	Y+3, r24	; 0x03
	cmd[3] = 0x6C;	// PEC-Low-Byte
     478:	8c e6       	ldi	r24, 0x6C	; 108
     47a:	8c 83       	std	Y+4, r24	; 0x04
					== 1	Balancing nicht unterbrochen
	CH[2] + CH[1] + CH[0]	== zu messende Zellen je nach Kombination
	*/
	
	//Befehl und PEC schreiben
	while(!(bmschip_spi_rw(cmd, 4)));
     47c:	64 e0       	ldi	r22, 0x04	; 4
     47e:	ce 01       	movw	r24, r28
     480:	01 96       	adiw	r24, 0x01	; 1
     482:	0e 94 ab 01 	call	0x356	; 0x356 <bmschip_spi_rw>
     486:	88 23       	and	r24, r24
     488:	c9 f3       	breq	.-14     	; 0x47c <bmschip_startAdc+0xba>
	
	SPI_CS_LTC6804_HIGH;
     48a:	41 9a       	sbi	0x08, 1	; 8
	spi.locked=0;
     48c:	10 92 6e 07 	sts	0x076E, r1
}
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	ff 90       	pop	r15
     4a2:	ef 90       	pop	r14
     4a4:	df 90       	pop	r13
     4a6:	cf 90       	pop	r12
     4a8:	bf 90       	pop	r11
     4aa:	08 95       	ret

000004ac <Pec15>:
	uint16_t remainder = 16;	// PEC seed
	uint16_t address;
	uint8_t i;
	
	
	for (i = 0; i < len; i++)
     4ac:	66 23       	and	r22, r22
     4ae:	09 f1       	breq	.+66     	; 0x4f2 <Pec15+0x46>
     4b0:	dc 01       	movw	r26, r24
     4b2:	61 50       	subi	r22, 0x01	; 1
     4b4:	46 2f       	mov	r20, r22
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	4f 5f       	subi	r20, 0xFF	; 255
     4ba:	5f 4f       	sbci	r21, 0xFF	; 255
     4bc:	48 0f       	add	r20, r24
     4be:	59 1f       	adc	r21, r25
     4c0:	80 e1       	ldi	r24, 0x10	; 16
     4c2:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Calculate PEC table address
		address = ((remainder >> 7) ^ data[i]) & 0xFF;
     4c4:	6d 91       	ld	r22, X+
		remainder = (remainder << 8 ) ^ crc15Table[address];
     4c6:	38 2f       	mov	r19, r24
     4c8:	22 27       	eor	r18, r18
	
	
	for (i = 0; i < len; i++)
	{
		//Calculate PEC table address
		address = ((remainder >> 7) ^ data[i]) & 0xFF;
     4ca:	fc 01       	movw	r30, r24
     4cc:	ee 0f       	add	r30, r30
     4ce:	ef 2f       	mov	r30, r31
     4d0:	ee 1f       	adc	r30, r30
     4d2:	ff 0b       	sbc	r31, r31
     4d4:	f1 95       	neg	r31
     4d6:	e6 27       	eor	r30, r22
     4d8:	ff 27       	eor	r31, r31
		remainder = (remainder << 8 ) ^ crc15Table[address];
     4da:	ee 0f       	add	r30, r30
     4dc:	ff 1f       	adc	r31, r31
     4de:	e3 5f       	subi	r30, 0xF3	; 243
     4e0:	fe 4f       	sbci	r31, 0xFE	; 254
     4e2:	80 81       	ld	r24, Z
     4e4:	91 81       	ldd	r25, Z+1	; 0x01
     4e6:	82 27       	eor	r24, r18
     4e8:	93 27       	eor	r25, r19
	uint16_t remainder = 16;	// PEC seed
	uint16_t address;
	uint8_t i;
	
	
	for (i = 0; i < len; i++)
     4ea:	a4 17       	cp	r26, r20
     4ec:	b5 07       	cpc	r27, r21
     4ee:	51 f7       	brne	.-44     	; 0x4c4 <Pec15+0x18>
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <Pec15+0x4a>
// *** PEC-Berechnung **********************************************************************
// Code aus dem Datenblatt von LTC6804 übernommen 
// Funktioniert schneller als Berechnung, da Lookup-Table verwendet wird
uint16_t Pec15 (uint8_t *data, uint8_t len)
{
	uint16_t remainder = 16;	// PEC seed
     4f2:	80 e1       	ldi	r24, 0x10	; 16
     4f4:	90 e0       	ldi	r25, 0x00	; 0
		address = ((remainder >> 7) ^ data[i]) & 0xFF;
		remainder = (remainder << 8 ) ^ crc15Table[address];
	}
	//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
	return (remainder * 2);
}
     4f6:	88 0f       	add	r24, r24
     4f8:	99 1f       	adc	r25, r25
     4fa:	08 95       	ret

000004fc <bmschip_readConfig>:
}
// *****************************************************************************************

// *** Funktion zum lesen der Konfiguration der Slaves *************************************
uint8_t bmschip_readConfig(uint8_t * cmd, uint8_t size, uint8_t msg)
{
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	8c 01       	movw	r16, r24
     50c:	d6 2e       	mov	r13, r22
	uint8_t i;
	uint16_t pec;
	
	
	//Befehl und PEC schreiben
	if (msg==0)	//für msg == 0 wird der Command gesendet. Das ist zuerst immer notwendig
     50e:	44 23       	and	r20, r20
     510:	21 f0       	breq	.+8      	; 0x51a <bmschip_readConfig+0x1e>
		cmd[3] = GET_LOW_BYTE(pec);
		while(!(bmschip_spi_rw(cmd, 4)));	//Command
	}
	else	//Konfiguration empfangen
	{
		for(i=4; i<size; i++)
     512:	84 e0       	ldi	r24, 0x04	; 4
     514:	86 17       	cp	r24, r22
     516:	a0 f0       	brcs	.+40     	; 0x540 <bmschip_readConfig+0x44>
     518:	1f c0       	rjmp	.+62     	; 0x558 <bmschip_readConfig+0x5c>
	
	
	//Befehl und PEC schreiben
	if (msg==0)	//für msg == 0 wird der Command gesendet. Das ist zuerst immer notwendig
	{	
		cmd[0] = 0x00; // RDCFG0
     51a:	fc 01       	movw	r30, r24
     51c:	10 82       	st	Z, r1
		cmd[1] = 0x02; // RDCFG1
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	81 83       	std	Z+1, r24	; 0x01
		pec = Pec15(cmd, 2);
     522:	62 e0       	ldi	r22, 0x02	; 2
     524:	c8 01       	movw	r24, r16
     526:	0e 94 56 02 	call	0x4ac	; 0x4ac <Pec15>
		cmd[2] = GET_HIGH_BYTE(pec);
     52a:	f8 01       	movw	r30, r16
     52c:	92 83       	std	Z+2, r25	; 0x02
		cmd[3] = GET_LOW_BYTE(pec);
     52e:	83 83       	std	Z+3, r24	; 0x03
		while(!(bmschip_spi_rw(cmd, 4)));	//Command
     530:	64 e0       	ldi	r22, 0x04	; 4
     532:	c8 01       	movw	r24, r16
     534:	0e 94 ab 01 	call	0x356	; 0x356 <bmschip_spi_rw>
     538:	88 23       	and	r24, r24
     53a:	d1 f3       	breq	.-12     	; 0x530 <bmschip_readConfig+0x34>
		if(GET_HIGH_BYTE(pec) != cmd[10] ||	GET_LOW_BYTE(pec) != cmd[11])
		{
			return 1;	//Abbruch falls PEC nicht stimmt
		}
	}
	return 0;
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	42 c0       	rjmp	.+132    	; 0x5c4 <bmschip_readConfig+0xc8>
     540:	f8 01       	movw	r30, r16
     542:	34 96       	adiw	r30, 0x04	; 4
     544:	8b ef       	ldi	r24, 0xFB	; 251
     546:	86 0f       	add	r24, r22
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	05 96       	adiw	r24, 0x05	; 5
     54c:	80 0f       	add	r24, r16
     54e:	91 1f       	adc	r25, r17
	}
	else	//Konfiguration empfangen
	{
		for(i=4; i<size; i++)
		{
			cmd[i] = 0x00;
     550:	11 92       	st	Z+, r1
		cmd[3] = GET_LOW_BYTE(pec);
		while(!(bmschip_spi_rw(cmd, 4)));	//Command
	}
	else	//Konfiguration empfangen
	{
		for(i=4; i<size; i++)
     552:	e8 17       	cp	r30, r24
     554:	f9 07       	cpc	r31, r25
     556:	e1 f7       	brne	.-8      	; 0x550 <bmschip_readConfig+0x54>
		{
			cmd[i] = 0x00;
		}
		while(!(bmschip_spi_rw(&cmd[4], 8)));
     558:	e8 01       	movw	r28, r16
     55a:	24 96       	adiw	r28, 0x04	; 4
     55c:	ec 2e       	mov	r14, r28
     55e:	fd 2e       	mov	r15, r29
     560:	68 e0       	ldi	r22, 0x08	; 8
     562:	ce 01       	movw	r24, r28
     564:	0e 94 ab 01 	call	0x356	; 0x356 <bmschip_spi_rw>
     568:	88 23       	and	r24, r24
     56a:	c1 f3       	breq	.-16     	; 0x55c <bmschip_readConfig+0x60>
		for (i=4;i<size;i++)
     56c:	f4 e0       	ldi	r31, 0x04	; 4
     56e:	fd 15       	cp	r31, r13
     570:	c0 f4       	brcc	.+48     	; 0x5a2 <bmschip_readConfig+0xa6>
     572:	ec 2f       	mov	r30, r28
     574:	fd 2f       	mov	r31, r29
     576:	4b ef       	ldi	r20, 0xFB	; 251
     578:	4d 0d       	add	r20, r13
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	4b 5f       	subi	r20, 0xFB	; 251
     57e:	5f 4f       	sbci	r21, 0xFF	; 255
     580:	40 0f       	add	r20, r16
     582:	51 1f       	adc	r21, r17
     584:	8c ef       	ldi	r24, 0xFC	; 252
     586:	9f ef       	ldi	r25, 0xFF	; 255
     588:	80 1b       	sub	r24, r16
     58a:	91 0b       	sbc	r25, r17
     58c:	dc 01       	movw	r26, r24
     58e:	ae 0f       	add	r26, r30
     590:	bf 1f       	adc	r27, r31
		{
			cmd[i]=spi.rx_buffer.b[i-4];	//empfangene Konfiguration übernehmen
     592:	a4 5b       	subi	r26, 0xB4	; 180
     594:	b8 4f       	sbci	r27, 0xF8	; 248
     596:	50 96       	adiw	r26, 0x10	; 16
     598:	2c 91       	ld	r18, X
     59a:	21 93       	st	Z+, r18
		for(i=4; i<size; i++)
		{
			cmd[i] = 0x00;
		}
		while(!(bmschip_spi_rw(&cmd[4], 8)));
		for (i=4;i<size;i++)
     59c:	e4 17       	cp	r30, r20
     59e:	f5 07       	cpc	r31, r21
     5a0:	a9 f7       	brne	.-22     	; 0x58c <bmschip_readConfig+0x90>
		{
			cmd[i]=spi.rx_buffer.b[i-4];	//empfangene Konfiguration übernehmen
		}
		
		//Auswertung
		pec = Pec15(&cmd[4], 6);
     5a2:	66 e0       	ldi	r22, 0x06	; 6
     5a4:	8e 2d       	mov	r24, r14
     5a6:	9f 2d       	mov	r25, r15
     5a8:	0e 94 56 02 	call	0x4ac	; 0x4ac <Pec15>
     5ac:	38 2f       	mov	r19, r24
		if(GET_HIGH_BYTE(pec) != cmd[10] ||	GET_LOW_BYTE(pec) != cmd[11])
     5ae:	f8 01       	movw	r30, r16
     5b0:	22 85       	ldd	r18, Z+10	; 0x0a
     5b2:	29 13       	cpse	r18, r25
     5b4:	06 c0       	rjmp	.+12     	; 0x5c2 <bmschip_readConfig+0xc6>
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	93 85       	ldd	r25, Z+11	; 0x0b
     5ba:	93 13       	cpse	r25, r19
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <bmschip_readConfig+0xc8>
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <bmschip_readConfig+0xc8>
		{
			return 1;	//Abbruch falls PEC nicht stimmt
     5c2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	ff 90       	pop	r15
     5ce:	ef 90       	pop	r14
     5d0:	df 90       	pop	r13
     5d2:	08 95       	ret

000005d4 <bmschip_writeConfig>:
}
// *****************************************************************************************

// *** Funktion zum Beschreiben der Slaves *************************************************
uint8_t bmschip_writeConfig(void)
{
     5d4:	9f 92       	push	r9
     5d6:	af 92       	push	r10
     5d8:	bf 92       	push	r11
     5da:	cf 92       	push	r12
     5dc:	df 92       	push	r13
     5de:	ef 92       	push	r14
     5e0:	ff 92       	push	r15
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
     5ee:	68 97       	sbiw	r28, 0x18	; 24
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	de bf       	out	0x3e, r29	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	cd bf       	out	0x3d, r28	; 61
	uint8_t cmd[size], cmdAns[size];
	uint16_t pec;


	//Konfigurationsbefehl
	cmd[0] = 0x00; // WRCFG0
     5fa:	19 82       	std	Y+1, r1	; 0x01
	cmd[1] = 0x01; // WRCFG1
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	8a 83       	std	Y+2, r24	; 0x02
	pec = Pec15(cmd, 2);
     600:	62 e0       	ldi	r22, 0x02	; 2
     602:	ce 01       	movw	r24, r28
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	0e 94 56 02 	call	0x4ac	; 0x4ac <Pec15>
	
	cmd[2] = GET_HIGH_BYTE(pec);
     60a:	9b 83       	std	Y+3, r25	; 0x03
	cmd[3] = GET_LOW_BYTE(pec);
     60c:	8c 83       	std	Y+4, r24	; 0x04
	
	//Befehl und PEC schreiben
	for (i=0; i<slave_boards; i++)
     60e:	80 91 26 07 	lds	r24, 0x0726
     612:	88 23       	and	r24, r24
     614:	09 f4       	brne	.+2      	; 0x618 <bmschip_writeConfig+0x44>
     616:	44 c0       	rjmp	.+136    	; 0x6a0 <bmschip_writeConfig+0xcc>
     618:	b1 2c       	mov	r11, r1
	{
		while(!(bmschip_spi_rw(cmd, 1)));	//Dummybyte, um den IsoSPI aufzuwecken
		
		SPI_CS_LTC6804_HIGH;
		spi.locked=0;
     61a:	0f 2e       	mov	r0, r31
     61c:	fc e4       	ldi	r31, 0x4C	; 76
     61e:	cf 2e       	mov	r12, r31
     620:	f7 e0       	ldi	r31, 0x07	; 7
     622:	df 2e       	mov	r13, r31
     624:	f0 2d       	mov	r31, r0
		wait_count = TCNT1;
     626:	04 e8       	ldi	r16, 0x84	; 132
     628:	10 e0       	ldi	r17, 0x00	; 0
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
     62a:	0f 2e       	mov	r0, r31
     62c:	f6 e8       	ldi	r31, 0x86	; 134
     62e:	ef 2e       	mov	r14, r31
     630:	f1 2c       	mov	r15, r1
     632:	f0 2d       	mov	r31, r0
	cmd[3] = GET_LOW_BYTE(pec);
	
	//Befehl und PEC schreiben
	for (i=0; i<slave_boards; i++)
	{
		while(!(bmschip_spi_rw(cmd, 1)));	//Dummybyte, um den IsoSPI aufzuwecken
     634:	61 e0       	ldi	r22, 0x01	; 1
     636:	ce 01       	movw	r24, r28
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	0e 94 ab 01 	call	0x356	; 0x356 <bmschip_spi_rw>
     63e:	88 23       	and	r24, r24
     640:	c9 f3       	breq	.-14     	; 0x634 <bmschip_writeConfig+0x60>
		
		SPI_CS_LTC6804_HIGH;
     642:	41 9a       	sbi	0x08, 1	; 8
		spi.locked=0;
     644:	d6 01       	movw	r26, r12
     646:	92 96       	adiw	r26, 0x22	; 34
     648:	1c 92       	st	X, r1
		wait_count = TCNT1;
     64a:	f8 01       	movw	r30, r16
     64c:	40 81       	ld	r20, Z
     64e:	51 81       	ldd	r21, Z+1	; 0x01
     650:	50 93 2a 07 	sts	0x072A, r21
     654:	40 93 29 07 	sts	0x0729, r20
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
     658:	9a 01       	movw	r18, r20
     65a:	27 5e       	subi	r18, 0xE7	; 231
     65c:	3f 4f       	sbci	r19, 0xFF	; 255
     65e:	d8 01       	movw	r26, r16
     660:	8d 91       	ld	r24, X+
     662:	9c 91       	ld	r25, X
     664:	11 97       	sbiw	r26, 0x01	; 1
     666:	28 17       	cp	r18, r24
     668:	39 07       	cpc	r19, r25
     66a:	28 f0       	brcs	.+10     	; 0x676 <bmschip_writeConfig+0xa2>
     66c:	8d 91       	ld	r24, X+
     66e:	9c 91       	ld	r25, X
     670:	48 17       	cp	r20, r24
     672:	59 07       	cpc	r21, r25
     674:	a0 f3       	brcs	.-24     	; 0x65e <bmschip_writeConfig+0x8a>
     676:	f8 01       	movw	r30, r16
     678:	80 81       	ld	r24, Z
     67a:	91 81       	ldd	r25, Z+1	; 0x01
     67c:	84 17       	cp	r24, r20
     67e:	95 07       	cpc	r25, r21
     680:	50 f4       	brcc	.+20     	; 0x696 <bmschip_writeConfig+0xc2>
     682:	80 81       	ld	r24, Z
     684:	91 81       	ldd	r25, Z+1	; 0x01
     686:	d7 01       	movw	r26, r14
     688:	6d 91       	ld	r22, X+
     68a:	7c 91       	ld	r23, X
     68c:	86 0f       	add	r24, r22
     68e:	97 1f       	adc	r25, r23
     690:	82 17       	cp	r24, r18
     692:	93 07       	cpc	r25, r19
     694:	20 f3       	brcs	.-56     	; 0x65e <bmschip_writeConfig+0x8a>
	
	cmd[2] = GET_HIGH_BYTE(pec);
	cmd[3] = GET_LOW_BYTE(pec);
	
	//Befehl und PEC schreiben
	for (i=0; i<slave_boards; i++)
     696:	b3 94       	inc	r11
     698:	80 91 26 07 	lds	r24, 0x0726
     69c:	b8 16       	cp	r11, r24
     69e:	50 f2       	brcs	.-108    	; 0x634 <bmschip_writeConfig+0x60>
		spi.locked=0;
		wait_count = TCNT1;
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
	
	}	
	while(!(bmschip_spi_rw(cmd, 4)));	//Command schicken
     6a0:	64 e0       	ldi	r22, 0x04	; 4
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	0e 94 ab 01 	call	0x356	; 0x356 <bmschip_spi_rw>
     6aa:	88 23       	and	r24, r24
     6ac:	c9 f3       	breq	.-14     	; 0x6a0 <bmschip_writeConfig+0xcc>
	
	//CS nicht auf HIGH setzen! 
	//Jetzt Uebertragung der einzelnen Chip-Configs
	spi.locked=0;
     6ae:	10 92 6e 07 	sts	0x076E, r1
	for (i=0;i<slave_boards;i++)
     6b2:	e0 91 26 07 	lds	r30, 0x0726
     6b6:	ee 23       	and	r30, r30
     6b8:	09 f4       	brne	.+2      	; 0x6bc <bmschip_writeConfig+0xe8>
     6ba:	4e c0       	rjmp	.+156    	; 0x758 <bmschip_writeConfig+0x184>
     6bc:	b1 2c       	mov	r11, r1
	{
		if(IS_TRUE(flagBalActiv))		//Abfrage, ob gebalanced werden darf?
     6be:	0f 2e       	mov	r0, r31
     6c0:	fb ec       	ldi	r31, 0xCB	; 203
     6c2:	cf 2e       	mov	r12, r31
     6c4:	f7 e0       	ldi	r31, 0x07	; 7
     6c6:	df 2e       	mov	r13, r31
     6c8:	f0 2d       	mov	r31, r0
		{
			bmschip_writeDischarge(bms.balancing.cells[slave_boards-i-1], 0x1);
		}
		else
		{
			ltc6804.config[4]=0x00;
     6ca:	0b e2       	ldi	r16, 0x2B	; 43
     6cc:	17 e0       	ldi	r17, 0x07	; 7
		pec = Pec15(&(cmd[4]), 6);
		cmd[10] = GET_HIGH_BYTE(pec);
		cmd[11] = GET_LOW_BYTE(pec);
		
		while(!(bmschip_spi_rw(&cmd[4], 8)));
		spi.locked=0;
     6ce:	0f 2e       	mov	r0, r31
     6d0:	fc e4       	ldi	r31, 0x4C	; 76
     6d2:	ef 2e       	mov	r14, r31
     6d4:	f7 e0       	ldi	r31, 0x07	; 7
     6d6:	ff 2e       	mov	r15, r31
     6d8:	f0 2d       	mov	r31, r0
	//CS nicht auf HIGH setzen! 
	//Jetzt Uebertragung der einzelnen Chip-Configs
	spi.locked=0;
	for (i=0;i<slave_boards;i++)
	{
		if(IS_TRUE(flagBalActiv))		//Abfrage, ob gebalanced werden darf?
     6da:	d6 01       	movw	r26, r12
     6dc:	8c 91       	ld	r24, X
     6de:	86 ff       	sbrs	r24, 6
     6e0:	0d c0       	rjmp	.+26     	; 0x6fc <bmschip_writeConfig+0x128>
		{
			bmschip_writeDischarge(bms.balancing.cells[slave_boards-i-1], 0x1);
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	eb 19       	sub	r30, r11
     6e6:	f1 09       	sbc	r31, r1
     6e8:	ee 0f       	add	r30, r30
     6ea:	ff 1f       	adc	r31, r31
     6ec:	e5 5a       	subi	r30, 0xA5	; 165
     6ee:	f6 4f       	sbci	r31, 0xF6	; 246
     6f0:	61 e0       	ldi	r22, 0x01	; 1
     6f2:	80 81       	ld	r24, Z
     6f4:	91 81       	ldd	r25, Z+1	; 0x01
     6f6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <bmschip_writeDischarge>
     6fa:	03 c0       	rjmp	.+6      	; 0x702 <bmschip_writeConfig+0x12e>
		}
		else
		{
			ltc6804.config[4]=0x00;
     6fc:	f8 01       	movw	r30, r16
     6fe:	14 82       	std	Z+4, r1	; 0x04
			ltc6804.config[5]=0x00;
     700:	15 82       	std	Z+5, r1	; 0x05
		}
		//Konfigurationsdaten der einzelnen Slaves 
		cmd[4] = ltc6804.config[0];
     702:	d8 01       	movw	r26, r16
     704:	8c 91       	ld	r24, X
     706:	8d 83       	std	Y+5, r24	; 0x05
		cmd[5] = ltc6804.config[1];
     708:	11 96       	adiw	r26, 0x01	; 1
     70a:	8c 91       	ld	r24, X
     70c:	11 97       	sbiw	r26, 0x01	; 1
     70e:	8e 83       	std	Y+6, r24	; 0x06
		cmd[6] = ltc6804.config[2];
     710:	12 96       	adiw	r26, 0x02	; 2
     712:	8c 91       	ld	r24, X
     714:	12 97       	sbiw	r26, 0x02	; 2
     716:	8f 83       	std	Y+7, r24	; 0x07
		cmd[7] = ltc6804.config[3];
     718:	13 96       	adiw	r26, 0x03	; 3
     71a:	8c 91       	ld	r24, X
     71c:	13 97       	sbiw	r26, 0x03	; 3
     71e:	88 87       	std	Y+8, r24	; 0x08
		cmd[8] = ltc6804.config[4];
     720:	14 96       	adiw	r26, 0x04	; 4
     722:	8c 91       	ld	r24, X
     724:	14 97       	sbiw	r26, 0x04	; 4
     726:	89 87       	std	Y+9, r24	; 0x09
		cmd[9] = ltc6804.config[5];
     728:	15 96       	adiw	r26, 0x05	; 5
     72a:	8c 91       	ld	r24, X
     72c:	8a 87       	std	Y+10, r24	; 0x0a
		pec = Pec15(&(cmd[4]), 6);
     72e:	66 e0       	ldi	r22, 0x06	; 6
     730:	ce 01       	movw	r24, r28
     732:	05 96       	adiw	r24, 0x05	; 5
     734:	0e 94 56 02 	call	0x4ac	; 0x4ac <Pec15>
		cmd[10] = GET_HIGH_BYTE(pec);
     738:	9b 87       	std	Y+11, r25	; 0x0b
		cmd[11] = GET_LOW_BYTE(pec);
     73a:	8c 87       	std	Y+12, r24	; 0x0c
		
		while(!(bmschip_spi_rw(&cmd[4], 8)));
     73c:	68 e0       	ldi	r22, 0x08	; 8
     73e:	ce 01       	movw	r24, r28
     740:	05 96       	adiw	r24, 0x05	; 5
     742:	0e 94 ab 01 	call	0x356	; 0x356 <bmschip_spi_rw>
     746:	88 23       	and	r24, r24
     748:	c9 f3       	breq	.-14     	; 0x73c <bmschip_writeConfig+0x168>
		spi.locked=0;
     74a:	f7 01       	movw	r30, r14
     74c:	12 a2       	std	Z+34, r1	; 0x22
	while(!(bmschip_spi_rw(cmd, 4)));	//Command schicken
	
	//CS nicht auf HIGH setzen! 
	//Jetzt Uebertragung der einzelnen Chip-Configs
	spi.locked=0;
	for (i=0;i<slave_boards;i++)
     74e:	b3 94       	inc	r11
     750:	e0 91 26 07 	lds	r30, 0x0726
     754:	be 16       	cp	r11, r30
     756:	08 f2       	brcs	.-126    	; 0x6da <bmschip_writeConfig+0x106>
		
		while(!(bmschip_spi_rw(&cmd[4], 8)));
		spi.locked=0;
	}
	
	SPI_CS_LTC6804_HIGH;
     758:	41 9a       	sbi	0x08, 1	; 8
	spi.locked=0;
     75a:	10 92 6e 07 	sts	0x076E, r1
	
	//Konfiguration zur Kontrolle lesen
	for (i=0; i<=slave_boards; i++)		//Der Reihe nach wird jetzt die Konfiguration der Boards eingeholt
     75e:	10 e0       	ldi	r17, 0x00	; 0
			SPI_CS_LTC6804_HIGH;
			spi.locked=0;
			return 1;
		}
		
		if(IS_FALSE(flagBalActiv))	//nicht beim Balancing, sondern bei Neukonfiguration
     760:	0f 2e       	mov	r0, r31
     762:	fb ec       	ldi	r31, 0xCB	; 203
     764:	ef 2e       	mov	r14, r31
     766:	f7 e0       	ldi	r31, 0x07	; 7
     768:	ff 2e       	mov	r15, r31
     76a:	f0 2d       	mov	r31, r0
			//Gelesene Config auswerten
			if (i != 0) //nicht beim Senden der Konfig
			{
				for(j=5;j<10;j++)	//Erstes Byte vorerst nicht, da beim Lesen an GPIOs NICHT die Konfiguration, sondern die anliegende Spannung ausgegeben wird
				{
					if(cmdAns[j] != ltc6804.config[j-4])
     76c:	0f 2e       	mov	r0, r31
     76e:	fb e2       	ldi	r31, 0x2B	; 43
     770:	af 2e       	mov	r10, r31
     772:	f7 e0       	ldi	r31, 0x07	; 7
     774:	bf 2e       	mov	r11, r31
     776:	f0 2d       	mov	r31, r0
     778:	68 94       	set
     77a:	99 24       	eor	r9, r9
     77c:	91 f8       	bld	r9, 1
     77e:	00 e0       	ldi	r16, 0x00	; 0
						return 1;
					}
				}
			}
		}
		spi.locked = 0; //SPI muss freigegeben werden, wenn current_byte neu gesetzt werden soll
     780:	0f 2e       	mov	r0, r31
     782:	fc e4       	ldi	r31, 0x4C	; 76
     784:	cf 2e       	mov	r12, r31
     786:	f7 e0       	ldi	r31, 0x07	; 7
     788:	df 2e       	mov	r13, r31
     78a:	f0 2d       	mov	r31, r0
	spi.locked=0;
	
	//Konfiguration zur Kontrolle lesen
	for (i=0; i<=slave_boards; i++)		//Der Reihe nach wird jetzt die Konfiguration der Boards eingeholt
	{
		if(bmschip_readConfig(cmdAns, size, i) != 0)		//Konfiguration der Zellen auslesen
     78c:	41 2f       	mov	r20, r17
     78e:	6c e0       	ldi	r22, 0x0C	; 12
     790:	ce 01       	movw	r24, r28
     792:	0d 96       	adiw	r24, 0x0d	; 13
     794:	0e 94 7e 02 	call	0x4fc	; 0x4fc <bmschip_readConfig>
     798:	88 23       	and	r24, r24
     79a:	29 f0       	breq	.+10     	; 0x7a6 <bmschip_writeConfig+0x1d2>
		{
			SPI_CS_LTC6804_HIGH;
     79c:	41 9a       	sbi	0x08, 1	; 8
			spi.locked=0;
     79e:	10 92 6e 07 	sts	0x076E, r1
			return 1;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	2b c0       	rjmp	.+86     	; 0x7fc <bmschip_writeConfig+0x228>
		}
		
		if(IS_FALSE(flagBalActiv))	//nicht beim Balancing, sondern bei Neukonfiguration
     7a6:	d7 01       	movw	r26, r14
     7a8:	9c 91       	ld	r25, X
     7aa:	96 fd       	sbrc	r25, 6
     7ac:	1c c0       	rjmp	.+56     	; 0x7e6 <bmschip_writeConfig+0x212>
		{
			//Gelesene Config auswerten
			if (i != 0) //nicht beim Senden der Konfig
     7ae:	11 23       	and	r17, r17
     7b0:	d1 f0       	breq	.+52     	; 0x7e6 <bmschip_writeConfig+0x212>
			{
				for(j=5;j<10;j++)	//Erstes Byte vorerst nicht, da beim Lesen an GPIOs NICHT die Konfiguration, sondern die anliegende Spannung ausgegeben wird
				{
					if(cmdAns[j] != ltc6804.config[j-4])
     7b2:	f5 01       	movw	r30, r10
     7b4:	91 81       	ldd	r25, Z+1	; 0x01
     7b6:	2a 89       	ldd	r18, Y+18	; 0x12
     7b8:	29 13       	cpse	r18, r25
     7ba:	0b c0       	rjmp	.+22     	; 0x7d2 <bmschip_writeConfig+0x1fe>
     7bc:	fe 01       	movw	r30, r28
     7be:	73 96       	adiw	r30, 0x13	; 19
     7c0:	29 2d       	mov	r18, r9
     7c2:	30 2f       	mov	r19, r16
     7c4:	41 91       	ld	r20, Z+
     7c6:	d9 01       	movw	r26, r18
     7c8:	a5 5d       	subi	r26, 0xD5	; 213
     7ca:	b8 4f       	sbci	r27, 0xF8	; 248
     7cc:	9c 91       	ld	r25, X
     7ce:	49 17       	cp	r20, r25
     7d0:	29 f0       	breq	.+10     	; 0x7dc <bmschip_writeConfig+0x208>
					{
						SPI_CS_LTC6804_HIGH;
     7d2:	41 9a       	sbi	0x08, 1	; 8
						spi.locked=0;
     7d4:	10 92 6e 07 	sts	0x076E, r1
						return 1;
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	10 c0       	rjmp	.+32     	; 0x7fc <bmschip_writeConfig+0x228>
     7dc:	2f 5f       	subi	r18, 0xFF	; 255
     7de:	3f 4f       	sbci	r19, 0xFF	; 255
		if(IS_FALSE(flagBalActiv))	//nicht beim Balancing, sondern bei Neukonfiguration
		{
			//Gelesene Config auswerten
			if (i != 0) //nicht beim Senden der Konfig
			{
				for(j=5;j<10;j++)	//Erstes Byte vorerst nicht, da beim Lesen an GPIOs NICHT die Konfiguration, sondern die anliegende Spannung ausgegeben wird
     7e0:	26 30       	cpi	r18, 0x06	; 6
     7e2:	31 05       	cpc	r19, r1
     7e4:	79 f7       	brne	.-34     	; 0x7c4 <bmschip_writeConfig+0x1f0>
						return 1;
					}
				}
			}
		}
		spi.locked = 0; //SPI muss freigegeben werden, wenn current_byte neu gesetzt werden soll
     7e6:	d6 01       	movw	r26, r12
     7e8:	92 96       	adiw	r26, 0x22	; 34
     7ea:	1c 92       	st	X, r1
	
	SPI_CS_LTC6804_HIGH;
	spi.locked=0;
	
	//Konfiguration zur Kontrolle lesen
	for (i=0; i<=slave_boards; i++)		//Der Reihe nach wird jetzt die Konfiguration der Boards eingeholt
     7ec:	1f 5f       	subi	r17, 0xFF	; 255
     7ee:	90 91 26 07 	lds	r25, 0x0726
     7f2:	91 17       	cp	r25, r17
     7f4:	58 f6       	brcc	.-106    	; 0x78c <bmschip_writeConfig+0x1b8>
				}
			}
		}
		spi.locked = 0; //SPI muss freigegeben werden, wenn current_byte neu gesetzt werden soll
	}
	SPI_CS_LTC6804_HIGH;
     7f6:	41 9a       	sbi	0x08, 1	; 8
	spi.locked=0;
     7f8:	10 92 6e 07 	sts	0x076E, r1

	return 0;
}
     7fc:	68 96       	adiw	r28, 0x18	; 24
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	f8 94       	cli
     802:	de bf       	out	0x3e, r29	; 62
     804:	0f be       	out	0x3f, r0	; 63
     806:	cd bf       	out	0x3d, r28	; 61
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	df 90       	pop	r13
     816:	cf 90       	pop	r12
     818:	bf 90       	pop	r11
     81a:	af 90       	pop	r10
     81c:	9f 90       	pop	r9
     81e:	08 95       	ret

00000820 <bmschip_init>:
*/
// *****************************************************************************************

// *** Funktion zur Initialisierung der LTC6804 - Slaves ***********************************
void bmschip_init(uint16_t undervoltage, uint16_t overvoltage)
{
     820:	bf 92       	push	r11
     822:	cf 92       	push	r12
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	1f 92       	push	r1
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
	uint8_t i, cmd=0x00;
     838:	19 82       	std	Y+1, r1	; 0x01
	uint8_t *p_cmd = &cmd;
	
	
	// Befehlsregister fuer Zellspannungen lesen initialisieren
	//Group A
	ltc6804.adcv[0][0] = 0x00;	// 00000000	Konfigurations-Befehl
     83a:	eb e2       	ldi	r30, 0x2B	; 43
     83c:	f7 e0       	ldi	r31, 0x07	; 7
     83e:	16 82       	std	Z+6, r1	; 0x06
	ltc6804.adcv[0][1] = 0x04;	// 00000100	Konfigurations-Befehl
     840:	84 e0       	ldi	r24, 0x04	; 4
     842:	87 83       	std	Z+7, r24	; 0x07
	ltc6804.adcv[0][2] = 0x07; 	// 00000111 PEC-High-Byte
     844:	97 e0       	ldi	r25, 0x07	; 7
     846:	90 87       	std	Z+8, r25	; 0x08
	ltc6804.adcv[0][3] = 0xc2;	// 11000010 PEC-Low-Byte
     848:	92 ec       	ldi	r25, 0xC2	; 194
     84a:	91 87       	std	Z+9, r25	; 0x09
	//Group B
	ltc6804.adcv[1][0] = 0x00;	// 00000000	Konfigurations-Befehl	
     84c:	12 86       	std	Z+10, r1	; 0x0a
	ltc6804.adcv[1][1] = 0x06;	// 00000110	Konfigurations-Befehl
     84e:	96 e0       	ldi	r25, 0x06	; 6
     850:	93 87       	std	Z+11, r25	; 0x0b
	ltc6804.adcv[1][2] = 0x9a;	// 10011010 PEC-High-Byte
     852:	9a e9       	ldi	r25, 0x9A	; 154
     854:	94 87       	std	Z+12, r25	; 0x0c
	ltc6804.adcv[1][3] = 0x94;	// 10010100 PEC-Low-Byte
     856:	94 e9       	ldi	r25, 0x94	; 148
     858:	95 87       	std	Z+13, r25	; 0x0d
	//Group C
	ltc6804.adcv[2][0] = 0x00;	// 00000000	Konfigurations-Befehl
     85a:	16 86       	std	Z+14, r1	; 0x0e
	ltc6804.adcv[2][1] = 0x08;	// 00001000	Konfigurations-Befehl
     85c:	98 e0       	ldi	r25, 0x08	; 8
     85e:	97 87       	std	Z+15, r25	; 0x0f
	ltc6804.adcv[2][2] = 0x5e;	// 01011110 PEC-High-Byte
     860:	9e e5       	ldi	r25, 0x5E	; 94
     862:	90 8b       	std	Z+16, r25	; 0x10
	ltc6804.adcv[2][3] = 0x52;	// 01010010 PEC-Low-Byte
     864:	92 e5       	ldi	r25, 0x52	; 82
     866:	91 8b       	std	Z+17, r25	; 0x11
	//Group D
	ltc6804.adcv[3][0] = 0x00;	// 00000000	Konfigurations-Befehl		
     868:	12 8a       	std	Z+18, r1	; 0x12
	ltc6804.adcv[3][1] = 0x0A;	// 00001010	Konfigurations-Befehl
     86a:	9a e0       	ldi	r25, 0x0A	; 10
     86c:	93 8b       	std	Z+19, r25	; 0x13
	ltc6804.adcv[3][2] = 0xc3;	// 11000011 PEC-High-Byte
     86e:	93 ec       	ldi	r25, 0xC3	; 195
     870:	94 8b       	std	Z+20, r25	; 0x14
	ltc6804.adcv[3][3] = 0x04;	// 00000100 PEC-Low-Byte
     872:	85 8b       	std	Z+21, r24	; 0x15
	
	for(i=0; i<slave_boards; i++)	//Keine Zelle darf zu Beginn gebalanced werden
     874:	90 91 26 07 	lds	r25, 0x0726
     878:	99 23       	and	r25, r25
     87a:	41 f0       	breq	.+16     	; 0x88c <bmschip_init+0x6c>
     87c:	ed e5       	ldi	r30, 0x5D	; 93
     87e:	f9 e0       	ldi	r31, 0x09	; 9
     880:	80 e0       	ldi	r24, 0x00	; 0
	{
		bms.balancing.cells[i]= 0x0000;
     882:	11 92       	st	Z+, r1
     884:	11 92       	st	Z+, r1
	ltc6804.adcv[3][0] = 0x00;	// 00000000	Konfigurations-Befehl		
	ltc6804.adcv[3][1] = 0x0A;	// 00001010	Konfigurations-Befehl
	ltc6804.adcv[3][2] = 0xc3;	// 11000011 PEC-High-Byte
	ltc6804.adcv[3][3] = 0x04;	// 00000100 PEC-Low-Byte
	
	for(i=0; i<slave_boards; i++)	//Keine Zelle darf zu Beginn gebalanced werden
     886:	8f 5f       	subi	r24, 0xFF	; 255
     888:	89 17       	cp	r24, r25
     88a:	d8 f3       	brcs	.-10     	; 0x882 <bmschip_init+0x62>
	{
		bms.balancing.cells[i]= 0x0000;
	}
	bms.bms_flag = 0x00;	//Alle Flags erst einmal ausschalten
     88c:	10 92 cb 07 	sts	0x07CB, r1
	
	bms.balancing.undervoltage = UNDERVOLT;	//erwuenschte Unterspannung übertragen
     890:	88 ea       	ldi	r24, 0xA8	; 168
     892:	91 e6       	ldi	r25, 0x61	; 97
     894:	90 93 a2 09 	sts	0x09A2, r25
     898:	80 93 a1 09 	sts	0x09A1, r24
	bms.balancing.overvoltage = OVERVOLT;	//erwuenschte Ueberspannung übertragen
     89c:	80 e1       	ldi	r24, 0x10	; 16
     89e:	94 ea       	ldi	r25, 0xA4	; 164
     8a0:	90 93 a4 09 	sts	0x09A4, r25
     8a4:	80 93 a3 09 	sts	0x09A3, r24
	bmschip_setOvUnVoltage(&bms.balancing.undervoltage, &bms.balancing.overvoltage);	//Tatsaechlich moegliche Grenzen für den LTC6804 bestimmen
     8a8:	63 ea       	ldi	r22, 0xA3	; 163
     8aa:	79 e0       	ldi	r23, 0x09	; 9
     8ac:	81 ea       	ldi	r24, 0xA1	; 161
     8ae:	99 e0       	ldi	r25, 0x09	; 9
     8b0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <bmschip_setOvUnVoltage>
	for (i=0; i<slave_boards; i++)
     8b4:	80 91 26 07 	lds	r24, 0x0726
     8b8:	88 23       	and	r24, r24
     8ba:	09 f4       	brne	.+2      	; 0x8be <bmschip_init+0x9e>
     8bc:	42 c0       	rjmp	.+132    	; 0x942 <bmschip_init+0x122>
     8be:	b1 2c       	mov	r11, r1
	{
		while(!(bmschip_spi_rw(p_cmd, 1)));	//Dummybyte, um den isoSPI aufzuwecken
		
		SPI_CS_LTC6804_HIGH;
		spi.locked=0;
     8c0:	0f 2e       	mov	r0, r31
     8c2:	fc e4       	ldi	r31, 0x4C	; 76
     8c4:	cf 2e       	mov	r12, r31
     8c6:	f7 e0       	ldi	r31, 0x07	; 7
     8c8:	df 2e       	mov	r13, r31
     8ca:	f0 2d       	mov	r31, r0
		wait_count = TCNT1;
     8cc:	04 e8       	ldi	r16, 0x84	; 132
     8ce:	10 e0       	ldi	r17, 0x00	; 0
		while ((((wait_count + 800) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 800))));	//400us
     8d0:	0f 2e       	mov	r0, r31
     8d2:	f6 e8       	ldi	r31, 0x86	; 134
     8d4:	ef 2e       	mov	r14, r31
     8d6:	f1 2c       	mov	r15, r1
     8d8:	f0 2d       	mov	r31, r0
	bms.balancing.undervoltage = UNDERVOLT;	//erwuenschte Unterspannung übertragen
	bms.balancing.overvoltage = OVERVOLT;	//erwuenschte Ueberspannung übertragen
	bmschip_setOvUnVoltage(&bms.balancing.undervoltage, &bms.balancing.overvoltage);	//Tatsaechlich moegliche Grenzen für den LTC6804 bestimmen
	for (i=0; i<slave_boards; i++)
	{
		while(!(bmschip_spi_rw(p_cmd, 1)));	//Dummybyte, um den isoSPI aufzuwecken
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 ab 01 	call	0x356	; 0x356 <bmschip_spi_rw>
     8e4:	88 23       	and	r24, r24
     8e6:	c9 f3       	breq	.-14     	; 0x8da <bmschip_init+0xba>
		
		SPI_CS_LTC6804_HIGH;
     8e8:	41 9a       	sbi	0x08, 1	; 8
		spi.locked=0;
     8ea:	f6 01       	movw	r30, r12
     8ec:	12 a2       	std	Z+34, r1	; 0x22
		wait_count = TCNT1;
     8ee:	f8 01       	movw	r30, r16
     8f0:	40 81       	ld	r20, Z
     8f2:	51 81       	ldd	r21, Z+1	; 0x01
     8f4:	50 93 2a 07 	sts	0x072A, r21
     8f8:	40 93 29 07 	sts	0x0729, r20
		while ((((wait_count + 800) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 800))));	//400us
     8fc:	9a 01       	movw	r18, r20
     8fe:	20 5e       	subi	r18, 0xE0	; 224
     900:	3c 4f       	sbci	r19, 0xFC	; 252
     902:	f8 01       	movw	r30, r16
     904:	80 81       	ld	r24, Z
     906:	91 81       	ldd	r25, Z+1	; 0x01
     908:	28 17       	cp	r18, r24
     90a:	39 07       	cpc	r19, r25
     90c:	28 f0       	brcs	.+10     	; 0x918 <bmschip_init+0xf8>
     90e:	80 81       	ld	r24, Z
     910:	91 81       	ldd	r25, Z+1	; 0x01
     912:	48 17       	cp	r20, r24
     914:	59 07       	cpc	r21, r25
     916:	a8 f3       	brcs	.-22     	; 0x902 <bmschip_init+0xe2>
     918:	f8 01       	movw	r30, r16
     91a:	80 81       	ld	r24, Z
     91c:	91 81       	ldd	r25, Z+1	; 0x01
     91e:	84 17       	cp	r24, r20
     920:	95 07       	cpc	r25, r21
     922:	50 f4       	brcc	.+20     	; 0x938 <bmschip_init+0x118>
     924:	80 81       	ld	r24, Z
     926:	91 81       	ldd	r25, Z+1	; 0x01
     928:	f7 01       	movw	r30, r14
     92a:	60 81       	ld	r22, Z
     92c:	71 81       	ldd	r23, Z+1	; 0x01
     92e:	86 0f       	add	r24, r22
     930:	97 1f       	adc	r25, r23
     932:	82 17       	cp	r24, r18
     934:	93 07       	cpc	r25, r19
     936:	28 f3       	brcs	.-54     	; 0x902 <bmschip_init+0xe2>
	bms.bms_flag = 0x00;	//Alle Flags erst einmal ausschalten
	
	bms.balancing.undervoltage = UNDERVOLT;	//erwuenschte Unterspannung übertragen
	bms.balancing.overvoltage = OVERVOLT;	//erwuenschte Ueberspannung übertragen
	bmschip_setOvUnVoltage(&bms.balancing.undervoltage, &bms.balancing.overvoltage);	//Tatsaechlich moegliche Grenzen für den LTC6804 bestimmen
	for (i=0; i<slave_boards; i++)
     938:	b3 94       	inc	r11
     93a:	80 91 26 07 	lds	r24, 0x0726
     93e:	b8 16       	cp	r11, r24
     940:	60 f2       	brcs	.-104    	; 0x8da <bmschip_init+0xba>
		SPI_CS_LTC6804_HIGH;
		spi.locked=0;
		wait_count = TCNT1;
		while ((((wait_count + 800) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 800))));	//400us
	}
	bmschip_writeConfig();
     942:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <bmschip_writeConfig>
}
     946:	0f 90       	pop	r0
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	ff 90       	pop	r15
     952:	ef 90       	pop	r14
     954:	df 90       	pop	r13
     956:	cf 90       	pop	r12
     958:	bf 90       	pop	r11
     95a:	08 95       	ret

0000095c <bmschip_getVoltages>:
}
// *****************************************************************************************

// *** Funktion zum messen der Zellspannungen **********************************************
uint8_t bmschip_getVoltages(uint16_t *voltage)
{
     95c:	2f 92       	push	r2
     95e:	3f 92       	push	r3
     960:	4f 92       	push	r4
     962:	5f 92       	push	r5
     964:	6f 92       	push	r6
     966:	7f 92       	push	r7
     968:	8f 92       	push	r8
     96a:	9f 92       	push	r9
     96c:	af 92       	push	r10
     96e:	bf 92       	push	r11
     970:	cf 92       	push	r12
     972:	df 92       	push	r13
     974:	ef 92       	push	r14
     976:	ff 92       	push	r15
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
     984:	68 97       	sbiw	r28, 0x18	; 24
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	6c 01       	movw	r12, r24
	uint8_t receive[8];
	uint16_t wait_count;		//Wartezeit für ADC-Messung vom LTC6804
	uint32_t wait_milli;		//Wartezeit in Millisekunden

	// LTC ADC starten
	bmschip_startAdc();
     992:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <bmschip_startAdc>
	
	//LTC ADC Wandlung abwarten (2500us) 
	//1 Zaehlschritt entspricht 0.5us
	wait_count = TCNT1;
     996:	20 91 84 00 	lds	r18, 0x0084
     99a:	30 91 85 00 	lds	r19, 0x0085
	wait_milli = millisec_count;
     99e:	40 91 fe 06 	lds	r20, 0x06FE
     9a2:	50 91 ff 06 	lds	r21, 0x06FF
     9a6:	60 91 00 07 	lds	r22, 0x0700
     9aa:	70 91 01 07 	lds	r23, 0x0701
	while((wait_milli+2) > millisec_count);	//2000us
     9ae:	4e 5f       	subi	r20, 0xFE	; 254
     9b0:	5f 4f       	sbci	r21, 0xFF	; 255
     9b2:	6f 4f       	sbci	r22, 0xFF	; 255
     9b4:	7f 4f       	sbci	r23, 0xFF	; 255
     9b6:	80 91 fe 06 	lds	r24, 0x06FE
     9ba:	90 91 ff 06 	lds	r25, 0x06FF
     9be:	a0 91 00 07 	lds	r26, 0x0700
     9c2:	b0 91 01 07 	lds	r27, 0x0701
     9c6:	84 17       	cp	r24, r20
     9c8:	95 07       	cpc	r25, r21
     9ca:	a6 07       	cpc	r26, r22
     9cc:	b7 07       	cpc	r27, r23
     9ce:	98 f3       	brcs	.-26     	; 0x9b6 <bmschip_getVoltages+0x5a>
	while(wait_count >= TCNT1);
     9d0:	e4 e8       	ldi	r30, 0x84	; 132
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	80 81       	ld	r24, Z
     9d6:	91 81       	ldd	r25, Z+1	; 0x01
     9d8:	28 17       	cp	r18, r24
     9da:	39 07       	cpc	r19, r25
     9dc:	d8 f7       	brcc	.-10     	; 0x9d4 <bmschip_getVoltages+0x78>
	wait_count = TCNT1;
     9de:	40 91 84 00 	lds	r20, 0x0084
     9e2:	50 91 85 00 	lds	r21, 0x0085
	while ((((wait_count + 1000) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 1000)))); //500us
     9e6:	9a 01       	movw	r18, r20
     9e8:	28 51       	subi	r18, 0x18	; 24
     9ea:	3c 4f       	sbci	r19, 0xFC	; 252
     9ec:	e4 e8       	ldi	r30, 0x84	; 132
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	a6 e8       	ldi	r26, 0x86	; 134
     9f2:	b0 e0       	ldi	r27, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	91 81       	ldd	r25, Z+1	; 0x01
     9f8:	28 17       	cp	r18, r24
     9fa:	39 07       	cpc	r19, r25
     9fc:	28 f0       	brcs	.+10     	; 0xa08 <bmschip_getVoltages+0xac>
     9fe:	80 81       	ld	r24, Z
     a00:	91 81       	ldd	r25, Z+1	; 0x01
     a02:	48 17       	cp	r20, r24
     a04:	59 07       	cpc	r21, r25
     a06:	b0 f3       	brcs	.-20     	; 0x9f4 <bmschip_getVoltages+0x98>
     a08:	80 81       	ld	r24, Z
     a0a:	91 81       	ldd	r25, Z+1	; 0x01
     a0c:	84 17       	cp	r24, r20
     a0e:	95 07       	cpc	r25, r21
     a10:	08 f0       	brcs	.+2      	; 0xa14 <bmschip_getVoltages+0xb8>
     a12:	92 c0       	rjmp	.+292    	; 0xb38 <bmschip_getVoltages+0x1dc>
     a14:	80 81       	ld	r24, Z
     a16:	91 81       	ldd	r25, Z+1	; 0x01
     a18:	6d 91       	ld	r22, X+
     a1a:	7c 91       	ld	r23, X
     a1c:	11 97       	sbiw	r26, 0x01	; 1
     a1e:	86 0f       	add	r24, r22
     a20:	97 1f       	adc	r25, r23
     a22:	82 17       	cp	r24, r18
     a24:	93 07       	cpc	r25, r19
     a26:	30 f3       	brcs	.-52     	; 0x9f4 <bmschip_getVoltages+0x98>
     a28:	18 8e       	std	Y+24, r1	; 0x18
     a2a:	1f 8a       	std	Y+23, r1	; 0x17
     a2c:	81 2c       	mov	r8, r1
     a2e:	91 2c       	mov	r9, r1
     a30:	87 c0       	rjmp	.+270    	; 0xb40 <bmschip_getVoltages+0x1e4>
		{
			cmd[i] = ltc6804.adcv[group][i];
		}
		for(i = 4; i < 12; i++)
		{
			cmd[i] = 0x00;
     a32:	11 92       	st	Z+, r1
	{
		for(i = 0; i < 4; i++)
		{
			cmd[i] = ltc6804.adcv[group][i];
		}
		for(i = 4; i < 12; i++)
     a34:	ea 15       	cp	r30, r10
     a36:	fb 05       	cpc	r31, r11
     a38:	e1 f7       	brne	.-8      	; 0xa32 <bmschip_getVoltages+0xd6>
		{
			cmd[i] = 0x00;
		}
		
		// Befehl und PEC schreiben
		while(!(bmschip_spi_rw(cmd, 4))); //Command schicken
     a3a:	64 e0       	ldi	r22, 0x04	; 4
     a3c:	ce 01       	movw	r24, r28
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	0e 94 ab 01 	call	0x356	; 0x356 <bmschip_spi_rw>
     a44:	88 23       	and	r24, r24
     a46:	c9 f3       	breq	.-14     	; 0xa3a <bmschip_getVoltages+0xde>
		spi.locked = 0;
     a48:	f8 01       	movw	r30, r16
     a4a:	12 a2       	std	Z+34, r1	; 0x22
		
		for (i=0; i<slave_boards; i++)
     a4c:	80 91 26 07 	lds	r24, 0x0726
     a50:	88 23       	and	r24, r24
     a52:	09 f4       	brne	.+2      	; 0xa56 <bmschip_getVoltages+0xfa>
     a54:	61 c0       	rjmp	.+194    	; 0xb18 <bmschip_getVoltages+0x1bc>
			//Emfangene Daten durch PEC-Berechnung pruefen
			pec = Pec15(&(receive[0]), 6);
			if(pec == ((((uint16_t)receive[6]) << 8) | receive[7]))	//Stimmt der PEC?
			{
				//Jeweilige Zellspannung in die entsprechende Nummer im Array übertragen (Standardmäßig: bms.volt.val[])
				voltage[group * 3 + (i*12)] = (((uint16_t)receive[1]) << 8) | receive[0];		
     a56:	ef 88       	ldd	r14, Y+23	; 0x17
     a58:	f8 8c       	ldd	r15, Y+24	; 0x18
     a5a:	51 2c       	mov	r5, r1
		while(!(bmschip_spi_rw(cmd, 4))); //Command schicken
		spi.locked = 0;
		
		for (i=0; i<slave_boards; i++)
		{
			while(!(bmschip_spi_rw(&cmd[4], 8)));
     a5c:	68 e0       	ldi	r22, 0x08	; 8
     a5e:	86 2d       	mov	r24, r6
     a60:	97 2d       	mov	r25, r7
     a62:	0e 94 ab 01 	call	0x356	; 0x356 <bmschip_spi_rw>
     a66:	88 23       	and	r24, r24
     a68:	c9 f3       	breq	.-14     	; 0xa5c <bmschip_getVoltages+0x100>
     a6a:	e3 2d       	mov	r30, r3
     a6c:	f4 2d       	mov	r31, r4
     a6e:	82 2d       	mov	r24, r2
     a70:	90 e0       	ldi	r25, 0x00	; 0
			for (k=0; k<8; k++)
			{
				receive[k] = spi.rx_buffer.b[k];	//Empfangene Werte übernehmen
     a72:	dc 01       	movw	r26, r24
     a74:	a4 5b       	subi	r26, 0xB4	; 180
     a76:	b8 4f       	sbci	r27, 0xF8	; 248
     a78:	50 96       	adiw	r26, 0x10	; 16
     a7a:	2c 91       	ld	r18, X
     a7c:	21 93       	st	Z+, r18
     a7e:	01 96       	adiw	r24, 0x01	; 1
		spi.locked = 0;
		
		for (i=0; i<slave_boards; i++)
		{
			while(!(bmschip_spi_rw(&cmd[4], 8)));
			for (k=0; k<8; k++)
     a80:	88 30       	cpi	r24, 0x08	; 8
     a82:	91 05       	cpc	r25, r1
     a84:	b1 f7       	brne	.-20     	; 0xa72 <bmschip_getVoltages+0x116>
			{
				receive[k] = spi.rx_buffer.b[k];	//Empfangene Werte übernehmen
			}
			
			//Emfangene Daten durch PEC-Berechnung pruefen
			pec = Pec15(&(receive[0]), 6);
     a86:	66 e0       	ldi	r22, 0x06	; 6
     a88:	83 2d       	mov	r24, r3
     a8a:	94 2d       	mov	r25, r4
     a8c:	0e 94 56 02 	call	0x4ac	; 0x4ac <Pec15>
			if(pec == ((((uint16_t)receive[6]) << 8) | receive[7]))	//Stimmt der PEC?
     a90:	2b 89       	ldd	r18, Y+19	; 0x13
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	32 2f       	mov	r19, r18
     a96:	22 27       	eor	r18, r18
     a98:	4c 89       	ldd	r20, Y+20	; 0x14
     a9a:	24 2b       	or	r18, r20
     a9c:	28 17       	cp	r18, r24
     a9e:	39 07       	cpc	r19, r25
     aa0:	91 f5       	brne	.+100    	; 0xb06 <bmschip_getVoltages+0x1aa>
			{
				//Jeweilige Zellspannung in die entsprechende Nummer im Array übertragen (Standardmäßig: bms.volt.val[])
				voltage[group * 3 + (i*12)] = (((uint16_t)receive[1]) << 8) | receive[0];		
     aa2:	85 2d       	mov	r24, r5
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	fc 01       	movw	r30, r24
     aa8:	ee 0f       	add	r30, r30
     aaa:	ff 1f       	adc	r31, r31
     aac:	e8 0f       	add	r30, r24
     aae:	f9 1f       	adc	r31, r25
     ab0:	ee 0f       	add	r30, r30
     ab2:	ff 1f       	adc	r31, r31
     ab4:	ee 0f       	add	r30, r30
     ab6:	ff 1f       	adc	r31, r31
     ab8:	ee 0f       	add	r30, r30
     aba:	ff 1f       	adc	r31, r31
     abc:	ee 0d       	add	r30, r14
     abe:	ff 1d       	adc	r31, r15
     ac0:	ec 0d       	add	r30, r12
     ac2:	fd 1d       	adc	r31, r13
     ac4:	8e 85       	ldd	r24, Y+14	; 0x0e
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	98 2f       	mov	r25, r24
     aca:	88 27       	eor	r24, r24
     acc:	2d 85       	ldd	r18, Y+13	; 0x0d
     ace:	82 2b       	or	r24, r18
     ad0:	91 83       	std	Z+1, r25	; 0x01
     ad2:	80 83       	st	Z, r24
				voltage[group * 3 + (i*12) + 1] = (((uint16_t)receive[3]) << 8) | receive[2];
     ad4:	88 89       	ldd	r24, Y+16	; 0x10
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	98 2f       	mov	r25, r24
     ada:	88 27       	eor	r24, r24
     adc:	2f 85       	ldd	r18, Y+15	; 0x0f
     ade:	82 2b       	or	r24, r18
     ae0:	93 83       	std	Z+3, r25	; 0x03
     ae2:	82 83       	std	Z+2, r24	; 0x02
				voltage[group * 3 + (i*12) + 2] = (((uint16_t)receive[5]) << 8) | receive[4];
     ae4:	8a 89       	ldd	r24, Y+18	; 0x12
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	98 2f       	mov	r25, r24
     aea:	88 27       	eor	r24, r24
     aec:	29 89       	ldd	r18, Y+17	; 0x11
     aee:	82 2b       	or	r24, r18
     af0:	95 83       	std	Z+5, r25	; 0x05
     af2:	84 83       	std	Z+4, r24	; 0x04
				usart_transmit_string("F3");
				SPI_CS_LTC6804_HIGH;
				spi.locked = 0;
				return 1;
			}
			spi.locked = 0;
     af4:	f8 01       	movw	r30, r16
     af6:	12 a2       	std	Z+34, r1	; 0x22
		
		// Befehl und PEC schreiben
		while(!(bmschip_spi_rw(cmd, 4))); //Command schicken
		spi.locked = 0;
		
		for (i=0; i<slave_boards; i++)
     af8:	53 94       	inc	r5
     afa:	80 91 26 07 	lds	r24, 0x0726
     afe:	58 16       	cp	r5, r24
     b00:	08 f4       	brcc	.+2      	; 0xb04 <bmschip_getVoltages+0x1a8>
     b02:	ac cf       	rjmp	.-168    	; 0xa5c <bmschip_getVoltages+0x100>
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <bmschip_getVoltages+0x1bc>
				voltage[group * 3 + (i*12) + 1] = (((uint16_t)receive[3]) << 8) | receive[2];
				voltage[group * 3 + (i*12) + 2] = (((uint16_t)receive[5]) << 8) | receive[4];
			}
			else
			{
				usart_transmit_string("F3");
     b06:	87 e0       	ldi	r24, 0x07	; 7
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
				SPI_CS_LTC6804_HIGH;
     b0e:	41 9a       	sbi	0x08, 1	; 8
				spi.locked = 0;
     b10:	10 92 6e 07 	sts	0x076E, r1
				return 1;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	3d c0       	rjmp	.+122    	; 0xb92 <bmschip_getVoltages+0x236>
			}
			spi.locked = 0;
		}
		SPI_CS_LTC6804_HIGH;
     b18:	41 9a       	sbi	0x08, 1	; 8
		spi.locked = 0;
     b1a:	f8 01       	movw	r30, r16
     b1c:	12 a2       	std	Z+34, r1	; 0x22
     b1e:	ff ef       	ldi	r31, 0xFF	; 255
     b20:	8f 1a       	sub	r8, r31
     b22:	9f 0a       	sbc	r9, r31
     b24:	8f 89       	ldd	r24, Y+23	; 0x17
     b26:	98 8d       	ldd	r25, Y+24	; 0x18
     b28:	06 96       	adiw	r24, 0x06	; 6
     b2a:	98 8f       	std	Y+24, r25	; 0x18
     b2c:	8f 8b       	std	Y+23, r24	; 0x17
	while(wait_count >= TCNT1);
	wait_count = TCNT1;
	while ((((wait_count + 1000) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 1000)))); //500us
	
	//LTC Spannungen auslesen
	for(group = 0; group < 4; group++)		
     b2e:	94 e0       	ldi	r25, 0x04	; 4
     b30:	89 16       	cp	r8, r25
     b32:	91 04       	cpc	r9, r1
     b34:	a1 f4       	brne	.+40     	; 0xb5e <bmschip_getVoltages+0x202>
     b36:	2c c0       	rjmp	.+88     	; 0xb90 <bmschip_getVoltages+0x234>
     b38:	18 8e       	std	Y+24, r1	; 0x18
     b3a:	1f 8a       	std	Y+23, r1	; 0x17
     b3c:	81 2c       	mov	r8, r1
     b3e:	91 2c       	mov	r9, r1
     b40:	fe 01       	movw	r30, r28
     b42:	35 96       	adiw	r30, 0x05	; 5
     b44:	fe 8b       	std	Y+22, r31	; 0x16
     b46:	ed 8b       	std	Y+21, r30	; 0x15
     b48:	5e 01       	movw	r10, r28
     b4a:	fd e0       	ldi	r31, 0x0D	; 13
     b4c:	af 0e       	add	r10, r31
     b4e:	b1 1c       	adc	r11, r1
			cmd[i] = 0x00;
		}
		
		// Befehl und PEC schreiben
		while(!(bmschip_spi_rw(cmd, 4))); //Command schicken
		spi.locked = 0;
     b50:	0c e4       	ldi	r16, 0x4C	; 76
     b52:	17 e0       	ldi	r17, 0x07	; 7
		
		for (i=0; i<slave_boards; i++)
		{
			while(!(bmschip_spi_rw(&cmd[4], 8)));
     b54:	6d 88       	ldd	r6, Y+21	; 0x15
     b56:	7e 88       	ldd	r7, Y+22	; 0x16
     b58:	3a 2c       	mov	r3, r10
     b5a:	4b 2c       	mov	r4, r11
     b5c:	21 2c       	mov	r2, r1
	//LTC Spannungen auslesen
	for(group = 0; group < 4; group++)		
	{
		for(i = 0; i < 4; i++)
		{
			cmd[i] = ltc6804.adcv[group][i];
     b5e:	f4 01       	movw	r30, r8
     b60:	ee 0f       	add	r30, r30
     b62:	ff 1f       	adc	r31, r31
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	e5 5d       	subi	r30, 0xD5	; 213
     b6a:	f8 4f       	sbci	r31, 0xF8	; 248
     b6c:	86 81       	ldd	r24, Z+6	; 0x06
     b6e:	89 83       	std	Y+1, r24	; 0x01
     b70:	87 81       	ldd	r24, Z+7	; 0x07
     b72:	8a 83       	std	Y+2, r24	; 0x02
     b74:	d4 01       	movw	r26, r8
     b76:	aa 0f       	add	r26, r26
     b78:	bb 1f       	adc	r27, r27
     b7a:	aa 0f       	add	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	ad 5c       	subi	r26, 0xCD	; 205
     b80:	b8 4f       	sbci	r27, 0xF8	; 248
     b82:	8c 91       	ld	r24, X
     b84:	8b 83       	std	Y+3, r24	; 0x03
     b86:	81 85       	ldd	r24, Z+9	; 0x09
     b88:	8c 83       	std	Y+4, r24	; 0x04
     b8a:	fe 01       	movw	r30, r28
     b8c:	35 96       	adiw	r30, 0x05	; 5
     b8e:	51 cf       	rjmp	.-350    	; 0xa32 <bmschip_getVoltages+0xd6>
		}
		SPI_CS_LTC6804_HIGH;
		spi.locked = 0;
	}

	return 0;
     b90:	80 e0       	ldi	r24, 0x00	; 0
}
     b92:	68 96       	adiw	r28, 0x18	; 24
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	ff 90       	pop	r15
     ba8:	ef 90       	pop	r14
     baa:	df 90       	pop	r13
     bac:	cf 90       	pop	r12
     bae:	bf 90       	pop	r11
     bb0:	af 90       	pop	r10
     bb2:	9f 90       	pop	r9
     bb4:	8f 90       	pop	r8
     bb6:	7f 90       	pop	r7
     bb8:	6f 90       	pop	r6
     bba:	5f 90       	pop	r5
     bbc:	4f 90       	pop	r4
     bbe:	3f 90       	pop	r3
     bc0:	2f 90       	pop	r2
     bc2:	08 95       	ret

00000bc4 <bmschip_startGPIO>:
}
// *****************************************************************************************

// *** Temperaturmessung *******************************************************************
void bmschip_startGPIO(uint8_t pin)
{
     bc4:	af 92       	push	r10
     bc6:	bf 92       	push	r11
     bc8:	cf 92       	push	r12
     bca:	df 92       	push	r13
     bcc:	ef 92       	push	r14
     bce:	ff 92       	push	r15
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	00 d0       	rcall	.+0      	; 0xbda <bmschip_startGPIO+0x16>
     bda:	00 d0       	rcall	.+0      	; 0xbdc <bmschip_startGPIO+0x18>
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	a8 2e       	mov	r10, r24
	uint8_t i;
	uint8_t cmd[4];
	uint16_t pec;
	
	
	cmd[0]=0x00;	
     be2:	19 82       	std	Y+1, r1	; 0x01
	for (i=0; i<slave_boards; i++)
     be4:	80 91 26 07 	lds	r24, 0x0726
     be8:	88 23       	and	r24, r24
     bea:	09 f4       	brne	.+2      	; 0xbee <bmschip_startGPIO+0x2a>
     bec:	42 c0       	rjmp	.+132    	; 0xc72 <bmschip_startGPIO+0xae>
     bee:	b1 2c       	mov	r11, r1
	{
		while(!(bmschip_spi_rw(cmd, 1)));		//Dummybyte, um den IsoSPI aufzuwecken
		SPI_CS_LTC6804_HIGH;
		spi.locked = 0;
     bf0:	0f 2e       	mov	r0, r31
     bf2:	fc e4       	ldi	r31, 0x4C	; 76
     bf4:	cf 2e       	mov	r12, r31
     bf6:	f7 e0       	ldi	r31, 0x07	; 7
     bf8:	df 2e       	mov	r13, r31
     bfa:	f0 2d       	mov	r31, r0
		wait_count = TCNT1;
     bfc:	04 e8       	ldi	r16, 0x84	; 132
     bfe:	10 e0       	ldi	r17, 0x00	; 0
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
     c00:	0f 2e       	mov	r0, r31
     c02:	f6 e8       	ldi	r31, 0x86	; 134
     c04:	ef 2e       	mov	r14, r31
     c06:	f1 2c       	mov	r15, r1
     c08:	f0 2d       	mov	r31, r0
	
	
	cmd[0]=0x00;	
	for (i=0; i<slave_boards; i++)
	{
		while(!(bmschip_spi_rw(cmd, 1)));		//Dummybyte, um den IsoSPI aufzuwecken
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	ce 01       	movw	r24, r28
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	0e 94 ab 01 	call	0x356	; 0x356 <bmschip_spi_rw>
     c14:	88 23       	and	r24, r24
     c16:	c9 f3       	breq	.-14     	; 0xc0a <bmschip_startGPIO+0x46>
		SPI_CS_LTC6804_HIGH;
     c18:	41 9a       	sbi	0x08, 1	; 8
		spi.locked = 0;
     c1a:	f6 01       	movw	r30, r12
     c1c:	12 a2       	std	Z+34, r1	; 0x22
		wait_count = TCNT1;
     c1e:	f8 01       	movw	r30, r16
     c20:	80 81       	ld	r24, Z
     c22:	91 81       	ldd	r25, Z+1	; 0x01
     c24:	90 93 2a 07 	sts	0x072A, r25
     c28:	80 93 29 07 	sts	0x0729, r24
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
     c2c:	ac 01       	movw	r20, r24
     c2e:	47 5e       	subi	r20, 0xE7	; 231
     c30:	5f 4f       	sbci	r21, 0xFF	; 255
     c32:	f8 01       	movw	r30, r16
     c34:	20 81       	ld	r18, Z
     c36:	31 81       	ldd	r19, Z+1	; 0x01
     c38:	42 17       	cp	r20, r18
     c3a:	53 07       	cpc	r21, r19
     c3c:	28 f0       	brcs	.+10     	; 0xc48 <bmschip_startGPIO+0x84>
     c3e:	20 81       	ld	r18, Z
     c40:	31 81       	ldd	r19, Z+1	; 0x01
     c42:	82 17       	cp	r24, r18
     c44:	93 07       	cpc	r25, r19
     c46:	a8 f3       	brcs	.-22     	; 0xc32 <bmschip_startGPIO+0x6e>
     c48:	f8 01       	movw	r30, r16
     c4a:	20 81       	ld	r18, Z
     c4c:	31 81       	ldd	r19, Z+1	; 0x01
     c4e:	28 17       	cp	r18, r24
     c50:	39 07       	cpc	r19, r25
     c52:	50 f4       	brcc	.+20     	; 0xc68 <bmschip_startGPIO+0xa4>
     c54:	20 81       	ld	r18, Z
     c56:	31 81       	ldd	r19, Z+1	; 0x01
     c58:	f7 01       	movw	r30, r14
     c5a:	60 81       	ld	r22, Z
     c5c:	71 81       	ldd	r23, Z+1	; 0x01
     c5e:	26 0f       	add	r18, r22
     c60:	37 1f       	adc	r19, r23
     c62:	24 17       	cp	r18, r20
     c64:	35 07       	cpc	r19, r21
     c66:	28 f3       	brcs	.-54     	; 0xc32 <bmschip_startGPIO+0x6e>
	uint8_t cmd[4];
	uint16_t pec;
	
	
	cmd[0]=0x00;	
	for (i=0; i<slave_boards; i++)
     c68:	b3 94       	inc	r11
     c6a:	80 91 26 07 	lds	r24, 0x0726
     c6e:	b8 16       	cp	r11, r24
     c70:	60 f2       	brcs	.-104    	; 0xc0a <bmschip_startGPIO+0x46>
		wait_count = TCNT1;
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
	}
	
	//Messbefehl	
	cmd[0] = 0x05; // 00000101	ADAX0	Normal-Mode									
     c72:	85 e0       	ldi	r24, 0x05	; 5
     c74:	89 83       	std	Y+1, r24	; 0x01
	cmd[1] = 0x60; // 01100000	ADAX1	Normal-Mode, Balancing wird unterbrochen	
	
	switch(pin)
     c76:	f3 e0       	ldi	r31, 0x03	; 3
     c78:	af 16       	cp	r10, r31
     c7a:	d1 f0       	breq	.+52     	; 0xcb0 <bmschip_startGPIO+0xec>
     c7c:	fa 15       	cp	r31, r10
     c7e:	38 f0       	brcs	.+14     	; 0xc8e <bmschip_startGPIO+0xca>
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	a8 16       	cp	r10, r24
     c84:	79 f0       	breq	.+30     	; 0xca4 <bmschip_startGPIO+0xe0>
     c86:	e2 e0       	ldi	r30, 0x02	; 2
     c88:	ae 16       	cp	r10, r30
     c8a:	79 f0       	breq	.+30     	; 0xcaa <bmschip_startGPIO+0xe6>
     c8c:	08 c0       	rjmp	.+16     	; 0xc9e <bmschip_startGPIO+0xda>
     c8e:	f5 e0       	ldi	r31, 0x05	; 5
     c90:	af 16       	cp	r10, r31
     c92:	a1 f0       	breq	.+40     	; 0xcbc <bmschip_startGPIO+0xf8>
     c94:	af 16       	cp	r10, r31
     c96:	78 f0       	brcs	.+30     	; 0xcb6 <bmschip_startGPIO+0xf2>
     c98:	86 e0       	ldi	r24, 0x06	; 6
     c9a:	a8 16       	cp	r10, r24
     c9c:	91 f0       	breq	.+36     	; 0xcc2 <bmschip_startGPIO+0xfe>
		while ((((wait_count + 25) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 25))));
	}
	
	//Messbefehl	
	cmd[0] = 0x05; // 00000101	ADAX0	Normal-Mode									
	cmd[1] = 0x60; // 01100000	ADAX1	Normal-Mode, Balancing wird unterbrochen	
     c9e:	80 e6       	ldi	r24, 0x60	; 96
     ca0:	8a 83       	std	Y+2, r24	; 0x02
     ca2:	11 c0       	rjmp	.+34     	; 0xcc6 <bmschip_startGPIO+0x102>
	
	switch(pin)
	{
		case 0:									//Alles		cmd[1] =									= 01100000
				break;
		case 1: cmd[1] |= (1<<0);				//GPIO 1	cmd[1] = 01100000 | 00000001				= 01100001
     ca4:	81 e6       	ldi	r24, 0x61	; 97
     ca6:	8a 83       	std	Y+2, r24	; 0x02
				break;
     ca8:	0e c0       	rjmp	.+28     	; 0xcc6 <bmschip_startGPIO+0x102>
		case 2: cmd[1] |= (1<<1);				//GPIO 2	cmd[1] = 01100000 | 00000010				= 01100010
     caa:	82 e6       	ldi	r24, 0x62	; 98
     cac:	8a 83       	std	Y+2, r24	; 0x02
				break;
     cae:	0b c0       	rjmp	.+22     	; 0xcc6 <bmschip_startGPIO+0x102>
		case 3: cmd[1] |= (1<<1) | (1<<0);		//GPIO 3	cmd[1] = 01100000 | 00000010 | 00000001		= 01100011
     cb0:	83 e6       	ldi	r24, 0x63	; 99
     cb2:	8a 83       	std	Y+2, r24	; 0x02
				break;
     cb4:	08 c0       	rjmp	.+16     	; 0xcc6 <bmschip_startGPIO+0x102>
		case 4: cmd[1] |= (1<<2);				//GPIO 4	cmd[1] = 01100000 | 00000100				= 01100100
     cb6:	84 e6       	ldi	r24, 0x64	; 100
     cb8:	8a 83       	std	Y+2, r24	; 0x02
				break;
     cba:	05 c0       	rjmp	.+10     	; 0xcc6 <bmschip_startGPIO+0x102>
		case 5: cmd[1] |= (1<<2) | (1<<0);		//GPIO 5	cmd[1] = 01100000 | 00000100 | 00000001		= 01100101		
     cbc:	85 e6       	ldi	r24, 0x65	; 101
     cbe:	8a 83       	std	Y+2, r24	; 0x02
				break;
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <bmschip_startGPIO+0x102>
		case 6: cmd[1] |= (1<<2) | (1<<1);		//VRef		cmd[1] = 01100000 | 00000100 | 00000010		= 01100110
     cc2:	86 e6       	ldi	r24, 0x66	; 102
     cc4:	8a 83       	std	Y+2, r24	; 0x02
				break;
	}
	
	pec = Pec15(cmd, 2);
     cc6:	62 e0       	ldi	r22, 0x02	; 2
     cc8:	ce 01       	movw	r24, r28
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	0e 94 56 02 	call	0x4ac	; 0x4ac <Pec15>
	cmd[2] = GET_HIGH_BYTE(pec);
     cd0:	9b 83       	std	Y+3, r25	; 0x03
	cmd[3] = GET_LOW_BYTE(pec);
     cd2:	8c 83       	std	Y+4, r24	; 0x04
		
	//Befehl und PEC schreiben
	while(!(bmschip_spi_rw(cmd, 4)));
     cd4:	64 e0       	ldi	r22, 0x04	; 4
     cd6:	ce 01       	movw	r24, r28
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	0e 94 ab 01 	call	0x356	; 0x356 <bmschip_spi_rw>
     cde:	88 23       	and	r24, r24
     ce0:	c9 f3       	breq	.-14     	; 0xcd4 <bmschip_startGPIO+0x110>
	
	SPI_CS_LTC6804_HIGH;
     ce2:	41 9a       	sbi	0x08, 1	; 8
	spi.locked=0;
     ce4:	10 92 6e 07 	sts	0x076E, r1
}
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	ff 90       	pop	r15
     cfa:	ef 90       	pop	r14
     cfc:	df 90       	pop	r13
     cfe:	cf 90       	pop	r12
     d00:	bf 90       	pop	r11
     d02:	af 90       	pop	r10
     d04:	08 95       	ret

00000d06 <bmschip_getTemperature>:
// *****************************************************************************************

// *** Temperaturwerte auslesen ************************************************************
uint8_t bmschip_getTemperature(uint8_t pin)		//vorerst nur GPIO 3 (pin=3)
{
     d06:	2f 92       	push	r2
     d08:	3f 92       	push	r3
     d0a:	4f 92       	push	r4
     d0c:	5f 92       	push	r5
     d0e:	6f 92       	push	r6
     d10:	7f 92       	push	r7
     d12:	8f 92       	push	r8
     d14:	9f 92       	push	r9
     d16:	af 92       	push	r10
     d18:	bf 92       	push	r11
     d1a:	cf 92       	push	r12
     d1c:	df 92       	push	r13
     d1e:	ef 92       	push	r14
     d20:	ff 92       	push	r15
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	6f 97       	sbiw	r28, 0x1f	; 31
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
	uint16_t wait_count;		//Wartezeit für ADC-Messung vom LTC6804
	sint32_t max;				//Zwischenwert für Maximaltemperatur im System
	sint64_t x;					//Zwischenwert für Temperaturkennlinie
	
	
	bmschip_startGPIO(pin);		//Spannung an jeweiligem GPIO
     d3a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <bmschip_startGPIO>
	wait_count = TCNT1;
     d3e:	20 91 84 00 	lds	r18, 0x0084
     d42:	30 91 85 00 	lds	r19, 0x0085
	while ((((wait_count + 810) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 900)))); //405us
     d46:	e4 e8       	ldi	r30, 0x84	; 132
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	a9 01       	movw	r20, r18
     d4c:	46 5d       	subi	r20, 0xD6	; 214
     d4e:	5c 4f       	sbci	r21, 0xFC	; 252
     d50:	a6 e8       	ldi	r26, 0x86	; 134
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	b9 01       	movw	r22, r18
     d56:	6c 57       	subi	r22, 0x7C	; 124
     d58:	7c 4f       	sbci	r23, 0xFC	; 252
     d5a:	80 81       	ld	r24, Z
     d5c:	91 81       	ldd	r25, Z+1	; 0x01
     d5e:	48 17       	cp	r20, r24
     d60:	59 07       	cpc	r21, r25
     d62:	28 f0       	brcs	.+10     	; 0xd6e <bmschip_getTemperature+0x68>
     d64:	80 81       	ld	r24, Z
     d66:	91 81       	ldd	r25, Z+1	; 0x01
     d68:	28 17       	cp	r18, r24
     d6a:	39 07       	cpc	r19, r25
     d6c:	b0 f3       	brcs	.-20     	; 0xd5a <bmschip_getTemperature+0x54>
     d6e:	80 81       	ld	r24, Z
     d70:	91 81       	ldd	r25, Z+1	; 0x01
     d72:	82 17       	cp	r24, r18
     d74:	93 07       	cpc	r25, r19
     d76:	50 f4       	brcc	.+20     	; 0xd8c <bmschip_getTemperature+0x86>
     d78:	80 81       	ld	r24, Z
     d7a:	91 81       	ldd	r25, Z+1	; 0x01
     d7c:	0d 91       	ld	r16, X+
     d7e:	1c 91       	ld	r17, X
     d80:	11 97       	sbiw	r26, 0x01	; 1
     d82:	80 0f       	add	r24, r16
     d84:	91 1f       	adc	r25, r17
     d86:	86 17       	cp	r24, r22
     d88:	97 07       	cpc	r25, r23
     d8a:	38 f3       	brcs	.-50     	; 0xd5a <bmschip_getTemperature+0x54>
	
	bmschip_startGPIO(6);		//Spannung an V_REF2
     d8c:	86 e0       	ldi	r24, 0x06	; 6
     d8e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <bmschip_startGPIO>
	wait_count = TCNT1;
     d92:	20 91 84 00 	lds	r18, 0x0084
     d96:	30 91 85 00 	lds	r19, 0x0085
	while ((((wait_count + 810) >= TCNT1)&&(wait_count<TCNT1)) || ((wait_count>TCNT1) && ((TCNT1 + ICR1)<(wait_count + 900)))); //405us
     d9a:	e4 e8       	ldi	r30, 0x84	; 132
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	a9 01       	movw	r20, r18
     da0:	46 5d       	subi	r20, 0xD6	; 214
     da2:	5c 4f       	sbci	r21, 0xFC	; 252
     da4:	a6 e8       	ldi	r26, 0x86	; 134
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	b9 01       	movw	r22, r18
     daa:	6c 57       	subi	r22, 0x7C	; 124
     dac:	7c 4f       	sbci	r23, 0xFC	; 252
     dae:	80 81       	ld	r24, Z
     db0:	91 81       	ldd	r25, Z+1	; 0x01
     db2:	48 17       	cp	r20, r24
     db4:	59 07       	cpc	r21, r25
     db6:	28 f0       	brcs	.+10     	; 0xdc2 <bmschip_getTemperature+0xbc>
     db8:	80 81       	ld	r24, Z
     dba:	91 81       	ldd	r25, Z+1	; 0x01
     dbc:	28 17       	cp	r18, r24
     dbe:	39 07       	cpc	r19, r25
     dc0:	b0 f3       	brcs	.-20     	; 0xdae <bmschip_getTemperature+0xa8>
     dc2:	80 81       	ld	r24, Z
     dc4:	91 81       	ldd	r25, Z+1	; 0x01
     dc6:	82 17       	cp	r24, r18
     dc8:	93 07       	cpc	r25, r19
     dca:	50 f4       	brcc	.+20     	; 0xde0 <bmschip_getTemperature+0xda>
     dcc:	80 81       	ld	r24, Z
     dce:	91 81       	ldd	r25, Z+1	; 0x01
     dd0:	0d 91       	ld	r16, X+
     dd2:	1c 91       	ld	r17, X
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	80 0f       	add	r24, r16
     dd8:	91 1f       	adc	r25, r17
     dda:	86 17       	cp	r24, r22
     ddc:	97 07       	cpc	r25, r23
     dde:	38 f3       	brcs	.-50     	; 0xdae <bmschip_getTemperature+0xa8>
	
	//LTC-Temperatur auslesen	
	//Register A lesen
	cmd[0] = 0x00;		//00000000
     de0:	19 82       	std	Y+1, r1	; 0x01
	cmd[1] = 0x0C;		//00001100
     de2:	8c e0       	ldi	r24, 0x0C	; 12
     de4:	8a 83       	std	Y+2, r24	; 0x02
	pec = Pec15(cmd, 2);
     de6:	62 e0       	ldi	r22, 0x02	; 2
     de8:	ce 01       	movw	r24, r28
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	0e 94 56 02 	call	0x4ac	; 0x4ac <Pec15>
	cmd[2] = GET_HIGH_BYTE(pec);
     df0:	9b 83       	std	Y+3, r25	; 0x03
	cmd[3] = GET_LOW_BYTE(pec);
     df2:	8c 83       	std	Y+4, r24	; 0x04
     df4:	7e 01       	movw	r14, r28
     df6:	05 e0       	ldi	r16, 0x05	; 5
     df8:	e0 0e       	add	r14, r16
     dfa:	f1 1c       	adc	r15, r1
     dfc:	6e 01       	movw	r12, r28
     dfe:	1d e0       	ldi	r17, 0x0D	; 13
     e00:	c1 0e       	add	r12, r17
     e02:	d1 1c       	adc	r13, r1
     e04:	f7 01       	movw	r30, r14
	
	for(i = 4; i < 12; i++)
	{
		cmd[i] = 0x00;
     e06:	11 92       	st	Z+, r1
	cmd[1] = 0x0C;		//00001100
	pec = Pec15(cmd, 2);
	cmd[2] = GET_HIGH_BYTE(pec);
	cmd[3] = GET_LOW_BYTE(pec);
	
	for(i = 4; i < 12; i++)
     e08:	ec 15       	cp	r30, r12
     e0a:	fd 05       	cpc	r31, r13
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <bmschip_getTemperature+0x100>
	{
		cmd[i] = 0x00;
	}
	
	while(!(bmschip_spi_rw(cmd, 4))); //Command schicken
     e0e:	64 e0       	ldi	r22, 0x04	; 4
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	0e 94 ab 01 	call	0x356	; 0x356 <bmschip_spi_rw>
     e18:	88 23       	and	r24, r24
     e1a:	c9 f3       	breq	.-14     	; 0xe0e <bmschip_getTemperature+0x108>
	spi.locked = 0;
     e1c:	10 92 6e 07 	sts	0x076E, r1

	//Spannungswerte an GPIO3 in bms.temp.V_temp[] uebertragen
		for(i=0; i<slave_boards; i++)
     e20:	80 91 26 07 	lds	r24, 0x0726
     e24:	88 23       	and	r24, r24
     e26:	09 f4       	brne	.+2      	; 0xe2a <bmschip_getTemperature+0x124>
     e28:	44 c0       	rjmp	.+136    	; 0xeb2 <bmschip_getTemperature+0x1ac>
     e2a:	b1 2c       	mov	r11, r1
	{
		while(!(bmschip_spi_rw(&cmd[4], 8)));
     e2c:	91 2c       	mov	r9, r1
     e2e:	a1 2c       	mov	r10, r1
		{
			SPI_CS_LTC6804_HIGH;
			spi.locked = 0;
			return 1;
		} 
		spi.locked = 0;
     e30:	0c e4       	ldi	r16, 0x4C	; 76
     e32:	17 e0       	ldi	r17, 0x07	; 7
	spi.locked = 0;

	//Spannungswerte an GPIO3 in bms.temp.V_temp[] uebertragen
		for(i=0; i<slave_boards; i++)
	{
		while(!(bmschip_spi_rw(&cmd[4], 8)));
     e34:	68 e0       	ldi	r22, 0x08	; 8
     e36:	ce 01       	movw	r24, r28
     e38:	05 96       	adiw	r24, 0x05	; 5
     e3a:	0e 94 ab 01 	call	0x356	; 0x356 <bmschip_spi_rw>
     e3e:	88 23       	and	r24, r24
     e40:	c9 f3       	breq	.-14     	; 0xe34 <bmschip_getTemperature+0x12e>
     e42:	fe 01       	movw	r30, r28
     e44:	3d 96       	adiw	r30, 0x0d	; 13
     e46:	89 2d       	mov	r24, r9
     e48:	9a 2d       	mov	r25, r10
		for (k=0; k<8; k++)
		{
			receive[k] = spi.rx_buffer.b[k];				
     e4a:	dc 01       	movw	r26, r24
     e4c:	a4 5b       	subi	r26, 0xB4	; 180
     e4e:	b8 4f       	sbci	r27, 0xF8	; 248
     e50:	50 96       	adiw	r26, 0x10	; 16
     e52:	2c 91       	ld	r18, X
     e54:	21 93       	st	Z+, r18
     e56:	01 96       	adiw	r24, 0x01	; 1

	//Spannungswerte an GPIO3 in bms.temp.V_temp[] uebertragen
		for(i=0; i<slave_boards; i++)
	{
		while(!(bmschip_spi_rw(&cmd[4], 8)));
		for (k=0; k<8; k++)
     e58:	88 30       	cpi	r24, 0x08	; 8
     e5a:	91 05       	cpc	r25, r1
     e5c:	b1 f7       	brne	.-20     	; 0xe4a <bmschip_getTemperature+0x144>
		{
			receive[k] = spi.rx_buffer.b[k];				
		}
		// Emfangene Daten durch Pec-Berechnung pruefen
		pec = Pec15(&(receive[0]), 6);
     e5e:	66 e0       	ldi	r22, 0x06	; 6
     e60:	ce 01       	movw	r24, r28
     e62:	0d 96       	adiw	r24, 0x0d	; 13
     e64:	0e 94 56 02 	call	0x4ac	; 0x4ac <Pec15>
		if(pec == ((((uint16_t)receive[6]) << 8) | receive[7]))
     e68:	2b 89       	ldd	r18, Y+19	; 0x13
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	32 2f       	mov	r19, r18
     e6e:	22 27       	eor	r18, r18
     e70:	4c 89       	ldd	r20, Y+20	; 0x14
     e72:	24 2b       	or	r18, r20
     e74:	28 17       	cp	r18, r24
     e76:	39 07       	cpc	r19, r25
     e78:	b9 f4       	brne	.+46     	; 0xea8 <bmschip_getTemperature+0x1a2>
		{
			bms.temp.V_temp[i] = (((uint16_t)receive[5]) << 8) | receive[4];	//GPIO3
     e7a:	eb 2d       	mov	r30, r11
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	ee 0f       	add	r30, r30
     e80:	ff 1f       	adc	r31, r31
     e82:	eb 55       	subi	r30, 0x5B	; 91
     e84:	f6 4f       	sbci	r31, 0xF6	; 246
     e86:	8a 89       	ldd	r24, Y+18	; 0x12
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	98 2f       	mov	r25, r24
     e8c:	88 27       	eor	r24, r24
     e8e:	29 89       	ldd	r18, Y+17	; 0x11
     e90:	82 2b       	or	r24, r18
     e92:	91 83       	std	Z+1, r25	; 0x01
     e94:	80 83       	st	Z, r24
		{
			SPI_CS_LTC6804_HIGH;
			spi.locked = 0;
			return 1;
		} 
		spi.locked = 0;
     e96:	d8 01       	movw	r26, r16
     e98:	92 96       	adiw	r26, 0x22	; 34
     e9a:	1c 92       	st	X, r1
	
	while(!(bmschip_spi_rw(cmd, 4))); //Command schicken
	spi.locked = 0;

	//Spannungswerte an GPIO3 in bms.temp.V_temp[] uebertragen
		for(i=0; i<slave_boards; i++)
     e9c:	b3 94       	inc	r11
     e9e:	80 91 26 07 	lds	r24, 0x0726
     ea2:	b8 16       	cp	r11, r24
     ea4:	38 f2       	brcs	.-114    	; 0xe34 <bmschip_getTemperature+0x12e>
     ea6:	05 c0       	rjmp	.+10     	; 0xeb2 <bmschip_getTemperature+0x1ac>
		{
			bms.temp.V_temp[i] = (((uint16_t)receive[5]) << 8) | receive[4];	//GPIO3
		}
		else
		{
			SPI_CS_LTC6804_HIGH;
     ea8:	41 9a       	sbi	0x08, 1	; 8
			spi.locked = 0;
     eaa:	10 92 6e 07 	sts	0x076E, r1
			return 1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	df c1       	rjmp	.+958    	; 0x1270 <__stack+0x171>
		} 
		spi.locked = 0;
	}
	SPI_CS_LTC6804_HIGH;
     eb2:	41 9a       	sbi	0x08, 1	; 8
	spi.locked = 0;
     eb4:	10 92 6e 07 	sts	0x076E, r1
		
	//Register B lesen
	cmd[0] = 0x00;		//00000000
     eb8:	19 82       	std	Y+1, r1	; 0x01
	cmd[1] = 0x0E;		//00001110
     eba:	8e e0       	ldi	r24, 0x0E	; 14
     ebc:	8a 83       	std	Y+2, r24	; 0x02
	pec = Pec15(cmd, 2);
     ebe:	62 e0       	ldi	r22, 0x02	; 2
     ec0:	ce 01       	movw	r24, r28
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	0e 94 56 02 	call	0x4ac	; 0x4ac <Pec15>
	cmd[2] = GET_HIGH_BYTE(pec);
     ec8:	9b 83       	std	Y+3, r25	; 0x03
	cmd[3] = GET_LOW_BYTE(pec);
     eca:	8c 83       	std	Y+4, r24	; 0x04
     ecc:	f7 01       	movw	r30, r14
	
	for(i = 4; i < 12; i++)
	{
		cmd[i] = 0x00;
     ece:	11 92       	st	Z+, r1
	cmd[1] = 0x0E;		//00001110
	pec = Pec15(cmd, 2);
	cmd[2] = GET_HIGH_BYTE(pec);
	cmd[3] = GET_LOW_BYTE(pec);
	
	for(i = 4; i < 12; i++)
     ed0:	ce 16       	cp	r12, r30
     ed2:	df 06       	cpc	r13, r31
     ed4:	e1 f7       	brne	.-8      	; 0xece <bmschip_getTemperature+0x1c8>
	{
		cmd[i] = 0x00;
	}
	
	while(!(bmschip_spi_rw(cmd, 4))); //Command schicken
     ed6:	64 e0       	ldi	r22, 0x04	; 4
     ed8:	ce 01       	movw	r24, r28
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	0e 94 ab 01 	call	0x356	; 0x356 <bmschip_spi_rw>
     ee0:	88 23       	and	r24, r24
     ee2:	c9 f3       	breq	.-14     	; 0xed6 <bmschip_getTemperature+0x1d0>
	spi.locked = 0;
     ee4:	10 92 6e 07 	sts	0x076E, r1

	//Spannungswerte von V_REF2 in bms.temp.V_temp[] uebertragen
	for(i=0; i<slave_boards; i++)
     ee8:	80 91 26 07 	lds	r24, 0x0726
     eec:	88 23       	and	r24, r24
     eee:	09 f4       	brne	.+2      	; 0xef2 <bmschip_getTemperature+0x1ec>
     ef0:	47 c0       	rjmp	.+142    	; 0xf80 <bmschip_getTemperature+0x27a>
     ef2:	f1 2c       	mov	r15, r1
	{
		while(!(bmschip_spi_rw(&cmd[4], 8)));
     ef4:	d1 2c       	mov	r13, r1
     ef6:	e1 2c       	mov	r14, r1
			usart_transmit_string("F2");
			SPI_CS_LTC6804_HIGH;
			spi.locked = 0;
			return 1;
		}
		spi.locked = 0;
     ef8:	0c e4       	ldi	r16, 0x4C	; 76
     efa:	17 e0       	ldi	r17, 0x07	; 7
	spi.locked = 0;

	//Spannungswerte von V_REF2 in bms.temp.V_temp[] uebertragen
	for(i=0; i<slave_boards; i++)
	{
		while(!(bmschip_spi_rw(&cmd[4], 8)));
     efc:	68 e0       	ldi	r22, 0x08	; 8
     efe:	ce 01       	movw	r24, r28
     f00:	05 96       	adiw	r24, 0x05	; 5
     f02:	0e 94 ab 01 	call	0x356	; 0x356 <bmschip_spi_rw>
     f06:	88 23       	and	r24, r24
     f08:	c9 f3       	breq	.-14     	; 0xefc <bmschip_getTemperature+0x1f6>
     f0a:	fe 01       	movw	r30, r28
     f0c:	3d 96       	adiw	r30, 0x0d	; 13
     f0e:	8d 2d       	mov	r24, r13
     f10:	9e 2d       	mov	r25, r14
		for (k=0; k<8; k++)
		{
			receive[k] = spi.rx_buffer.b[k];
     f12:	dc 01       	movw	r26, r24
     f14:	a4 5b       	subi	r26, 0xB4	; 180
     f16:	b8 4f       	sbci	r27, 0xF8	; 248
     f18:	50 96       	adiw	r26, 0x10	; 16
     f1a:	2c 91       	ld	r18, X
     f1c:	21 93       	st	Z+, r18
     f1e:	01 96       	adiw	r24, 0x01	; 1

	//Spannungswerte von V_REF2 in bms.temp.V_temp[] uebertragen
	for(i=0; i<slave_boards; i++)
	{
		while(!(bmschip_spi_rw(&cmd[4], 8)));
		for (k=0; k<8; k++)
     f20:	88 30       	cpi	r24, 0x08	; 8
     f22:	91 05       	cpc	r25, r1
     f24:	b1 f7       	brne	.-20     	; 0xf12 <bmschip_getTemperature+0x20c>
		{
			receive[k] = spi.rx_buffer.b[k];
		}
		//Emfangene Daten durch Pec-Berechnung pruefen
		pec = Pec15(&(receive[0]), 6);
     f26:	66 e0       	ldi	r22, 0x06	; 6
     f28:	ce 01       	movw	r24, r28
     f2a:	0d 96       	adiw	r24, 0x0d	; 13
     f2c:	0e 94 56 02 	call	0x4ac	; 0x4ac <Pec15>
		if(pec == ((((uint16_t)receive[6]) << 8) | receive[7]))
     f30:	2b 89       	ldd	r18, Y+19	; 0x13
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	32 2f       	mov	r19, r18
     f36:	22 27       	eor	r18, r18
     f38:	4c 89       	ldd	r20, Y+20	; 0x14
     f3a:	24 2b       	or	r18, r20
     f3c:	28 17       	cp	r18, r24
     f3e:	39 07       	cpc	r19, r25
     f40:	b1 f4       	brne	.+44     	; 0xf6e <bmschip_getTemperature+0x268>
		{
			bms.temp.V_reference[i] = (((uint16_t)receive[5]) << 8) | receive[4];	//V_REF2
     f42:	ef 2d       	mov	r30, r15
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	ee 0f       	add	r30, r30
     f48:	ff 1f       	adc	r31, r31
     f4a:	eb 53       	subi	r30, 0x3B	; 59
     f4c:	f6 4f       	sbci	r31, 0xF6	; 246
     f4e:	8a 89       	ldd	r24, Y+18	; 0x12
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	98 2f       	mov	r25, r24
     f54:	88 27       	eor	r24, r24
     f56:	29 89       	ldd	r18, Y+17	; 0x11
     f58:	82 2b       	or	r24, r18
     f5a:	91 83       	std	Z+1, r25	; 0x01
     f5c:	80 83       	st	Z, r24
			usart_transmit_string("F2");
			SPI_CS_LTC6804_HIGH;
			spi.locked = 0;
			return 1;
		}
		spi.locked = 0;
     f5e:	f8 01       	movw	r30, r16
     f60:	12 a2       	std	Z+34, r1	; 0x22
	
	while(!(bmschip_spi_rw(cmd, 4))); //Command schicken
	spi.locked = 0;

	//Spannungswerte von V_REF2 in bms.temp.V_temp[] uebertragen
	for(i=0; i<slave_boards; i++)
     f62:	f3 94       	inc	r15
     f64:	80 91 26 07 	lds	r24, 0x0726
     f68:	f8 16       	cp	r15, r24
     f6a:	40 f2       	brcs	.-112    	; 0xefc <bmschip_getTemperature+0x1f6>
     f6c:	09 c0       	rjmp	.+18     	; 0xf80 <bmschip_getTemperature+0x27a>
		{
			bms.temp.V_reference[i] = (((uint16_t)receive[5]) << 8) | receive[4];	//V_REF2
		}
		else
		{
			usart_transmit_string("F2");
     f6e:	8a e0       	ldi	r24, 0x0A	; 10
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
			SPI_CS_LTC6804_HIGH;
     f76:	41 9a       	sbi	0x08, 1	; 8
			spi.locked = 0;
     f78:	10 92 6e 07 	sts	0x076E, r1
			return 1;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	78 c1       	rjmp	.+752    	; 0x1270 <__stack+0x171>
		}
		spi.locked = 0;
	}
	SPI_CS_LTC6804_HIGH;
     f80:	41 9a       	sbi	0x08, 1	; 8
	spi.locked = 0;
     f82:	10 92 6e 07 	sts	0x076E, r1
		
	//Nachbildung der Thermistorkennlinie und Berechnung der Temperatur
	for(i=0; i<slave_boards; i++)
     f86:	f0 91 26 07 	lds	r31, 0x0726
     f8a:	fd 8f       	std	Y+29, r31	; 0x1d
     f8c:	ff 23       	and	r31, r31
     f8e:	09 f4       	brne	.+2      	; 0xf92 <bmschip_getTemperature+0x28c>
     f90:	64 c1       	rjmp	.+712    	; 0x125a <__stack+0x15b>
     f92:	0f 2e       	mov	r0, r31
     f94:	f5 ea       	ldi	r31, 0xA5	; 165
     f96:	4f 2e       	mov	r4, r31
     f98:	f9 e0       	ldi	r31, 0x09	; 9
     f9a:	5f 2e       	mov	r5, r31
     f9c:	f0 2d       	mov	r31, r0
     f9e:	05 ee       	ldi	r16, 0xE5	; 229
     fa0:	19 e0       	ldi	r17, 0x09	; 9
     fa2:	71 2c       	mov	r7, r1
     fa4:	48 01       	movw	r8, r16
     fa6:	6f 2e       	mov	r6, r31
	{
		x = (((sint64_t)bms.temp.V_temp[i])*1000000)/(sint64_t)bms.temp.V_reference[i];	
     fa8:	d2 01       	movw	r26, r4
     faa:	8d 91       	ld	r24, X+
     fac:	9d 91       	ld	r25, X+
     fae:	2d 01       	movw	r4, r26
     fb0:	5c 01       	movw	r10, r24
     fb2:	8d 8b       	std	Y+21, r24	; 0x15
     fb4:	be 8a       	std	Y+22, r11	; 0x16
     fb6:	28 2f       	mov	r18, r24
     fb8:	3b 2d       	mov	r19, r11
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	05 e0       	ldi	r16, 0x05	; 5
     fc8:	0e 94 81 19 	call	0x3302	; 0x3302 <__ashldi3>
     fcc:	c1 2c       	mov	r12, r1
     fce:	d1 2c       	mov	r13, r1
     fd0:	e1 2c       	mov	r14, r1
     fd2:	f1 2c       	mov	r15, r1
     fd4:	00 e0       	ldi	r16, 0x00	; 0
     fd6:	10 e0       	ldi	r17, 0x00	; 0
     fd8:	0e 94 a3 19 	call	0x3346	; 0x3346 <__subdi3>
     fdc:	a2 2e       	mov	r10, r18
     fde:	b3 2e       	mov	r11, r19
     fe0:	c4 2e       	mov	r12, r20
     fe2:	d5 2e       	mov	r13, r21
     fe4:	e6 2e       	mov	r14, r22
     fe6:	f7 2e       	mov	r15, r23
     fe8:	e8 2f       	mov	r30, r24
     fea:	19 2f       	mov	r17, r25
     fec:	06 e0       	ldi	r16, 0x06	; 6
     fee:	0e 94 81 19 	call	0x3302	; 0x3302 <__ashldi3>
     ff2:	0e 2f       	mov	r16, r30
     ff4:	0e 94 a3 19 	call	0x3346	; 0x3346 <__subdi3>
     ff8:	03 e0       	ldi	r16, 0x03	; 3
     ffa:	0e 94 81 19 	call	0x3302	; 0x3302 <__ashldi3>
     ffe:	ad 88       	ldd	r10, Y+21	; 0x15
    1000:	be 88       	ldd	r11, Y+22	; 0x16
    1002:	c1 2c       	mov	r12, r1
    1004:	d1 2c       	mov	r13, r1
    1006:	e1 2c       	mov	r14, r1
    1008:	f1 2c       	mov	r15, r1
    100a:	00 e0       	ldi	r16, 0x00	; 0
    100c:	10 e0       	ldi	r17, 0x00	; 0
    100e:	0e 94 9a 19 	call	0x3334	; 0x3334 <__adddi3>
    1012:	06 e0       	ldi	r16, 0x06	; 6
    1014:	0e 94 81 19 	call	0x3302	; 0x3302 <__ashldi3>
    1018:	5e 96       	adiw	r26, 0x1e	; 30
    101a:	ed 91       	ld	r30, X+
    101c:	fc 91       	ld	r31, X
    101e:	5f 97       	sbiw	r26, 0x1f	; 31
    1020:	5f 01       	movw	r10, r30
    1022:	c1 2c       	mov	r12, r1
    1024:	d1 2c       	mov	r13, r1
    1026:	e1 2c       	mov	r14, r1
    1028:	f1 2c       	mov	r15, r1
    102a:	87 01       	movw	r16, r14
    102c:	ed 8b       	std	Y+21, r30	; 0x15
    102e:	be 8a       	std	Y+22, r11	; 0x16
    1030:	cf 8a       	std	Y+23, r12	; 0x17
    1032:	d8 8e       	std	Y+24, r13	; 0x18
    1034:	e9 8e       	std	Y+25, r14	; 0x19
    1036:	fa 8e       	std	Y+26, r15	; 0x1a
    1038:	0b 8f       	std	Y+27, r16	; 0x1b
    103a:	1c 8f       	std	Y+28, r17	; 0x1c
    103c:	c1 2c       	mov	r12, r1
    103e:	d1 2c       	mov	r13, r1
    1040:	e1 2c       	mov	r14, r1
    1042:	f1 2c       	mov	r15, r1
    1044:	00 e0       	ldi	r16, 0x00	; 0
    1046:	10 e0       	ldi	r17, 0x00	; 0
    1048:	0e 94 ac 18 	call	0x3158	; 0x3158 <__divdi3>
    104c:	e2 2e       	mov	r14, r18
    104e:	f3 2e       	mov	r15, r19
    1050:	04 2f       	mov	r16, r20
    1052:	15 2f       	mov	r17, r21
    1054:	b6 2f       	mov	r27, r22
    1056:	a7 2f       	mov	r26, r23
    1058:	f8 2f       	mov	r31, r24
    105a:	d9 2e       	mov	r13, r25
		
		if(x>=780000)
    105c:	2f 3d       	cpi	r18, 0xDF	; 223
    105e:	e6 ee       	ldi	r30, 0xE6	; 230
    1060:	3e 07       	cpc	r19, r30
    1062:	eb e0       	ldi	r30, 0x0B	; 11
    1064:	4e 07       	cpc	r20, r30
    1066:	51 05       	cpc	r21, r1
    1068:	61 05       	cpc	r22, r1
    106a:	71 05       	cpc	r23, r1
    106c:	81 05       	cpc	r24, r1
    106e:	91 05       	cpc	r25, r1
    1070:	31 f1       	breq	.+76     	; 0x10be <bmschip_getTemperature+0x3b8>
    1072:	2c f1       	brlt	.+74     	; 0x10be <bmschip_getTemperature+0x3b8>
		{
			bms.temp.temp_transmit[i] = (sint32_t)((x-780000)/(-70));		
    1074:	20 5e       	subi	r18, 0xE0	; 224
    1076:	36 4e       	sbci	r19, 0xE6	; 230
    1078:	4b 40       	sbci	r20, 0x0B	; 11
    107a:	51 09       	sbc	r21, r1
    107c:	61 09       	sbc	r22, r1
    107e:	71 09       	sbc	r23, r1
    1080:	81 09       	sbc	r24, r1
    1082:	91 09       	sbc	r25, r1
    1084:	0f 2e       	mov	r0, r31
    1086:	fa eb       	ldi	r31, 0xBA	; 186
    1088:	af 2e       	mov	r10, r31
    108a:	f0 2d       	mov	r31, r0
    108c:	bb 24       	eor	r11, r11
    108e:	ba 94       	dec	r11
    1090:	cc 24       	eor	r12, r12
    1092:	ca 94       	dec	r12
    1094:	dd 24       	eor	r13, r13
    1096:	da 94       	dec	r13
    1098:	ee 24       	eor	r14, r14
    109a:	ea 94       	dec	r14
    109c:	ff 24       	eor	r15, r15
    109e:	fa 94       	dec	r15
    10a0:	0f ef       	ldi	r16, 0xFF	; 255
    10a2:	1f ef       	ldi	r17, 0xFF	; 255
    10a4:	0e 94 ac 18 	call	0x3158	; 0x3158 <__divdi3>
    10a8:	d4 01       	movw	r26, r8
    10aa:	2c 93       	st	X, r18
    10ac:	11 96       	adiw	r26, 0x01	; 1
    10ae:	3c 93       	st	X, r19
    10b0:	11 97       	sbiw	r26, 0x01	; 1
    10b2:	12 96       	adiw	r26, 0x02	; 2
    10b4:	4c 93       	st	X, r20
    10b6:	12 97       	sbiw	r26, 0x02	; 2
    10b8:	13 96       	adiw	r26, 0x03	; 3
    10ba:	5c 93       	st	X, r21
    10bc:	99 c0       	rjmp	.+306    	; 0x11f0 <__stack+0xf1>
		}
		else if(x>=340000)
    10be:	2e 2d       	mov	r18, r14
    10c0:	3f 2d       	mov	r19, r15
    10c2:	40 2f       	mov	r20, r16
    10c4:	51 2f       	mov	r21, r17
    10c6:	6b 2f       	mov	r22, r27
    10c8:	7a 2f       	mov	r23, r26
    10ca:	8f 2f       	mov	r24, r31
    10cc:	9d 2d       	mov	r25, r13
    10ce:	2f 31       	cpi	r18, 0x1F	; 31
    10d0:	e0 e3       	ldi	r30, 0x30	; 48
    10d2:	3e 07       	cpc	r19, r30
    10d4:	e5 e0       	ldi	r30, 0x05	; 5
    10d6:	4e 07       	cpc	r20, r30
    10d8:	51 05       	cpc	r21, r1
    10da:	61 05       	cpc	r22, r1
    10dc:	71 05       	cpc	r23, r1
    10de:	81 05       	cpc	r24, r1
    10e0:	91 05       	cpc	r25, r1
    10e2:	31 f1       	breq	.+76     	; 0x1130 <__stack+0x31>
    10e4:	2c f1       	brlt	.+74     	; 0x1130 <__stack+0x31>
		{
			bms.temp.temp_transmit[i] = (sint32_t)((x-780000)/(-110));		
    10e6:	20 5e       	subi	r18, 0xE0	; 224
    10e8:	36 4e       	sbci	r19, 0xE6	; 230
    10ea:	4b 40       	sbci	r20, 0x0B	; 11
    10ec:	51 09       	sbc	r21, r1
    10ee:	61 09       	sbc	r22, r1
    10f0:	71 09       	sbc	r23, r1
    10f2:	81 09       	sbc	r24, r1
    10f4:	91 09       	sbc	r25, r1
    10f6:	0f 2e       	mov	r0, r31
    10f8:	f2 e9       	ldi	r31, 0x92	; 146
    10fa:	af 2e       	mov	r10, r31
    10fc:	f0 2d       	mov	r31, r0
    10fe:	bb 24       	eor	r11, r11
    1100:	ba 94       	dec	r11
    1102:	cc 24       	eor	r12, r12
    1104:	ca 94       	dec	r12
    1106:	dd 24       	eor	r13, r13
    1108:	da 94       	dec	r13
    110a:	ee 24       	eor	r14, r14
    110c:	ea 94       	dec	r14
    110e:	ff 24       	eor	r15, r15
    1110:	fa 94       	dec	r15
    1112:	0f ef       	ldi	r16, 0xFF	; 255
    1114:	1f ef       	ldi	r17, 0xFF	; 255
    1116:	0e 94 ac 18 	call	0x3158	; 0x3158 <__divdi3>
    111a:	d4 01       	movw	r26, r8
    111c:	2c 93       	st	X, r18
    111e:	11 96       	adiw	r26, 0x01	; 1
    1120:	3c 93       	st	X, r19
    1122:	11 97       	sbiw	r26, 0x01	; 1
    1124:	12 96       	adiw	r26, 0x02	; 2
    1126:	4c 93       	st	X, r20
    1128:	12 97       	sbiw	r26, 0x02	; 2
    112a:	13 96       	adiw	r26, 0x03	; 3
    112c:	5c 93       	st	X, r21
    112e:	60 c0       	rjmp	.+192    	; 0x11f0 <__stack+0xf1>
		}
		else if(x<183000)
    1130:	2e 2d       	mov	r18, r14
    1132:	3f 2d       	mov	r19, r15
    1134:	40 2f       	mov	r20, r16
    1136:	51 2f       	mov	r21, r17
    1138:	6b 2f       	mov	r22, r27
    113a:	7a 2f       	mov	r23, r26
    113c:	8f 2f       	mov	r24, r31
    113e:	9d 2d       	mov	r25, r13
    1140:	27 3d       	cpi	r18, 0xD7	; 215
    1142:	ea ec       	ldi	r30, 0xCA	; 202
    1144:	3e 07       	cpc	r19, r30
    1146:	e2 e0       	ldi	r30, 0x02	; 2
    1148:	4e 07       	cpc	r20, r30
    114a:	51 05       	cpc	r21, r1
    114c:	61 05       	cpc	r22, r1
    114e:	71 05       	cpc	r23, r1
    1150:	81 05       	cpc	r24, r1
    1152:	91 05       	cpc	r25, r1
    1154:	09 f0       	breq	.+2      	; 0x1158 <__stack+0x59>
    1156:	2c f5       	brge	.+74     	; 0x11a2 <__stack+0xa3>
		{
			bms.temp.temp_transmit[i] = (sint32_t)((x-490000)/(-51));		
    1158:	20 51       	subi	r18, 0x10	; 16
    115a:	3a 47       	sbci	r19, 0x7A	; 122
    115c:	47 40       	sbci	r20, 0x07	; 7
    115e:	51 09       	sbc	r21, r1
    1160:	61 09       	sbc	r22, r1
    1162:	71 09       	sbc	r23, r1
    1164:	81 09       	sbc	r24, r1
    1166:	91 09       	sbc	r25, r1
    1168:	0f 2e       	mov	r0, r31
    116a:	fd ec       	ldi	r31, 0xCD	; 205
    116c:	af 2e       	mov	r10, r31
    116e:	f0 2d       	mov	r31, r0
    1170:	bb 24       	eor	r11, r11
    1172:	ba 94       	dec	r11
    1174:	cc 24       	eor	r12, r12
    1176:	ca 94       	dec	r12
    1178:	dd 24       	eor	r13, r13
    117a:	da 94       	dec	r13
    117c:	ee 24       	eor	r14, r14
    117e:	ea 94       	dec	r14
    1180:	ff 24       	eor	r15, r15
    1182:	fa 94       	dec	r15
    1184:	0f ef       	ldi	r16, 0xFF	; 255
    1186:	1f ef       	ldi	r17, 0xFF	; 255
    1188:	0e 94 ac 18 	call	0x3158	; 0x3158 <__divdi3>
    118c:	d4 01       	movw	r26, r8
    118e:	2c 93       	st	X, r18
    1190:	11 96       	adiw	r26, 0x01	; 1
    1192:	3c 93       	st	X, r19
    1194:	11 97       	sbiw	r26, 0x01	; 1
    1196:	12 96       	adiw	r26, 0x02	; 2
    1198:	4c 93       	st	X, r20
    119a:	12 97       	sbiw	r26, 0x02	; 2
    119c:	13 96       	adiw	r26, 0x03	; 3
    119e:	5c 93       	st	X, r21
    11a0:	27 c0       	rjmp	.+78     	; 0x11f0 <__stack+0xf1>
		}
		else
		{
			bms.temp.temp_transmit[i] = (sint32_t)((x-645000)/(-77));		
    11a2:	2e 2d       	mov	r18, r14
    11a4:	3f 2d       	mov	r19, r15
    11a6:	40 2f       	mov	r20, r16
    11a8:	51 2f       	mov	r21, r17
    11aa:	6b 2f       	mov	r22, r27
    11ac:	7a 2f       	mov	r23, r26
    11ae:	8f 2f       	mov	r24, r31
    11b0:	9d 2d       	mov	r25, r13
    11b2:	28 58       	subi	r18, 0x88	; 136
    11b4:	37 4d       	sbci	r19, 0xD7	; 215
    11b6:	49 40       	sbci	r20, 0x09	; 9
    11b8:	51 09       	sbc	r21, r1
    11ba:	61 09       	sbc	r22, r1
    11bc:	71 09       	sbc	r23, r1
    11be:	81 09       	sbc	r24, r1
    11c0:	91 09       	sbc	r25, r1
    11c2:	0f 2e       	mov	r0, r31
    11c4:	f3 eb       	ldi	r31, 0xB3	; 179
    11c6:	af 2e       	mov	r10, r31
    11c8:	f0 2d       	mov	r31, r0
    11ca:	bb 24       	eor	r11, r11
    11cc:	ba 94       	dec	r11
    11ce:	cc 24       	eor	r12, r12
    11d0:	ca 94       	dec	r12
    11d2:	dd 24       	eor	r13, r13
    11d4:	da 94       	dec	r13
    11d6:	ee 24       	eor	r14, r14
    11d8:	ea 94       	dec	r14
    11da:	ff 24       	eor	r15, r15
    11dc:	fa 94       	dec	r15
    11de:	0f ef       	ldi	r16, 0xFF	; 255
    11e0:	1f ef       	ldi	r17, 0xFF	; 255
    11e2:	0e 94 ac 18 	call	0x3158	; 0x3158 <__divdi3>
    11e6:	f4 01       	movw	r30, r8
    11e8:	20 83       	st	Z, r18
    11ea:	31 83       	std	Z+1, r19	; 0x01
    11ec:	42 83       	std	Z+2, r20	; 0x02
    11ee:	53 83       	std	Z+3, r21	; 0x03
	}
	SPI_CS_LTC6804_HIGH;
	spi.locked = 0;
		
	//Nachbildung der Thermistorkennlinie und Berechnung der Temperatur
	for(i=0; i<slave_boards; i++)
    11f0:	73 94       	inc	r7
    11f2:	f4 e0       	ldi	r31, 0x04	; 4
    11f4:	8f 0e       	add	r8, r31
    11f6:	91 1c       	adc	r9, r1
    11f8:	76 14       	cp	r7, r6
    11fa:	08 f4       	brcc	.+2      	; 0x11fe <__stack+0xff>
    11fc:	d5 ce       	rjmp	.-598    	; 0xfa8 <bmschip_getTemperature+0x2a2>
			bms.temp.temp_transmit[i] = (sint32_t)((x-645000)/(-77));		
		}
	}
	
	//Maximaltemperatur
	x = bms.temp.temp_transmit[0];	
    11fe:	40 91 e5 09 	lds	r20, 0x09E5
    1202:	50 91 e6 09 	lds	r21, 0x09E6
    1206:	60 91 e7 09 	lds	r22, 0x09E7
    120a:	70 91 e8 09 	lds	r23, 0x09E8
	for(i=1;i<slave_boards; i++)
    120e:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1210:	02 30       	cpi	r16, 0x02	; 2
    1212:	18 f1       	brcs	.+70     	; 0x125a <__stack+0x15b>
    1214:	e9 ee       	ldi	r30, 0xE9	; 233
    1216:	f9 e0       	ldi	r31, 0x09	; 9
    1218:	20 2f       	mov	r18, r16
    121a:	22 50       	subi	r18, 0x02	; 2
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	22 0f       	add	r18, r18
    1220:	33 1f       	adc	r19, r19
    1222:	22 0f       	add	r18, r18
    1224:	33 1f       	adc	r19, r19
    1226:	23 51       	subi	r18, 0x13	; 19
    1228:	36 4f       	sbci	r19, 0xF6	; 246
    122a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    122c:	0f 8d       	ldd	r16, Y+31	; 0x1f
    122e:	f2 2c       	mov	r15, r2
    1230:	e3 2c       	mov	r14, r3
	{
		if(x < bms.temp.temp_transmit[i])
    1232:	81 91       	ld	r24, Z+
    1234:	91 91       	ld	r25, Z+
    1236:	a1 91       	ld	r26, Z+
    1238:	b1 91       	ld	r27, Z+
    123a:	48 17       	cp	r20, r24
    123c:	59 07       	cpc	r21, r25
    123e:	6a 07       	cpc	r22, r26
    1240:	7b 07       	cpc	r23, r27
    1242:	24 f4       	brge	.+8      	; 0x124c <__stack+0x14d>
		{
			max = bms.temp.temp_transmit[i];
    1244:	18 2f       	mov	r17, r24
    1246:	09 2f       	mov	r16, r25
    1248:	fa 2e       	mov	r15, r26
    124a:	eb 2e       	mov	r14, r27
		}
	}
	
	//Maximaltemperatur
	x = bms.temp.temp_transmit[0];	
	for(i=1;i<slave_boards; i++)
    124c:	e2 17       	cp	r30, r18
    124e:	f3 07       	cpc	r31, r19
    1250:	81 f7       	brne	.-32     	; 0x1232 <__stack+0x133>
    1252:	1e 8f       	std	Y+30, r17	; 0x1e
    1254:	0f 8f       	std	Y+31, r16	; 0x1f
    1256:	2f 2c       	mov	r2, r15
    1258:	3e 2c       	mov	r3, r14
		if(x < bms.temp.temp_transmit[i])
		{
			max = bms.temp.temp_transmit[i];
		}
	}
	bms.temp.temp_max = max;
    125a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    125c:	10 93 25 0a 	sts	0x0A25, r17
    1260:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1262:	20 93 26 0a 	sts	0x0A26, r18
    1266:	20 92 27 0a 	sts	0x0A27, r2
    126a:	30 92 28 0a 	sts	0x0A28, r3
	return 0;
    126e:	80 e0       	ldi	r24, 0x00	; 0
}
    1270:	6f 96       	adiw	r28, 0x1f	; 31
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	bf 90       	pop	r11
    128e:	af 90       	pop	r10
    1290:	9f 90       	pop	r9
    1292:	8f 90       	pop	r8
    1294:	7f 90       	pop	r7
    1296:	6f 90       	pop	r6
    1298:	5f 90       	pop	r5
    129a:	4f 90       	pop	r4
    129c:	3f 90       	pop	r3
    129e:	2f 90       	pop	r2
    12a0:	08 95       	ret

000012a2 <Zellen_pro_Board>:
// *****************************************************************************************

// *** Zellbelegung bestimmen **************************************************************
void Zellen_pro_Board(uint8_t *Cells)
{
    12a2:	ef 92       	push	r14
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	8c 01       	movw	r16, r24
	uint8_t i, i1;


	for(i=0; i<slave_boards; i++)
    12b0:	80 91 26 07 	lds	r24, 0x0726
    12b4:	88 23       	and	r24, r24
    12b6:	61 f1       	breq	.+88     	; 0x1310 <Zellen_pro_Board+0x6e>
    12b8:	80 e0       	ldi	r24, 0x00	; 0
	{
		Cells[i] = 0;
		for(i1=0; i1<12; i1++)
		{
			if(cells_per_board[i] & (1<<i1))
    12ba:	e1 2c       	mov	r14, r1
    12bc:	f1 2c       	mov	r15, r1
    12be:	a1 e0       	ldi	r26, 0x01	; 1
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
	uint8_t i, i1;


	for(i=0; i<slave_boards; i++)
	{
		Cells[i] = 0;
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	f8 01       	movw	r30, r16
    12c8:	e2 0f       	add	r30, r18
    12ca:	f3 1f       	adc	r31, r19
    12cc:	10 82       	st	Z, r1
		for(i1=0; i1<12; i1++)
		{
			if(cells_per_board[i] & (1<<i1))
    12ce:	22 0f       	add	r18, r18
    12d0:	33 1f       	adc	r19, r19
    12d2:	e9 01       	movw	r28, r18
    12d4:	c3 5f       	subi	r28, 0xF3	; 243
    12d6:	dc 4f       	sbci	r29, 0xFC	; 252
    12d8:	68 81       	ld	r22, Y
    12da:	79 81       	ldd	r23, Y+1	; 0x01
    12dc:	2e 2d       	mov	r18, r14
    12de:	3f 2d       	mov	r19, r15
    12e0:	ad 01       	movw	r20, r26
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <Zellen_pro_Board+0x48>
    12e6:	44 0f       	add	r20, r20
    12e8:	55 1f       	adc	r21, r21
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <Zellen_pro_Board+0x44>
    12ee:	46 23       	and	r20, r22
    12f0:	57 23       	and	r21, r23
    12f2:	45 2b       	or	r20, r21
    12f4:	19 f0       	breq	.+6      	; 0x12fc <Zellen_pro_Board+0x5a>
			{	
				Cells[i]++;
    12f6:	90 81       	ld	r25, Z
    12f8:	9f 5f       	subi	r25, 0xFF	; 255
    12fa:	90 83       	st	Z, r25
    12fc:	2f 5f       	subi	r18, 0xFF	; 255
    12fe:	3f 4f       	sbci	r19, 0xFF	; 255


	for(i=0; i<slave_boards; i++)
	{
		Cells[i] = 0;
		for(i1=0; i1<12; i1++)
    1300:	2c 30       	cpi	r18, 0x0C	; 12
    1302:	31 05       	cpc	r19, r1
    1304:	69 f7       	brne	.-38     	; 0x12e0 <Zellen_pro_Board+0x3e>
void Zellen_pro_Board(uint8_t *Cells)
{
	uint8_t i, i1;


	for(i=0; i<slave_boards; i++)
    1306:	8f 5f       	subi	r24, 0xFF	; 255
    1308:	90 91 26 07 	lds	r25, 0x0726
    130c:	89 17       	cp	r24, r25
    130e:	c8 f2       	brcs	.-78     	; 0x12c2 <Zellen_pro_Board+0x20>
			{	
				Cells[i]++;
			}
		}
	}	
}
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
    1318:	ff 90       	pop	r15
    131a:	ef 90       	pop	r14
    131c:	08 95       	ret

0000131e <bmschip_evaluate>:
}
// *****************************************************************************************

// *** Auswertung der Zellspannungen *******************************************************
void bmschip_evaluate(uint16_t * pvolatages, uint16_t * pmaxVolt, uint16_t * pminVolt, uint16_t * pavgVolt, uint8_t * numofcells)
{
    131e:	2f 92       	push	r2
    1320:	3f 92       	push	r3
    1322:	4f 92       	push	r4
    1324:	5f 92       	push	r5
    1326:	6f 92       	push	r6
    1328:	7f 92       	push	r7
    132a:	8f 92       	push	r8
    132c:	9f 92       	push	r9
    132e:	af 92       	push	r10
    1330:	bf 92       	push	r11
    1332:	cf 92       	push	r12
    1334:	df 92       	push	r13
    1336:	ef 92       	push	r14
    1338:	ff 92       	push	r15
    133a:	0f 93       	push	r16
    133c:	1f 93       	push	r17
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	61 97       	sbiw	r28, 0x11	; 17
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	1c 01       	movw	r2, r24
    1354:	79 87       	std	Y+9, r23	; 0x09
    1356:	68 87       	std	Y+8, r22	; 0x08
    1358:	5b 87       	std	Y+11, r21	; 0x0b
    135a:	4a 87       	std	Y+10, r20	; 0x0a
    135c:	3d 87       	std	Y+13, r19	; 0x0d
    135e:	2c 87       	std	Y+12, r18	; 0x0c
    1360:	1f 87       	std	Y+15, r17	; 0x0f
    1362:	0e 87       	std	Y+14, r16	; 0x0e
	//Rückgabe Min, Max, Avg
	*pmaxVolt = maxVolt;
	*pminVolt = minVolt;
	*pavgVolt = (uint16_t)avgVolt;
	*numofcells = actNr;
}
    1364:	2d b7       	in	r18, 0x3d	; 61
    1366:	3e b7       	in	r19, 0x3e	; 62
    1368:	39 8b       	std	Y+17, r19	; 0x11
    136a:	28 8b       	std	Y+16, r18	; 0x10
// *** Auswertung der Zellspannungen *******************************************************
void bmschip_evaluate(uint16_t * pvolatages, uint16_t * pmaxVolt, uint16_t * pminVolt, uint16_t * pavgVolt, uint8_t * numofcells)
{
	uint16_t minVolt = 50000, maxVolt = 0;
	uint32_t avgVolt = 0;
	uint8_t i, i1, actNr = 0, Cells[slave_boards];
    136c:	80 91 26 07 	lds	r24, 0x0726
    1370:	4d b7       	in	r20, 0x3d	; 61
    1372:	5e b7       	in	r21, 0x3e	; 62
    1374:	48 1b       	sub	r20, r24
    1376:	51 09       	sbc	r21, r1
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	5e bf       	out	0x3e, r21	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	4d bf       	out	0x3d, r20	; 61
    1382:	0d b7       	in	r16, 0x3d	; 61
    1384:	1e b7       	in	r17, 0x3e	; 62
    1386:	0f 5f       	subi	r16, 0xFF	; 255
    1388:	1f 4f       	sbci	r17, 0xFF	; 255
	
	
	//Bestimmung der Zellenanzahl pro Board
	Zellen_pro_Board(Cells);
    138a:	c8 01       	movw	r24, r16
    138c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <Zellen_pro_Board>
		
	//Bestimmung Min, Max, Avg
	for(i=0; i<slave_boards;i++)
    1390:	80 91 26 07 	lds	r24, 0x0726
    1394:	88 23       	and	r24, r24
    1396:	09 f4       	brne	.+2      	; 0x139a <bmschip_evaluate+0x7c>
    1398:	6b c0       	rjmp	.+214    	; 0x1470 <bmschip_evaluate+0x152>
    139a:	ed e0       	ldi	r30, 0x0D	; 13
    139c:	f3 e0       	ldi	r31, 0x03	; 3
    139e:	fb 83       	std	Y+3, r31	; 0x03
    13a0:	ea 83       	std	Y+2, r30	; 0x02
    13a2:	98 01       	movw	r18, r16
    13a4:	81 50       	subi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	01 96       	adiw	r24, 0x01	; 1
    13aa:	a8 01       	movw	r20, r16
    13ac:	48 0f       	add	r20, r24
    13ae:	59 1f       	adc	r21, r25
    13b0:	5f 83       	std	Y+7, r21	; 0x07
    13b2:	4e 83       	std	Y+6, r20	; 0x06
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	a1 2c       	mov	r10, r1
    13ba:	b1 2c       	mov	r11, r1
    13bc:	19 82       	std	Y+1, r1	; 0x01
    13be:	41 2c       	mov	r4, r1
    13c0:	51 2c       	mov	r5, r1
    13c2:	32 01       	movw	r6, r4
    13c4:	c1 2c       	mov	r12, r1
    13c6:	d1 2c       	mov	r13, r1
    13c8:	0f 2e       	mov	r0, r31
    13ca:	f0 e5       	ldi	r31, 0x50	; 80
    13cc:	8f 2e       	mov	r8, r31
    13ce:	f3 ec       	ldi	r31, 0xC3	; 195
    13d0:	9f 2e       	mov	r9, r31
    13d2:	f0 2d       	mov	r31, r0
	{
		for(i1=0; i1<12; i1++)
		{
			//Average Voltage bestimmen
			if(cells_per_board[i] & (1<<i1))
    13d4:	ee 24       	eor	r14, r14
    13d6:	e3 94       	inc	r14
    13d8:	f1 2c       	mov	r15, r1
    13da:	8b 01       	movw	r16, r22
    13dc:	3d 82       	std	Y+5, r3	; 0x05
    13de:	2c 82       	std	Y+4, r2	; 0x04
    13e0:	19 01       	movw	r2, r18
    13e2:	39 c0       	rjmp	.+114    	; 0x1456 <bmschip_evaluate+0x138>
    13e4:	c7 01       	movw	r24, r14
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <bmschip_evaluate+0xd0>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <bmschip_evaluate+0xcc>
    13f2:	86 23       	and	r24, r22
    13f4:	97 23       	and	r25, r23
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	c1 f0       	breq	.+48     	; 0x142a <bmschip_evaluate+0x10c>
			{
				avgVolt += pvolatages[(i*12)+i1];
    13fa:	40 81       	ld	r20, Z
    13fc:	51 81       	ldd	r21, Z+1	; 0x01
    13fe:	44 0e       	add	r4, r20
    1400:	55 1e       	adc	r5, r21
    1402:	61 1c       	adc	r6, r1
    1404:	71 1c       	adc	r7, r1
    1406:	d5 01       	movw	r26, r10
    1408:	ae 0f       	add	r26, r30
    140a:	bf 1f       	adc	r27, r31
    140c:	a0 0f       	add	r26, r16
    140e:	b1 1f       	adc	r27, r17
			}
			
			//Min Voltage bestimmen
			if((pvolatages[(i*12)+i1] < minVolt) && (cells_per_board[i] & (1<<i1)))		//Minimalspannung
    1410:	4d 91       	ld	r20, X+
    1412:	5c 91       	ld	r21, X
    1414:	48 15       	cp	r20, r8
    1416:	59 05       	cpc	r21, r9
    1418:	38 f0       	brcs	.+14     	; 0x1428 <bmschip_evaluate+0x10a>
			{
				minVolt = pvolatages[(i*12)+i1];
			}
			
			//Max Voltage bestimmen
			else if((pvolatages[(i*12)+i1] > maxVolt) && (cells_per_board[i] & (1<<i1)))	//Maximalspannung
    141a:	c4 16       	cp	r12, r20
    141c:	d5 06       	cpc	r13, r21
    141e:	28 f4       	brcc	.+10     	; 0x142a <bmschip_evaluate+0x10c>
    1420:	89 2b       	or	r24, r25
    1422:	19 f0       	breq	.+6      	; 0x142a <bmschip_evaluate+0x10c>
			{
				avgVolt += pvolatages[(i*12)+i1];
			}
			
			//Min Voltage bestimmen
			if((pvolatages[(i*12)+i1] < minVolt) && (cells_per_board[i] & (1<<i1)))		//Minimalspannung
    1424:	6a 01       	movw	r12, r20
    1426:	01 c0       	rjmp	.+2      	; 0x142a <bmschip_evaluate+0x10c>
    1428:	4a 01       	movw	r8, r20
    142a:	2f 5f       	subi	r18, 0xFF	; 255
    142c:	3f 4f       	sbci	r19, 0xFF	; 255
    142e:	32 96       	adiw	r30, 0x02	; 2
	Zellen_pro_Board(Cells);
		
	//Bestimmung Min, Max, Avg
	for(i=0; i<slave_boards;i++)
	{
		for(i1=0; i1<12; i1++)
    1430:	2c 30       	cpi	r18, 0x0C	; 12
    1432:	31 05       	cpc	r19, r1
    1434:	b9 f6       	brne	.-82     	; 0x13e4 <bmschip_evaluate+0xc6>
			else if((pvolatages[(i*12)+i1] > maxVolt) && (cells_per_board[i] & (1<<i1)))	//Maximalspannung
			{
				maxVolt = pvolatages[(i*12)+i1];
			}
		}
		actNr += Cells[i];	//Merken, wie viele Zellen man hat
    1436:	f1 01       	movw	r30, r2
    1438:	81 91       	ld	r24, Z+
    143a:	1f 01       	movw	r2, r30
    143c:	f9 81       	ldd	r31, Y+1	; 0x01
    143e:	f8 0f       	add	r31, r24
    1440:	f9 83       	std	Y+1, r31	; 0x01
    1442:	28 e1       	ldi	r18, 0x18	; 24
    1444:	a2 1a       	sub	r10, r18
    1446:	b1 08       	sbc	r11, r1
    1448:	08 5e       	subi	r16, 0xE8	; 232
    144a:	1f 4f       	sbci	r17, 0xFF	; 255
	
	//Bestimmung der Zellenanzahl pro Board
	Zellen_pro_Board(Cells);
		
	//Bestimmung Min, Max, Avg
	for(i=0; i<slave_boards;i++)
    144c:	4e 81       	ldd	r20, Y+6	; 0x06
    144e:	5f 81       	ldd	r21, Y+7	; 0x07
    1450:	24 16       	cp	r2, r20
    1452:	35 06       	cpc	r3, r21
    1454:	c9 f0       	breq	.+50     	; 0x1488 <bmschip_evaluate+0x16a>
	{
		for(i1=0; i1<12; i1++)
		{
			//Average Voltage bestimmen
			if(cells_per_board[i] & (1<<i1))
    1456:	ea 81       	ldd	r30, Y+2	; 0x02
    1458:	fb 81       	ldd	r31, Y+3	; 0x03
    145a:	61 91       	ld	r22, Z+
    145c:	71 91       	ld	r23, Z+
    145e:	fb 83       	std	Y+3, r31	; 0x03
    1460:	ea 83       	std	Y+2, r30	; 0x02
    1462:	ec 81       	ldd	r30, Y+4	; 0x04
    1464:	fd 81       	ldd	r31, Y+5	; 0x05
    1466:	ea 19       	sub	r30, r10
    1468:	fb 09       	sbc	r31, r11
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	ba cf       	rjmp	.-140    	; 0x13e4 <bmschip_evaluate+0xc6>
// *** Auswertung der Zellspannungen *******************************************************
void bmschip_evaluate(uint16_t * pvolatages, uint16_t * pmaxVolt, uint16_t * pminVolt, uint16_t * pavgVolt, uint8_t * numofcells)
{
	uint16_t minVolt = 50000, maxVolt = 0;
	uint32_t avgVolt = 0;
	uint8_t i, i1, actNr = 0, Cells[slave_boards];
    1470:	19 82       	std	Y+1, r1	; 0x01

// *** Auswertung der Zellspannungen *******************************************************
void bmschip_evaluate(uint16_t * pvolatages, uint16_t * pmaxVolt, uint16_t * pminVolt, uint16_t * pavgVolt, uint8_t * numofcells)
{
	uint16_t minVolt = 50000, maxVolt = 0;
	uint32_t avgVolt = 0;
    1472:	41 2c       	mov	r4, r1
    1474:	51 2c       	mov	r5, r1
    1476:	32 01       	movw	r6, r4
// *****************************************************************************************

// *** Auswertung der Zellspannungen *******************************************************
void bmschip_evaluate(uint16_t * pvolatages, uint16_t * pmaxVolt, uint16_t * pminVolt, uint16_t * pavgVolt, uint8_t * numofcells)
{
	uint16_t minVolt = 50000, maxVolt = 0;
    1478:	c1 2c       	mov	r12, r1
    147a:	d1 2c       	mov	r13, r1
    147c:	0f 2e       	mov	r0, r31
    147e:	f0 e5       	ldi	r31, 0x50	; 80
    1480:	8f 2e       	mov	r8, r31
    1482:	f3 ec       	ldi	r31, 0xC3	; 195
    1484:	9f 2e       	mov	r9, r31
    1486:	f0 2d       	mov	r31, r0
		actNr += Cells[i];	//Merken, wie viele Zellen man hat
	}
	avgVolt /= actNr;	//Mittelwertbildung
	
	//Rückgabe Min, Max, Avg
	*pmaxVolt = maxVolt;
    1488:	e8 85       	ldd	r30, Y+8	; 0x08
    148a:	f9 85       	ldd	r31, Y+9	; 0x09
    148c:	d1 82       	std	Z+1, r13	; 0x01
    148e:	c0 82       	st	Z, r12
	*pminVolt = minVolt;
    1490:	ea 85       	ldd	r30, Y+10	; 0x0a
    1492:	fb 85       	ldd	r31, Y+11	; 0x0b
    1494:	91 82       	std	Z+1, r9	; 0x01
    1496:	80 82       	st	Z, r8
				maxVolt = pvolatages[(i*12)+i1];
			}
		}
		actNr += Cells[i];	//Merken, wie viele Zellen man hat
	}
	avgVolt /= actNr;	//Mittelwertbildung
    1498:	f9 81       	ldd	r31, Y+1	; 0x01
    149a:	2f 2f       	mov	r18, r31
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	c3 01       	movw	r24, r6
    14a4:	b2 01       	movw	r22, r4
    14a6:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__udivmodsi4>
	
	//Rückgabe Min, Max, Avg
	*pmaxVolt = maxVolt;
	*pminVolt = minVolt;
	*pavgVolt = (uint16_t)avgVolt;
    14aa:	ec 85       	ldd	r30, Y+12	; 0x0c
    14ac:	fd 85       	ldd	r31, Y+13	; 0x0d
    14ae:	31 83       	std	Z+1, r19	; 0x01
    14b0:	20 83       	st	Z, r18
	*numofcells = actNr;
    14b2:	29 81       	ldd	r18, Y+1	; 0x01
    14b4:	ee 85       	ldd	r30, Y+14	; 0x0e
    14b6:	ff 85       	ldd	r31, Y+15	; 0x0f
    14b8:	20 83       	st	Z, r18
}
    14ba:	48 89       	ldd	r20, Y+16	; 0x10
    14bc:	59 89       	ldd	r21, Y+17	; 0x11
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	5e bf       	out	0x3e, r21	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	4d bf       	out	0x3d, r20	; 61
    14c8:	61 96       	adiw	r28, 0x11	; 17
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	ff 90       	pop	r15
    14de:	ef 90       	pop	r14
    14e0:	df 90       	pop	r13
    14e2:	cf 90       	pop	r12
    14e4:	bf 90       	pop	r11
    14e6:	af 90       	pop	r10
    14e8:	9f 90       	pop	r9
    14ea:	8f 90       	pop	r8
    14ec:	7f 90       	pop	r7
    14ee:	6f 90       	pop	r6
    14f0:	5f 90       	pop	r5
    14f2:	4f 90       	pop	r4
    14f4:	3f 90       	pop	r3
    14f6:	2f 90       	pop	r2
    14f8:	08 95       	ret

000014fa <bmschip_checkBalancing>:
// minVolt:	Kleinste Spannung im System
// voltDiff: Different, ab welcher gebalanced werden darf
// undervoltage: Unterspannungsgrenze

void bmschip_checkBalancing(uint16_t *pvoltages, uint16_t minVolt, uint16_t undervoltage, uint16_t *pcells)
{
    14fa:	2f 92       	push	r2
    14fc:	3f 92       	push	r3
    14fe:	5f 92       	push	r5
    1500:	6f 92       	push	r6
    1502:	7f 92       	push	r7
    1504:	8f 92       	push	r8
    1506:	9f 92       	push	r9
    1508:	af 92       	push	r10
    150a:	bf 92       	push	r11
    150c:	cf 92       	push	r12
    150e:	df 92       	push	r13
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	00 d0       	rcall	.+0      	; 0x151e <bmschip_checkBalancing+0x24>
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	5c 01       	movw	r10, r24
    1524:	8b 01       	movw	r16, r22
    1526:	7a 01       	movw	r14, r20
    1528:	49 01       	movw	r8, r18
			}
		}
		pcells[k] = cells;
	}
	
}
    152a:	2d b6       	in	r2, 0x3d	; 61
    152c:	3e b6       	in	r3, 0x3e	; 62
// undervoltage: Unterspannungsgrenze

void bmschip_checkBalancing(uint16_t *pvoltages, uint16_t minVolt, uint16_t undervoltage, uint16_t *pcells)
{
	uint16_t cells;
	uint8_t i, k, Cells[slave_boards];
    152e:	80 91 26 07 	lds	r24, 0x0726
    1532:	2d b7       	in	r18, 0x3d	; 61
    1534:	3e b7       	in	r19, 0x3e	; 62
    1536:	28 1b       	sub	r18, r24
    1538:	31 09       	sbc	r19, r1
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	3e bf       	out	0x3e, r19	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	2d bf       	out	0x3d, r18	; 61
	
	
	//Bestimmung der Zellenanzahl pro Board
	Zellen_pro_Board(Cells);
    1544:	8d b7       	in	r24, 0x3d	; 61
    1546:	9e b7       	in	r25, 0x3e	; 62
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <Zellen_pro_Board>

	for(k=0; k<slave_boards; k++)
    154e:	80 91 26 07 	lds	r24, 0x0726
    1552:	81 11       	cpse	r24, r1
    1554:	30 c0       	rjmp	.+96     	; 0x15b6 <bmschip_checkBalancing+0xbc>
    1556:	56 c0       	rjmp	.+172    	; 0x1604 <bmschip_checkBalancing+0x10a>
	{
		cells = 0x0000;
		for(i=0; i<12; i++)
		{
			if((pvoltages[(k*12)+i] >= (minVolt + BAL_DIFFERENCE)) && (pvoltages[(k*12)+i] > (undervoltage + BAL_DIFFERENCE)) && (pvoltages[(k*12)+i] > BALANCING_LIMIT))
    1558:	61 91       	ld	r22, Z+
    155a:	71 91       	ld	r23, Z+
    155c:	62 17       	cp	r22, r18
    155e:	73 07       	cpc	r23, r19
    1560:	c0 f0       	brcs	.+48     	; 0x1592 <bmschip_checkBalancing+0x98>
    1562:	46 17       	cp	r20, r22
    1564:	57 07       	cpc	r21, r23
    1566:	a8 f4       	brcc	.+42     	; 0x1592 <bmschip_checkBalancing+0x98>
    1568:	61 33       	cpi	r22, 0x31	; 49
    156a:	75 47       	sbci	r23, 0x75	; 117
    156c:	90 f0       	brcs	.+36     	; 0x1592 <bmschip_checkBalancing+0x98>
			{
				if(cells_per_board[k] & (1<<i))
    156e:	b6 01       	movw	r22, r12
    1570:	08 2e       	mov	r0, r24
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <bmschip_checkBalancing+0x7e>
    1574:	66 0f       	add	r22, r22
    1576:	77 1f       	adc	r23, r23
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <bmschip_checkBalancing+0x7a>
    157c:	7b 01       	movw	r14, r22
    157e:	a9 81       	ldd	r26, Y+1	; 0x01
    1580:	ba 81       	ldd	r27, Y+2	; 0x02
    1582:	6d 91       	ld	r22, X+
    1584:	7c 91       	ld	r23, X
    1586:	6e 21       	and	r22, r14
    1588:	7f 21       	and	r23, r15
    158a:	67 2b       	or	r22, r23
    158c:	11 f0       	breq	.+4      	; 0x1592 <bmschip_checkBalancing+0x98>
				{
					cells |= (1 << i); 					
    158e:	0e 29       	or	r16, r14
    1590:	1f 29       	or	r17, r15
    1592:	01 96       	adiw	r24, 0x01	; 1
	Zellen_pro_Board(Cells);

	for(k=0; k<slave_boards; k++)
	{
		cells = 0x0000;
		for(i=0; i<12; i++)
    1594:	8c 30       	cpi	r24, 0x0C	; 12
    1596:	91 05       	cpc	r25, r1
    1598:	f9 f6       	brne	.-66     	; 0x1558 <bmschip_checkBalancing+0x5e>
				{
					cells |= (1 << i); 					
				}
			}
		}
		pcells[k] = cells;
    159a:	e7 2d       	mov	r30, r7
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	ee 0f       	add	r30, r30
    15a0:	ff 1f       	adc	r31, r31
    15a2:	e8 0d       	add	r30, r8
    15a4:	f9 1d       	adc	r31, r9
    15a6:	11 83       	std	Z+1, r17	; 0x01
    15a8:	00 83       	st	Z, r16
	
	
	//Bestimmung der Zellenanzahl pro Board
	Zellen_pro_Board(Cells);

	for(k=0; k<slave_boards; k++)
    15aa:	73 94       	inc	r7
    15ac:	80 91 26 07 	lds	r24, 0x0726
    15b0:	78 16       	cp	r7, r24
    15b2:	68 f0       	brcs	.+26     	; 0x15ce <bmschip_checkBalancing+0xd4>
    15b4:	27 c0       	rjmp	.+78     	; 0x1604 <bmschip_checkBalancing+0x10a>
    15b6:	71 2c       	mov	r7, r1
	{
		cells = 0x0000;
		for(i=0; i<12; i++)
		{
			if((pvoltages[(k*12)+i] >= (minVolt + BAL_DIFFERENCE)) && (pvoltages[(k*12)+i] > (undervoltage + BAL_DIFFERENCE)) && (pvoltages[(k*12)+i] > BALANCING_LIMIT))
    15b8:	61 2c       	mov	r6, r1
    15ba:	51 2c       	mov	r5, r1
    15bc:	98 01       	movw	r18, r16
    15be:	2c 59       	subi	r18, 0x9C	; 156
    15c0:	3f 4f       	sbci	r19, 0xFF	; 255
    15c2:	a7 01       	movw	r20, r14
    15c4:	4c 59       	subi	r20, 0x9C	; 156
    15c6:	5f 4f       	sbci	r21, 0xFF	; 255
			{
				if(cells_per_board[k] & (1<<i))
    15c8:	cc 24       	eor	r12, r12
    15ca:	c3 94       	inc	r12
    15cc:	d1 2c       	mov	r13, r1
	for(k=0; k<slave_boards; k++)
	{
		cells = 0x0000;
		for(i=0; i<12; i++)
		{
			if((pvoltages[(k*12)+i] >= (minVolt + BAL_DIFFERENCE)) && (pvoltages[(k*12)+i] > (undervoltage + BAL_DIFFERENCE)) && (pvoltages[(k*12)+i] > BALANCING_LIMIT))
    15ce:	a7 2d       	mov	r26, r7
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	fd 01       	movw	r30, r26
    15d4:	ee 0f       	add	r30, r30
    15d6:	ff 1f       	adc	r31, r31
    15d8:	ea 0f       	add	r30, r26
    15da:	fb 1f       	adc	r31, r27
    15dc:	ee 0f       	add	r30, r30
    15de:	ff 1f       	adc	r31, r31
    15e0:	ee 0f       	add	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	ee 0f       	add	r30, r30
    15e6:	ff 1f       	adc	r31, r31
    15e8:	ea 0d       	add	r30, r10
    15ea:	fb 1d       	adc	r31, r11
    15ec:	86 2d       	mov	r24, r6
    15ee:	95 2d       	mov	r25, r5
    15f0:	06 2d       	mov	r16, r6
    15f2:	15 2d       	mov	r17, r5
			{
				if(cells_per_board[k] & (1<<i))
    15f4:	aa 0f       	add	r26, r26
    15f6:	bb 1f       	adc	r27, r27
    15f8:	bd 01       	movw	r22, r26
    15fa:	63 5f       	subi	r22, 0xF3	; 243
    15fc:	7c 4f       	sbci	r23, 0xFC	; 252
    15fe:	7a 83       	std	Y+2, r23	; 0x02
    1600:	69 83       	std	Y+1, r22	; 0x01
    1602:	aa cf       	rjmp	.-172    	; 0x1558 <bmschip_checkBalancing+0x5e>
			}
		}
		pcells[k] = cells;
	}
	
}
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	3e be       	out	0x3e, r3	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	2d be       	out	0x3d, r2	; 61
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
    1616:	1f 91       	pop	r17
    1618:	0f 91       	pop	r16
    161a:	ff 90       	pop	r15
    161c:	ef 90       	pop	r14
    161e:	df 90       	pop	r13
    1620:	cf 90       	pop	r12
    1622:	bf 90       	pop	r11
    1624:	af 90       	pop	r10
    1626:	9f 90       	pop	r9
    1628:	8f 90       	pop	r8
    162a:	7f 90       	pop	r7
    162c:	6f 90       	pop	r6
    162e:	5f 90       	pop	r5
    1630:	3f 90       	pop	r3
    1632:	2f 90       	pop	r2
    1634:	08 95       	ret

00001636 <bmschip_recommendBalancing>:

uint8_t bmschip_recommendBalancing(uint16_t *pvoltages, uint16_t minVolt, uint16_t undervoltage, uint16_t *pcells)
{
    1636:	2f 92       	push	r2
    1638:	3f 92       	push	r3
    163a:	4f 92       	push	r4
    163c:	5f 92       	push	r5
    163e:	6f 92       	push	r6
    1640:	7f 92       	push	r7
    1642:	8f 92       	push	r8
    1644:	9f 92       	push	r9
    1646:	af 92       	push	r10
    1648:	bf 92       	push	r11
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	00 d0       	rcall	.+0      	; 0x165c <bmschip_recommendBalancing+0x26>
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	5c 01       	movw	r10, r24
    1662:	8b 01       	movw	r16, r22
    1664:	7a 01       	movw	r14, r20
    1666:	49 01       	movw	r8, r18
			}
		}
		pcells[k] = cells;
	}
	return(Anzahl);
}
    1668:	2d b6       	in	r2, 0x3d	; 61
    166a:	3e b6       	in	r3, 0x3e	; 62
}

uint8_t bmschip_recommendBalancing(uint16_t *pvoltages, uint16_t minVolt, uint16_t undervoltage, uint16_t *pcells)
{
	uint16_t cells;
	uint8_t i, k, Cells[slave_boards], Anzahl=0;
    166c:	80 91 26 07 	lds	r24, 0x0726
    1670:	2d b7       	in	r18, 0x3d	; 61
    1672:	3e b7       	in	r19, 0x3e	; 62
    1674:	28 1b       	sub	r18, r24
    1676:	31 09       	sbc	r19, r1
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	3e bf       	out	0x3e, r19	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	2d bf       	out	0x3d, r18	; 61


	//Bestimmung der Zellenanzahl pro Board
	Zellen_pro_Board(Cells);
    1682:	8d b7       	in	r24, 0x3d	; 61
    1684:	9e b7       	in	r25, 0x3e	; 62
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	0e 94 51 09 	call	0x12a2	; 0x12a2 <Zellen_pro_Board>
		
	for(k=0; k<slave_boards; k++)
    168c:	80 91 26 07 	lds	r24, 0x0726
    1690:	81 11       	cpse	r24, r1
    1692:	32 c0       	rjmp	.+100    	; 0x16f8 <bmschip_recommendBalancing+0xc2>
}

uint8_t bmschip_recommendBalancing(uint16_t *pvoltages, uint16_t minVolt, uint16_t undervoltage, uint16_t *pcells)
{
	uint16_t cells;
	uint8_t i, k, Cells[slave_boards], Anzahl=0;
    1694:	61 2c       	mov	r6, r1
    1696:	58 c0       	rjmp	.+176    	; 0x1748 <bmschip_recommendBalancing+0x112>
	for(k=0; k<slave_boards; k++)
	{
		cells = 0x0000;
		for(i=0; i<12; i++)
		{
			if((pvoltages[(k*12)+i] >= (minVolt + BAL_REC_DIFFERENCE)) && (pvoltages[(k*12)+i] > (undervoltage + BAL_REC_DIFFERENCE)) && (pvoltages[(k*12)+i] > BALANCING_LIMIT))
    1698:	61 91       	ld	r22, Z+
    169a:	71 91       	ld	r23, Z+
    169c:	62 17       	cp	r22, r18
    169e:	73 07       	cpc	r23, r19
    16a0:	c8 f0       	brcs	.+50     	; 0x16d4 <bmschip_recommendBalancing+0x9e>
    16a2:	46 17       	cp	r20, r22
    16a4:	57 07       	cpc	r21, r23
    16a6:	b0 f4       	brcc	.+44     	; 0x16d4 <bmschip_recommendBalancing+0x9e>
    16a8:	61 33       	cpi	r22, 0x31	; 49
    16aa:	75 47       	sbci	r23, 0x75	; 117
    16ac:	98 f0       	brcs	.+38     	; 0x16d4 <bmschip_recommendBalancing+0x9e>
			{
				if(cells_per_board[k] & (1<<i))
    16ae:	b6 01       	movw	r22, r12
    16b0:	08 2e       	mov	r0, r24
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <bmschip_recommendBalancing+0x82>
    16b4:	66 0f       	add	r22, r22
    16b6:	77 1f       	adc	r23, r23
    16b8:	0a 94       	dec	r0
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <bmschip_recommendBalancing+0x7e>
    16bc:	7b 01       	movw	r14, r22
    16be:	a9 81       	ldd	r26, Y+1	; 0x01
    16c0:	ba 81       	ldd	r27, Y+2	; 0x02
    16c2:	6d 91       	ld	r22, X+
    16c4:	7c 91       	ld	r23, X
    16c6:	6e 21       	and	r22, r14
    16c8:	7f 21       	and	r23, r15
    16ca:	67 2b       	or	r22, r23
    16cc:	19 f0       	breq	.+6      	; 0x16d4 <bmschip_recommendBalancing+0x9e>
				{
					cells |= (1 << i);
    16ce:	0e 29       	or	r16, r14
    16d0:	1f 29       	or	r17, r15
					Anzahl++;
    16d2:	63 94       	inc	r6
    16d4:	01 96       	adiw	r24, 0x01	; 1
	Zellen_pro_Board(Cells);
		
	for(k=0; k<slave_boards; k++)
	{
		cells = 0x0000;
		for(i=0; i<12; i++)
    16d6:	8c 30       	cpi	r24, 0x0C	; 12
    16d8:	91 05       	cpc	r25, r1
    16da:	f1 f6       	brne	.-68     	; 0x1698 <bmschip_recommendBalancing+0x62>
					cells |= (1 << i);
					Anzahl++;
				}					
			}
		}
		pcells[k] = cells;
    16dc:	e7 2d       	mov	r30, r7
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	ee 0f       	add	r30, r30
    16e2:	ff 1f       	adc	r31, r31
    16e4:	e8 0d       	add	r30, r8
    16e6:	f9 1d       	adc	r31, r9
    16e8:	11 83       	std	Z+1, r17	; 0x01
    16ea:	00 83       	st	Z, r16


	//Bestimmung der Zellenanzahl pro Board
	Zellen_pro_Board(Cells);
		
	for(k=0; k<slave_boards; k++)
    16ec:	73 94       	inc	r7
    16ee:	80 91 26 07 	lds	r24, 0x0726
    16f2:	78 16       	cp	r7, r24
    16f4:	70 f0       	brcs	.+28     	; 0x1712 <bmschip_recommendBalancing+0xdc>
    16f6:	28 c0       	rjmp	.+80     	; 0x1748 <bmschip_recommendBalancing+0x112>
    16f8:	71 2c       	mov	r7, r1
    16fa:	61 2c       	mov	r6, r1
	{
		cells = 0x0000;
		for(i=0; i<12; i++)
		{
			if((pvoltages[(k*12)+i] >= (minVolt + BAL_REC_DIFFERENCE)) && (pvoltages[(k*12)+i] > (undervoltage + BAL_REC_DIFFERENCE)) && (pvoltages[(k*12)+i] > BALANCING_LIMIT))
    16fc:	51 2c       	mov	r5, r1
    16fe:	41 2c       	mov	r4, r1
    1700:	98 01       	movw	r18, r16
    1702:	28 53       	subi	r18, 0x38	; 56
    1704:	3f 4f       	sbci	r19, 0xFF	; 255
    1706:	a7 01       	movw	r20, r14
    1708:	48 53       	subi	r20, 0x38	; 56
    170a:	5f 4f       	sbci	r21, 0xFF	; 255
			{
				if(cells_per_board[k] & (1<<i))
    170c:	cc 24       	eor	r12, r12
    170e:	c3 94       	inc	r12
    1710:	d1 2c       	mov	r13, r1
	for(k=0; k<slave_boards; k++)
	{
		cells = 0x0000;
		for(i=0; i<12; i++)
		{
			if((pvoltages[(k*12)+i] >= (minVolt + BAL_REC_DIFFERENCE)) && (pvoltages[(k*12)+i] > (undervoltage + BAL_REC_DIFFERENCE)) && (pvoltages[(k*12)+i] > BALANCING_LIMIT))
    1712:	a7 2d       	mov	r26, r7
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	fd 01       	movw	r30, r26
    1718:	ee 0f       	add	r30, r30
    171a:	ff 1f       	adc	r31, r31
    171c:	ea 0f       	add	r30, r26
    171e:	fb 1f       	adc	r31, r27
    1720:	ee 0f       	add	r30, r30
    1722:	ff 1f       	adc	r31, r31
    1724:	ee 0f       	add	r30, r30
    1726:	ff 1f       	adc	r31, r31
    1728:	ee 0f       	add	r30, r30
    172a:	ff 1f       	adc	r31, r31
    172c:	ea 0d       	add	r30, r10
    172e:	fb 1d       	adc	r31, r11
    1730:	85 2d       	mov	r24, r5
    1732:	94 2d       	mov	r25, r4
    1734:	05 2d       	mov	r16, r5
    1736:	14 2d       	mov	r17, r4
			{
				if(cells_per_board[k] & (1<<i))
    1738:	aa 0f       	add	r26, r26
    173a:	bb 1f       	adc	r27, r27
    173c:	bd 01       	movw	r22, r26
    173e:	63 5f       	subi	r22, 0xF3	; 243
    1740:	7c 4f       	sbci	r23, 0xFC	; 252
    1742:	7a 83       	std	Y+2, r23	; 0x02
    1744:	69 83       	std	Y+1, r22	; 0x01
    1746:	a8 cf       	rjmp	.-176    	; 0x1698 <bmschip_recommendBalancing+0x62>
			}
		}
		pcells[k] = cells;
	}
	return(Anzahl);
}
    1748:	86 2d       	mov	r24, r6
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	3e be       	out	0x3e, r3	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	2d be       	out	0x3d, r2	; 61
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	1f 91       	pop	r17
    175e:	0f 91       	pop	r16
    1760:	ff 90       	pop	r15
    1762:	ef 90       	pop	r14
    1764:	df 90       	pop	r13
    1766:	cf 90       	pop	r12
    1768:	bf 90       	pop	r11
    176a:	af 90       	pop	r10
    176c:	9f 90       	pop	r9
    176e:	8f 90       	pop	r8
    1770:	7f 90       	pop	r7
    1772:	6f 90       	pop	r6
    1774:	5f 90       	pop	r5
    1776:	4f 90       	pop	r4
    1778:	3f 90       	pop	r3
    177a:	2f 90       	pop	r2
    177c:	08 95       	ret

0000177e <can_init>:
#include "can.h"

uint8_t can_tx_flags;

void can_init(uint16_t kbaudrate)
{
    177e:	2f 92       	push	r2
    1780:	3f 92       	push	r3
    1782:	4f 92       	push	r4
    1784:	5f 92       	push	r5
    1786:	7f 92       	push	r7
    1788:	8f 92       	push	r8
    178a:	af 92       	push	r10
    178c:	bf 92       	push	r11
    178e:	cf 92       	push	r12
    1790:	df 92       	push	r13
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
	CANGCON = 0x00;		// disable CAN
    179e:	10 92 d8 00 	sts	0x00D8, r1
	// set bit-timing registers
	// configure baudrate (SP=81.3%): single sample, SJW=2, PRS=6, PHS1=6, PHS2=3
	if(kbaudrate == 1000) 			// 1 MBit/s (87.5%)
    17a2:	88 3e       	cpi	r24, 0xE8	; 232
    17a4:	23 e0       	ldi	r18, 0x03	; 3
    17a6:	92 07       	cpc	r25, r18
    17a8:	49 f4       	brne	.+18     	; 0x17bc <can_init+0x3e>
	{
		CANBT1 = 0x00;
    17aa:	10 92 e2 00 	sts	0x00E2, r1
		CANBT2 = 0x0A;
    17ae:	8a e0       	ldi	r24, 0x0A	; 10
    17b0:	80 93 e3 00 	sts	0x00E3, r24
		CANBT3 = 0x1C;
    17b4:	8c e1       	ldi	r24, 0x1C	; 28
    17b6:	80 93 e4 00 	sts	0x00E4, r24
    17ba:	47 c0       	rjmp	.+142    	; 0x184a <can_init+0xcc>
	} 
	else if(kbaudrate == 500)		// 500 kBit/s
    17bc:	84 3f       	cpi	r24, 0xF4	; 244
    17be:	e1 e0       	ldi	r30, 0x01	; 1
    17c0:	9e 07       	cpc	r25, r30
    17c2:	49 f4       	brne	.+18     	; 0x17d6 <can_init+0x58>
	{
		CANBT1 = 0x02;
    17c4:	82 e0       	ldi	r24, 0x02	; 2
    17c6:	80 93 e2 00 	sts	0x00E2, r24
		CANBT2 = 0x2A;
    17ca:	8a e2       	ldi	r24, 0x2A	; 42
    17cc:	80 93 e3 00 	sts	0x00E3, r24
		CANBT3 = 0x2A;
    17d0:	80 93 e4 00 	sts	0x00E4, r24
    17d4:	3a c0       	rjmp	.+116    	; 0x184a <can_init+0xcc>
	} 
	else if(kbaudrate == 250)		// 250 kBit/s
    17d6:	8a 3f       	cpi	r24, 0xFA	; 250
    17d8:	91 05       	cpc	r25, r1
    17da:	49 f4       	brne	.+18     	; 0x17ee <can_init+0x70>
	{
		CANBT1 = 0x06;
    17dc:	86 e0       	ldi	r24, 0x06	; 6
    17de:	80 93 e2 00 	sts	0x00E2, r24
		CANBT2 = 0x2A;
    17e2:	8a e2       	ldi	r24, 0x2A	; 42
    17e4:	80 93 e3 00 	sts	0x00E3, r24
		CANBT3 = 0x2A;
    17e8:	80 93 e4 00 	sts	0x00E4, r24
    17ec:	2e c0       	rjmp	.+92     	; 0x184a <can_init+0xcc>
	} 
	else 							// 125 kBit/s
	{
		CANBT1 = 0x0E;
    17ee:	8e e0       	ldi	r24, 0x0E	; 14
    17f0:	80 93 e2 00 	sts	0x00E2, r24
		CANBT2 = 0x2A;
    17f4:	8a e2       	ldi	r24, 0x2A	; 42
    17f6:	80 93 e3 00 	sts	0x00E3, r24
		CANBT3 = 0x2A;
    17fa:	80 93 e4 00 	sts	0x00E4, r24
    17fe:	25 c0       	rjmp	.+74     	; 0x184a <can_init+0xcc>
	}
	
	// init all MOb's, use MOb's #5 & #4 to send, MOb's #0..#3 to receive
	for(uint8_t i = 0; i < 6; i++) 
	{
		CANPAGE = (i << 4);		// select MOb
    1800:	88 2e       	mov	r8, r24
    1802:	88 0c       	add	r8, r8
    1804:	88 0c       	add	r8, r8
    1806:	88 0c       	add	r8, r8
    1808:	88 0c       	add	r8, r8
    180a:	f6 01       	movw	r30, r12
    180c:	80 82       	st	Z, r8
		CANSTMOB = 0;			// status: clear
    180e:	f7 01       	movw	r30, r14
    1810:	10 82       	st	Z, r1
		if(i < 4) 
    1812:	84 30       	cpi	r24, 0x04	; 4
    1814:	18 f4       	brcc	.+6      	; 0x181c <can_init+0x9e>
			CANCDMOB = 0x80;	// ctrl: enable reception
    1816:	f5 01       	movw	r30, r10
    1818:	70 82       	st	Z, r7
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <can_init+0xa2>
		else 
			CANCDMOB = 0;		// ctrl: disable MOb
    181c:	f5 01       	movw	r30, r10
    181e:	10 82       	st	Z, r1
		
		//clear acceptance code
		CANIDT4 = 0;
    1820:	f8 01       	movw	r30, r16
    1822:	10 82       	st	Z, r1
		CANIDT3 = 0;
    1824:	fb 01       	movw	r30, r22
    1826:	10 82       	st	Z, r1
		CANIDT2 = 0;
    1828:	fa 01       	movw	r30, r20
    182a:	10 82       	st	Z, r1
		CANIDT1 = 0;
    182c:	f9 01       	movw	r30, r18
    182e:	10 82       	st	Z, r1
		
		//clear acceptance mask
		CANIDM4 = 0;
    1830:	f2 01       	movw	r30, r4
    1832:	10 82       	st	Z, r1
		CANIDM3 = 0;
    1834:	18 82       	st	Y, r1
		CANIDM2 = 0;
    1836:	1c 92       	st	X, r1
		CANIDM1 = 0;
    1838:	f1 01       	movw	r30, r2
    183a:	10 82       	st	Z, r1
		CANBT2 = 0x2A;
		CANBT3 = 0x2A;
	}
	
	// init all MOb's, use MOb's #5 & #4 to send, MOb's #0..#3 to receive
	for(uint8_t i = 0; i < 6; i++) 
    183c:	8f 5f       	subi	r24, 0xFF	; 255
    183e:	86 30       	cpi	r24, 0x06	; 6
    1840:	f9 f6       	brne	.-66     	; 0x1800 <can_init+0x82>
		CANIDM1 = 0;
	}
	//#ifdef CAN_LISTEN_ONLY
	//	CANGCON = 0x0A;		// set ListeningOnlyMode, no TX, no ACK
	//#else
	CANGCON = 0x02;		// enable CAN
    1842:	82 e0       	ldi	r24, 0x02	; 2
    1844:	80 93 d8 00 	sts	0x00D8, r24
    1848:	2a c0       	rjmp	.+84     	; 0x189e <can_init+0x120>
#include "can.h"

uint8_t can_tx_flags;

void can_init(uint16_t kbaudrate)
{
    184a:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	// init all MOb's, use MOb's #5 & #4 to send, MOb's #0..#3 to receive
	for(uint8_t i = 0; i < 6; i++) 
	{
		CANPAGE = (i << 4);		// select MOb
    184c:	0f 2e       	mov	r0, r31
    184e:	fd ee       	ldi	r31, 0xED	; 237
    1850:	cf 2e       	mov	r12, r31
    1852:	d1 2c       	mov	r13, r1
    1854:	f0 2d       	mov	r31, r0
		CANSTMOB = 0;			// status: clear
    1856:	0f 2e       	mov	r0, r31
    1858:	fe ee       	ldi	r31, 0xEE	; 238
    185a:	ef 2e       	mov	r14, r31
    185c:	f1 2c       	mov	r15, r1
    185e:	f0 2d       	mov	r31, r0
		if(i < 4) 
			CANCDMOB = 0x80;	// ctrl: enable reception
		else 
			CANCDMOB = 0;		// ctrl: disable MOb
    1860:	0f 2e       	mov	r0, r31
    1862:	ff ee       	ldi	r31, 0xEF	; 239
    1864:	af 2e       	mov	r10, r31
    1866:	b1 2c       	mov	r11, r1
    1868:	f0 2d       	mov	r31, r0
	for(uint8_t i = 0; i < 6; i++) 
	{
		CANPAGE = (i << 4);		// select MOb
		CANSTMOB = 0;			// status: clear
		if(i < 4) 
			CANCDMOB = 0x80;	// ctrl: enable reception
    186a:	68 94       	set
    186c:	77 24       	eor	r7, r7
    186e:	77 f8       	bld	r7, 7
		else 
			CANCDMOB = 0;		// ctrl: disable MOb
		
		//clear acceptance code
		CANIDT4 = 0;
    1870:	00 ef       	ldi	r16, 0xF0	; 240
    1872:	10 e0       	ldi	r17, 0x00	; 0
		CANIDT3 = 0;
    1874:	61 ef       	ldi	r22, 0xF1	; 241
    1876:	70 e0       	ldi	r23, 0x00	; 0
		CANIDT2 = 0;
    1878:	42 ef       	ldi	r20, 0xF2	; 242
    187a:	50 e0       	ldi	r21, 0x00	; 0
		CANIDT1 = 0;
    187c:	23 ef       	ldi	r18, 0xF3	; 243
    187e:	30 e0       	ldi	r19, 0x00	; 0
		
		//clear acceptance mask
		CANIDM4 = 0;
    1880:	0f 2e       	mov	r0, r31
    1882:	f4 ef       	ldi	r31, 0xF4	; 244
    1884:	4f 2e       	mov	r4, r31
    1886:	51 2c       	mov	r5, r1
    1888:	f0 2d       	mov	r31, r0
		CANIDM3 = 0;
    188a:	c5 ef       	ldi	r28, 0xF5	; 245
    188c:	d0 e0       	ldi	r29, 0x00	; 0
		CANIDM2 = 0;
    188e:	a6 ef       	ldi	r26, 0xF6	; 246
    1890:	b0 e0       	ldi	r27, 0x00	; 0
		CANIDM1 = 0;
    1892:	0f 2e       	mov	r0, r31
    1894:	f7 ef       	ldi	r31, 0xF7	; 247
    1896:	2f 2e       	mov	r2, r31
    1898:	31 2c       	mov	r3, r1
    189a:	f0 2d       	mov	r31, r0
    189c:	b1 cf       	rjmp	.-158    	; 0x1800 <can_init+0x82>
	//#ifdef CAN_LISTEN_ONLY
	//	CANGCON = 0x0A;		// set ListeningOnlyMode, no TX, no ACK
	//#else
	CANGCON = 0x02;		// enable CAN
	//#endif
}
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	ff 90       	pop	r15
    18a8:	ef 90       	pop	r14
    18aa:	df 90       	pop	r13
    18ac:	cf 90       	pop	r12
    18ae:	bf 90       	pop	r11
    18b0:	af 90       	pop	r10
    18b2:	8f 90       	pop	r8
    18b4:	7f 90       	pop	r7
    18b6:	5f 90       	pop	r5
    18b8:	4f 90       	pop	r4
    18ba:	3f 90       	pop	r3
    18bc:	2f 90       	pop	r2
    18be:	08 95       	ret

000018c0 <can_receive_message>:
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
uint8_t can_receive_message(uint32_t *id, uint8_t *len, uint64_t *can_data)
{
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
	uint8_t cs, return_value = 0;
	uint8_t *data_ptr = (uint8_t*) can_data;
	uint8_t mob;
	for(mob = 0; mob < 4; mob++)	// check receive buffers of the CAN
	{ 
		CANPAGE = (mob << 4);		// select MOb
    18c8:	10 92 ed 00 	sts	0x00ED, r1
		cs = CANEN2 >> mob;			// get status of MOb
    18cc:	20 91 dc 00 	lds	r18, 0x00DC
		if ((cs & 0x01) == 0)		// MOb not busy? -> data received!
    18d0:	20 ff       	sbrs	r18, 0
    18d2:	14 c0       	rjmp	.+40     	; 0x18fc <can_receive_message+0x3c>
    18d4:	21 e0       	ldi	r18, 0x01	; 1
    18d6:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t cs, return_value = 0;
	uint8_t *data_ptr = (uint8_t*) can_data;
	uint8_t mob;
	for(mob = 0; mob < 4; mob++)	// check receive buffers of the CAN
	{ 
		CANPAGE = (mob << 4);		// select MOb
    18d8:	cd ee       	ldi	r28, 0xED	; 237
    18da:	d0 e0       	ldi	r29, 0x00	; 0
		cs = CANEN2 >> mob;			// get status of MOb
    18dc:	ac ed       	ldi	r26, 0xDC	; 220
    18de:	b0 e0       	ldi	r27, 0x00	; 0
	uint8_t cs, return_value = 0;
	uint8_t *data_ptr = (uint8_t*) can_data;
	uint8_t mob;
	for(mob = 0; mob < 4; mob++)	// check receive buffers of the CAN
	{ 
		CANPAGE = (mob << 4);		// select MOb
    18e0:	e2 2f       	mov	r30, r18
    18e2:	e2 95       	swap	r30
    18e4:	e0 7f       	andi	r30, 0xF0	; 240
    18e6:	e8 83       	st	Y, r30
		cs = CANEN2 >> mob;			// get status of MOb
    18e8:	ec 91       	ld	r30, X
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	02 2e       	mov	r0, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <can_receive_message+0x34>
    18f0:	f5 95       	asr	r31
    18f2:	e7 95       	ror	r30
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <can_receive_message+0x30>
		if ((cs & 0x01) == 0)		// MOb not busy? -> data received!
    18f8:	e0 fd       	sbrc	r30, 0
    18fa:	57 c0       	rjmp	.+174    	; 0x19aa <can_receive_message+0xea>
		{
			uint8_t inf = CANCDMOB;
    18fc:	20 91 ef 00 	lds	r18, 0x00EF
			*len = inf & 0x0f;		//save DLC
    1900:	32 2f       	mov	r19, r18
    1902:	3f 70       	andi	r19, 0x0F	; 15
			if(*len > 8) *len = 8;
    1904:	39 30       	cpi	r19, 0x09	; 9
    1906:	18 f4       	brcc	.+6      	; 0x190e <can_receive_message+0x4e>
		CANPAGE = (mob << 4);		// select MOb
		cs = CANEN2 >> mob;			// get status of MOb
		if ((cs & 0x01) == 0)		// MOb not busy? -> data received!
		{
			uint8_t inf = CANCDMOB;
			*len = inf & 0x0f;		//save DLC
    1908:	eb 01       	movw	r28, r22
    190a:	38 83       	st	Y, r19
    190c:	03 c0       	rjmp	.+6      	; 0x1914 <can_receive_message+0x54>
			if(*len > 8) *len = 8;
    190e:	38 e0       	ldi	r19, 0x08	; 8
    1910:	fb 01       	movw	r30, r22
    1912:	30 83       	st	Z, r19
			if((inf & 0x10) == 0)	//standard ID?
    1914:	24 fd       	sbrc	r18, 4
    1916:	15 c0       	rjmp	.+42     	; 0x1942 <can_receive_message+0x82>
				*id = (((uint16_t)CANIDT1) << 3) + (CANIDT2 >> 5);
    1918:	20 91 f3 00 	lds	r18, 0x00F3
    191c:	00 91 f2 00 	lds	r16, 0x00F2
    1920:	02 95       	swap	r16
    1922:	06 95       	lsr	r16
    1924:	07 70       	andi	r16, 0x07	; 7
    1926:	10 e0       	ldi	r17, 0x00	; 0
    1928:	f8 e0       	ldi	r31, 0x08	; 8
    192a:	2f 9f       	mul	r18, r31
    192c:	00 0d       	add	r16, r0
    192e:	11 1d       	adc	r17, r1
    1930:	11 24       	eor	r1, r1
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	ec 01       	movw	r28, r24
    1938:	08 83       	st	Y, r16
    193a:	19 83       	std	Y+1, r17	; 0x01
    193c:	2a 83       	std	Y+2, r18	; 0x02
    193e:	3b 83       	std	Y+3, r19	; 0x03
    1940:	1a c0       	rjmp	.+52     	; 0x1976 <can_receive_message+0xb6>
			else 					//extended ID!
			{	
				u32 id_buf;
				id_buf.b[3] = CANIDT1;
    1942:	e0 91 f3 00 	lds	r30, 0x00F3
    1946:	3e 2f       	mov	r19, r30
				id_buf.b[2] = CANIDT2;
    1948:	e0 91 f2 00 	lds	r30, 0x00F2
    194c:	2e 2f       	mov	r18, r30
				id_buf.b[1] = CANIDT3;
    194e:	e0 91 f1 00 	lds	r30, 0x00F1
    1952:	1e 2f       	mov	r17, r30
				id_buf.b[0] = CANIDT4;
    1954:	e0 91 f0 00 	lds	r30, 0x00F0
    1958:	0e 2f       	mov	r16, r30
				id_buf.l >>= 3;
    195a:	68 94       	set
    195c:	12 f8       	bld	r1, 2
    195e:	36 95       	lsr	r19
    1960:	27 95       	ror	r18
    1962:	17 95       	ror	r17
    1964:	07 95       	ror	r16
    1966:	16 94       	lsr	r1
    1968:	d1 f7       	brne	.-12     	; 0x195e <can_receive_message+0x9e>
				id_buf.b[3] |= 0x80;
    196a:	30 68       	ori	r19, 0x80	; 128
				*id = id_buf.l;
    196c:	fc 01       	movw	r30, r24
    196e:	00 83       	st	Z, r16
    1970:	11 83       	std	Z+1, r17	; 0x01
    1972:	22 83       	std	Z+2, r18	; 0x02
    1974:	33 83       	std	Z+3, r19	; 0x03
			}
			for(uint8_t i = 0; i < *len; i++) 
    1976:	eb 01       	movw	r28, r22
    1978:	88 81       	ld	r24, Y
    197a:	88 23       	and	r24, r24
    197c:	69 f0       	breq	.+26     	; 0x1998 <can_receive_message+0xd8>
    197e:	24 2f       	mov	r18, r20
    1980:	e4 2f       	mov	r30, r20
    1982:	f5 2f       	mov	r31, r21
				*(data_ptr++) = CANMSG;
    1984:	aa ef       	ldi	r26, 0xFA	; 250
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	8c 91       	ld	r24, X
    198a:	81 93       	st	Z+, r24
    198c:	9e 2f       	mov	r25, r30
    198e:	92 1b       	sub	r25, r18
				id_buf.b[0] = CANIDT4;
				id_buf.l >>= 3;
				id_buf.b[3] |= 0x80;
				*id = id_buf.l;
			}
			for(uint8_t i = 0; i < *len; i++) 
    1990:	eb 01       	movw	r28, r22
    1992:	88 81       	ld	r24, Y
    1994:	98 17       	cp	r25, r24
    1996:	c0 f3       	brcs	.-16     	; 0x1988 <can_receive_message+0xc8>
				*(data_ptr++) = CANMSG;
			CANCDMOB = 0x80;		// re-activate MOb for reception
    1998:	80 e8       	ldi	r24, 0x80	; 128
    199a:	80 93 ef 00 	sts	0x00EF, r24
			return_value = ((~CANEN2) & 0x0f) | 1;
    199e:	80 91 dc 00 	lds	r24, 0x00DC
    19a2:	80 95       	com	r24
    19a4:	8e 70       	andi	r24, 0x0E	; 14
    19a6:	81 60       	ori	r24, 0x01	; 1
			break;
    19a8:	07 c0       	rjmp	.+14     	; 0x19b8 <can_receive_message+0xf8>
    19aa:	2f 5f       	subi	r18, 0xFF	; 255
    19ac:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t can_receive_message(uint32_t *id, uint8_t *len, uint64_t *can_data)
{
	uint8_t cs, return_value = 0;
	uint8_t *data_ptr = (uint8_t*) can_data;
	uint8_t mob;
	for(mob = 0; mob < 4; mob++)	// check receive buffers of the CAN
    19ae:	24 30       	cpi	r18, 0x04	; 4
    19b0:	31 05       	cpc	r19, r1
    19b2:	09 f0       	breq	.+2      	; 0x19b6 <can_receive_message+0xf6>
    19b4:	95 cf       	rjmp	.-214    	; 0x18e0 <can_receive_message+0x20>
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
uint8_t can_receive_message(uint32_t *id, uint8_t *len, uint64_t *can_data)
{
	uint8_t cs, return_value = 0;
    19b6:	80 e0       	ldi	r24, 0x00	; 0
			return_value = ((~CANEN2) & 0x0f) | 1;
			break;
		}
	}
	return(return_value); //return_value = 0: no reception, 1: one msg received, >1: more than one msg in buffers (every set bit in return_value represents a full buffer at time of function-call)
}
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	08 95       	ret

000019c2 <can_send_message>:
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
	
uint8_t can_send_message(uint32_t id, uint8_t len, uint64_t can_data)
{
    19c2:	cf 92       	push	r12
    19c4:	df 92       	push	r13
    19c6:	ef 92       	push	r14
    19c8:	ff 92       	push	r15
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	28 97       	sbiw	r28, 0x08	; 8
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	c9 82       	std	Y+1, r12	; 0x01
    19e4:	da 82       	std	Y+2, r13	; 0x02
    19e6:	eb 82       	std	Y+3, r14	; 0x03
    19e8:	fc 82       	std	Y+4, r15	; 0x04
    19ea:	0d 83       	std	Y+5, r16	; 0x05
    19ec:	1e 83       	std	Y+6, r17	; 0x06
    19ee:	2f 83       	std	Y+7, r18	; 0x07
    19f0:	38 87       	std	Y+8, r19	; 0x08
	uint8_t *data_ptr = (uint8_t *)&can_data;
	
	if((CANEN2 & 0x10) == 0)	// MOb #4 not busy? 
    19f2:	20 91 dc 00 	lds	r18, 0x00DC
    19f6:	24 fd       	sbrc	r18, 4
    19f8:	04 c0       	rjmp	.+8      	; 0x1a02 <can_send_message+0x40>
	{
		CANPAGE = (4 << 4);	// select MOb #4, data index = 0
    19fa:	20 e4       	ldi	r18, 0x40	; 64
    19fc:	20 93 ed 00 	sts	0x00ED, r18
    1a00:	07 c0       	rjmp	.+14     	; 0x1a10 <can_send_message+0x4e>
	}
	else if((CANEN2 & 0x20) == 0)	// MOb #5 not busy? 
    1a02:	20 91 dc 00 	lds	r18, 0x00DC
    1a06:	25 fd       	sbrc	r18, 5
    1a08:	42 c0       	rjmp	.+132    	; 0x1a8e <can_send_message+0xcc>
	{
		CANPAGE = (5 << 4);	// select MOb #5, data index = 0
    1a0a:	20 e5       	ldi	r18, 0x50	; 80
    1a0c:	20 93 ed 00 	sts	0x00ED, r18
	}
	else return(0);
	
	for(uint8_t i = 0; i < len; i++) 
    1a10:	44 23       	and	r20, r20
    1a12:	61 f0       	breq	.+24     	; 0x1a2c <can_send_message+0x6a>
    1a14:	9e 01       	movw	r18, r28
    1a16:	2f 5f       	subi	r18, 0xFF	; 255
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1a:	f9 01       	movw	r30, r18
		CANMSG = *(data_ptr++);
    1a1c:	aa ef       	ldi	r26, 0xFA	; 250
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	51 91       	ld	r21, Z+
    1a22:	5c 93       	st	X, r21
    1a24:	5e 2f       	mov	r21, r30
    1a26:	52 1b       	sub	r21, r18
	{
		CANPAGE = (5 << 4);	// select MOb #5, data index = 0
	}
	else return(0);
	
	for(uint8_t i = 0; i < len; i++) 
    1a28:	54 17       	cp	r21, r20
    1a2a:	d0 f3       	brcs	.-12     	; 0x1a20 <can_send_message+0x5e>
		CANMSG = *(data_ptr++);
	if((id & 0x80000000) == 0) 	// set standard ID
    1a2c:	99 23       	and	r25, r25
    1a2e:	7c f0       	brlt	.+30     	; 0x1a4e <can_send_message+0x8c>
	{
		CANIDT4 = 0;
    1a30:	10 92 f0 00 	sts	0x00F0, r1
		id = ((uint16_t) id << 5);
    1a34:	66 0f       	add	r22, r22
    1a36:	77 1f       	adc	r23, r23
    1a38:	62 95       	swap	r22
    1a3a:	72 95       	swap	r23
    1a3c:	70 7f       	andi	r23, 0xF0	; 240
    1a3e:	76 27       	eor	r23, r22
    1a40:	60 7f       	andi	r22, 0xF0	; 240
    1a42:	76 27       	eor	r23, r22
		CANIDT2 = (((uint16_t) id & 0x00ff) >>  0);
    1a44:	60 93 f2 00 	sts	0x00F2, r22
		CANIDT1 = (((uint16_t) id & 0xff00) >>  8);
    1a48:	70 93 f3 00 	sts	0x00F3, r23
    1a4c:	1b c0       	rjmp	.+54     	; 0x1a84 <can_send_message+0xc2>
	}
	else 						// set extended ID
	{	
		id = id << 3;
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	aa 1f       	adc	r26, r26
    1a58:	bb 1f       	adc	r27, r27
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	aa 1f       	adc	r26, r26
    1a60:	bb 1f       	adc	r27, r27
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	aa 1f       	adc	r26, r26
    1a68:	bb 1f       	adc	r27, r27
		CANIDT4 = ((id & 0x000000ff) >>  0);
    1a6a:	80 93 f0 00 	sts	0x00F0, r24
		CANIDT3 = ((id & 0x0000ff00) >>  8);
    1a6e:	90 93 f1 00 	sts	0x00F1, r25
		CANIDT2 = ((id & 0x00ff0000) >> 16);
    1a72:	a0 93 f2 00 	sts	0x00F2, r26
		CANIDT1 = ((id & 0xff000000) >> 24);
    1a76:	8b 2f       	mov	r24, r27
    1a78:	99 27       	eor	r25, r25
    1a7a:	aa 27       	eor	r26, r26
    1a7c:	bb 27       	eor	r27, r27
    1a7e:	80 93 f3 00 	sts	0x00F3, r24
		len += 0x10;
    1a82:	40 5f       	subi	r20, 0xF0	; 240
	
	}
	CANCDMOB = (0x40 | len);		// transmit
    1a84:	40 64       	ori	r20, 0x40	; 64
    1a86:	40 93 ef 00 	sts	0x00EF, r20
	return(1);
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	01 c0       	rjmp	.+2      	; 0x1a90 <can_send_message+0xce>
	}
	else if((CANEN2 & 0x20) == 0)	// MOb #5 not busy? 
	{
		CANPAGE = (5 << 4);	// select MOb #5, data index = 0
	}
	else return(0);
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
		len += 0x10;
	
	}
	CANCDMOB = (0x40 | len);		// transmit
	return(1);
}
    1a90:	28 96       	adiw	r28, 0x08	; 8
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	1f 91       	pop	r17
    1aa2:	0f 91       	pop	r16
    1aa4:	ff 90       	pop	r15
    1aa6:	ef 90       	pop	r14
    1aa8:	df 90       	pop	r13
    1aaa:	cf 90       	pop	r12
    1aac:	08 95       	ret

00001aae <can_task>:


void can_task()
{
    1aae:	cf 92       	push	r12
    1ab0:	df 92       	push	r13
    1ab2:	ef 92       	push	r14
    1ab4:	ff 92       	push	r15
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	2d 97       	sbiw	r28, 0x0d	; 13
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61
	static uint8_t index = 0;
	if (can_tx_flags)			//anything to send?
    1ace:	40 91 4b 07 	lds	r20, 0x074B
    1ad2:	44 23       	and	r20, r20
    1ad4:	d1 f1       	breq	.+116    	; 0x1b4a <can_task+0x9c>
	{	
		if((CANEN2 & 0x30) != 0x30) // MOb #4 or #5 not busy?
    1ad6:	80 91 dc 00 	lds	r24, 0x00DC
    1ada:	80 73       	andi	r24, 0x30	; 48
    1adc:	80 33       	cpi	r24, 0x30	; 48
    1ade:	a9 f1       	breq	.+106    	; 0x1b4a <can_task+0x9c>
    1ae0:	80 91 f6 06 	lds	r24, 0x06F6
				{
					index++;		//select next message
				}
				else
				{
					index = 0;		//overrun, start over with first message
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
			while (!(can_tx_flags & (1 << index))); //message flagged for transmission? if not - check next message
    1ae6:	50 e0       	ldi	r21, 0x00	; 0
	{	
		if((CANEN2 & 0x30) != 0x30) // MOb #4 or #5 not busy?
		{
			do
			{
				if(index < 7) 
    1ae8:	87 30       	cpi	r24, 0x07	; 7
    1aea:	10 f4       	brcc	.+4      	; 0x1af0 <can_task+0x42>
				{
					index++;		//select next message
    1aec:	8f 5f       	subi	r24, 0xFF	; 255
    1aee:	01 c0       	rjmp	.+2      	; 0x1af2 <can_task+0x44>
				}
				else
				{
					index = 0;		//overrun, start over with first message
    1af0:	89 2f       	mov	r24, r25
				}
			}
			while (!(can_tx_flags & (1 << index))); //message flagged for transmission? if not - check next message
    1af2:	9a 01       	movw	r18, r20
    1af4:	08 2e       	mov	r0, r24
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <can_task+0x4e>
    1af8:	35 95       	asr	r19
    1afa:	27 95       	ror	r18
    1afc:	0a 94       	dec	r0
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <can_task+0x4a>
    1b00:	20 ff       	sbrs	r18, 0
    1b02:	f2 cf       	rjmp	.-28     	; 0x1ae8 <can_task+0x3a>
    1b04:	80 93 f6 06 	sts	0x06F6, r24
			
			can_send_task(index);			//call can_send_task (prepares data and starts transmission)
    1b08:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <can_send_task>
			
			can_tx_flags &= ~(1 << index);  //reset send flag for sent message
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	00 90 f6 06 	lds	r0, 0x06F6
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <can_task+0x6c>
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	0a 94       	dec	r0
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <can_task+0x68>
    1b1e:	80 95       	com	r24
    1b20:	90 91 4b 07 	lds	r25, 0x074B
    1b24:	89 23       	and	r24, r25
    1b26:	80 93 4b 07 	sts	0x074B, r24
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <can_task+0x9c>
	can_msg_t can_rx;
	
	//wenn alle nachrichten in einem Aufruf verarbeitet werden sollen -> while(can_receive.....
	while(can_receive_message(&can_rx.id, &can_rx.dlc, &can_rx.data.ll) >= 1) 
	{
		can_receive_task(can_rx);
    1b2c:	c9 80       	ldd	r12, Y+1	; 0x01
    1b2e:	da 80       	ldd	r13, Y+2	; 0x02
    1b30:	eb 80       	ldd	r14, Y+3	; 0x03
    1b32:	fc 80       	ldd	r15, Y+4	; 0x04
    1b34:	0d 81       	ldd	r16, Y+5	; 0x05
    1b36:	1e 81       	ldd	r17, Y+6	; 0x06
    1b38:	2f 81       	ldd	r18, Y+7	; 0x07
    1b3a:	38 85       	ldd	r19, Y+8	; 0x08
    1b3c:	49 85       	ldd	r20, Y+9	; 0x09
    1b3e:	5a 85       	ldd	r21, Y+10	; 0x0a
    1b40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b46:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <can_receive_task>
	}
	
	can_msg_t can_rx;
	
	//wenn alle nachrichten in einem Aufruf verarbeitet werden sollen -> while(can_receive.....
	while(can_receive_message(&can_rx.id, &can_rx.dlc, &can_rx.data.ll) >= 1) 
    1b4a:	ae 01       	movw	r20, r28
    1b4c:	4a 5f       	subi	r20, 0xFA	; 250
    1b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b50:	be 01       	movw	r22, r28
    1b52:	6b 5f       	subi	r22, 0xFB	; 251
    1b54:	7f 4f       	sbci	r23, 0xFF	; 255
    1b56:	ce 01       	movw	r24, r28
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <can_receive_message>
    1b5e:	81 11       	cpse	r24, r1
    1b60:	e5 cf       	rjmp	.-54     	; 0x1b2c <can_task+0x7e>
	{
		can_receive_task(can_rx);
	}
    1b62:	2d 96       	adiw	r28, 0x0d	; 13
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	1f 91       	pop	r17
    1b74:	0f 91       	pop	r16
    1b76:	ff 90       	pop	r15
    1b78:	ef 90       	pop	r14
    1b7a:	df 90       	pop	r13
    1b7c:	cf 90       	pop	r12
    1b7e:	08 95       	ret

00001b80 <digital_output_init>:
#include "header.h"
#include "DigIO.h"

void digital_output_init(uint8_t pin_define)
{
	switch (pin_define)									//not all PIN_... defines appear here - some of them refer to pins which are already taken care of
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	fc 01       	movw	r30, r24
    1b84:	e5 56       	subi	r30, 0x65	; 101
    1b86:	f1 09       	sbc	r31, r1
    1b88:	ef 36       	cpi	r30, 0x6F	; 111
    1b8a:	f1 05       	cpc	r31, r1
    1b8c:	88 f5       	brcc	.+98     	; 0x1bf0 <digital_output_init+0x70>
    1b8e:	e2 5c       	subi	r30, 0xC2	; 194
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <__tablejump2__>
	{
	
		case PIN_PWM1:	//PORTD &= ~(1<<PORTD0);		//set pin State to low
						DDRD |= (1<<PORTD0);		//configure pin as output
    1b96:	50 9a       	sbi	0x0a, 0	; 10
						break;							
    1b98:	08 95       	ret
						
		case PIN_PWM2:	//PORTC &= ~(1<<PORTC0);		//set pin State to low
						DDRC |= (1<<PORTC0);		//configure pin as output
    1b9a:	38 9a       	sbi	0x07, 0	; 7
						break;
    1b9c:	08 95       	ret
						
		case PIN_PWM3:	//PORTD &= ~(1<<PORTD2);		//set pin State to low
						DDRD |= (1<<PORTD2);		//configure pin as output
    1b9e:	52 9a       	sbi	0x0a, 2	; 10
						break;
    1ba0:	08 95       	ret
						
		case PIN_PWM4:	//PORTC &= ~(1<<PORTC1);		//set pin State to low
						DDRC |= (1<<PORTC1);		//configure pin as output
    1ba2:	39 9a       	sbi	0x07, 1	; 7
						break;
    1ba4:	08 95       	ret
						
		case PIN_PWM5:	//PORTB &= ~(1<<PORTB6);		//set pin State to low
						DDRB |= (1<<PORTB6);		//configure pin as output
    1ba6:	26 9a       	sbi	0x04, 6	; 4
						break;
    1ba8:	08 95       	ret
						
		case PIN_PWM6:	//PORTD &= ~(1<<PORTD3);		//set pin State to low
						DDRD |= (1<<PORTD3);		//configure pin as output
    1baa:	53 9a       	sbi	0x0a, 3	; 10
						break;
    1bac:	08 95       	ret
						
		case PIN_PWM7:	//PORTB &= ~(1<<PORTB0);		//set pin State to low
						DDRB |= (1<<PORTB0);		//configure pin as output
    1bae:	20 9a       	sbi	0x04, 0	; 4
						break;
    1bb0:	08 95       	ret
						
		case PIN_PWM8:	//PORTB &= ~(1<<PORTB1);		//set pin State to low
						DDRB |= (1<<PORTB1);		//configure pin as output
    1bb2:	21 9a       	sbi	0x04, 1	; 4
						break;
    1bb4:	08 95       	ret
						
		case PIN_PWM9:	//PORTB &= ~(1<<PORTB7);		//set pin State to low
						DDRB |= (1<<PORTB7);		//configure pin as output
    1bb6:	27 9a       	sbi	0x04, 7	; 4
						break;
    1bb8:	08 95       	ret

		case PIN_AN10:	//PORTD &= ~(1<<PORTD4);		//set pin State to low
						DDRD |= (1<<PORTD4);		//configure pin as output
    1bba:	54 9a       	sbi	0x0a, 4	; 10
						break;
    1bbc:	08 95       	ret
						
		case PIN_AN1:	//PORTE &= ~(1<<PORTE2);		//set pin State to low
						DDRE |= (1<<PORTE2);		//configure pin as output
    1bbe:	6a 9a       	sbi	0x0d, 2	; 13
						break;
    1bc0:	08 95       	ret
						
		case PIN_AN2:	//PORTD &= ~(1<<PORTD5);		//set pin State to low
						DDRD |= (1<<PORTD5);		//configure pin as output
    1bc2:	55 9a       	sbi	0x0a, 5	; 10
						break;
    1bc4:	08 95       	ret
						
		case PIN_AN3:	//PORTD &= ~(1<<PORTD6);		//set pin State to low
						DDRD |= (1<<PORTD6);		//configure pin as output
    1bc6:	56 9a       	sbi	0x0a, 6	; 10
						break;
    1bc8:	08 95       	ret
						
		case PIN_AN4:	//PORTB &= ~(1<<PORTB2);		//set pin State to low
						DDRB |= (1<<PORTB2);		//configure pin as output
    1bca:	22 9a       	sbi	0x04, 2	; 4
						break;
    1bcc:	08 95       	ret
						
		case PIN_AN5:	//PORTC &= ~(1<<PORTC4);		//set pin State to low
						DDRC |= (1<<PORTC4);		//configure pin as output
    1bce:	3c 9a       	sbi	0x07, 4	; 7
						break;
    1bd0:	08 95       	ret
						
		case PIN_AN6:	//PORTC &= ~(1<<PORTC5);		//set pin State to low
						DDRC |= (1<<PORTC5);		//configure pin as output
    1bd2:	3d 9a       	sbi	0x07, 5	; 7
						break;
    1bd4:	08 95       	ret
						
		case PIN_AN7:	//PORTC &= ~(1<<PORTC6);		//set pin State to low
						DDRC |= (1<<PORTC6);		//configure pin as output
    1bd6:	3e 9a       	sbi	0x07, 6	; 7
						break;
    1bd8:	08 95       	ret
						
//#ifndef LM50_TEMP			//<-- wie geht das? muss noch gemacht werden!
		case PIN_AN8:	//PORTB &= ~(1<<PORTB5);		//set pin State to low
						DDRB |= (1<<PORTB5);		//configure pin as output
    1bda:	25 9a       	sbi	0x04, 5	; 4
						break;
    1bdc:	08 95       	ret
//#endif
						
						

		case PIN_DAC:	//PORTC &= ~(1<<PORTC7);		//set pin State to low
						DDRC |= (1<<PORTC7);		//configure pin as output
    1bde:	3f 9a       	sbi	0x07, 7	; 7
						break;
    1be0:	08 95       	ret

		case PIN_GPIO1:	//PORTB &= ~(1<<PORTB4);		//set pin State to low
						DDRB |= (1<<PORTB4);		//configure pin as output
    1be2:	24 9a       	sbi	0x04, 4	; 4
						break;
    1be4:	08 95       	ret
							
		case PIN_GPIO2:	//PORTB &= ~(1<<PORTB3);		//set pin State to low
						DDRB |= (1<<PORTB3);		//configure pin as output
    1be6:	23 9a       	sbi	0x04, 3	; 4
						break;
    1be8:	08 95       	ret
							
		case PIN_GPIO3:	//PORTD &= ~(1<<PORTD1);		//set pin State to low
						DDRD |= (1<<PORTD1);		//configure pin as output
    1bea:	51 9a       	sbi	0x0a, 1	; 10
						break;
    1bec:	08 95       	ret
							
		case PIN_GPIO4:	//PORTD &= ~(1<<PORTD7);		//set pin State to low
						DDRD |= (1<<PORTD7);		//configure pin as output
    1bee:	57 9a       	sbi	0x0a, 7	; 10
    1bf0:	08 95       	ret

00001bf2 <LM95071_init>:
uint16_t LM95071_temp_read_scheduled = 0, LM95071_spi_transmission_active = 0;
uint16_t LM95071_temp = 0;

void LM95071_init()
{
	digital_output_init(SPI_CS_LM95071_PIN);	//set LM95071 chip select line to output
    1bf2:	83 e7       	ldi	r24, 0x73	; 115
    1bf4:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <digital_output_init>
	SPI_CS_LM95071_HIGH;						//set LM95071 chip select high
    1bf8:	5f 9a       	sbi	0x0b, 7	; 11
    1bfa:	08 95       	ret

00001bfc <LM95071_task>:
		LM95071_temp_read_scheduled = 1;
}

void LM95071_task()
{
	if (LM95071_temp_read_scheduled)
    1bfc:	80 91 fb 06 	lds	r24, 0x06FB
    1c00:	90 91 fc 06 	lds	r25, 0x06FC
    1c04:	89 2b       	or	r24, r25
    1c06:	c9 f1       	breq	.+114    	; 0x1c7a <LM95071_task+0x7e>
	{
		if (LM95071_spi_transmission_active)
    1c08:	80 91 f9 06 	lds	r24, 0x06F9
    1c0c:	90 91 fa 06 	lds	r25, 0x06FA
    1c10:	89 2b       	or	r24, r25
    1c12:	e1 f0       	breq	.+56     	; 0x1c4c <LM95071_task+0x50>
		{
			if (spi.flag)
    1c14:	80 91 6f 07 	lds	r24, 0x076F
    1c18:	88 23       	and	r24, r24
    1c1a:	79 f1       	breq	.+94     	; 0x1c7a <LM95071_task+0x7e>
			{
				SPI_CS_LM95071_HIGH;
    1c1c:	5f 9a       	sbi	0x0b, 7	; 11
				spi.locked = 0;
    1c1e:	10 92 6e 07 	sts	0x076E, r1
				LM95071_temp = (spi.rx_buffer.s[0] >> 2);
    1c22:	80 91 5c 07 	lds	r24, 0x075C
    1c26:	90 91 5d 07 	lds	r25, 0x075D
    1c2a:	96 95       	lsr	r25
    1c2c:	87 95       	ror	r24
    1c2e:	96 95       	lsr	r25
    1c30:	87 95       	ror	r24
    1c32:	90 93 f8 06 	sts	0x06F8, r25
    1c36:	80 93 f7 06 	sts	0x06F7, r24
				LM95071_spi_transmission_active = 0;
    1c3a:	10 92 fa 06 	sts	0x06FA, r1
    1c3e:	10 92 f9 06 	sts	0x06F9, r1
				LM95071_temp_read_scheduled = 0;		
    1c42:	10 92 fc 06 	sts	0x06FC, r1
    1c46:	10 92 fb 06 	sts	0x06FB, r1
    1c4a:	08 95       	ret
			}
		}
		else
		{
			if(!spi.locked)
    1c4c:	80 91 6e 07 	lds	r24, 0x076E
    1c50:	81 11       	cpse	r24, r1
    1c52:	13 c0       	rjmp	.+38     	; 0x1c7a <LM95071_task+0x7e>
			{
				SPCR &= ~((1<<CPOL)|(1<<CPHA)); //setup SPI in Mode 0
    1c54:	8c b5       	in	r24, 0x2c	; 44
    1c56:	83 7f       	andi	r24, 0xF3	; 243
    1c58:	8c bd       	out	0x2c, r24	; 44
				spi.tx_buffer.s[0] = 0;		//send 0x0000 ->continous_conversion mode
    1c5a:	10 92 4d 07 	sts	0x074D, r1
    1c5e:	10 92 4c 07 	sts	0x074C, r1
				spi.bytes = 2;			//16 Bit, read conversion only mode
    1c62:	82 e0       	ldi	r24, 0x02	; 2
    1c64:	80 93 6c 07 	sts	0x076C, r24
				SPI_CS_LM95071_LOW;			//Activate LM95071 chip select
    1c68:	5f 98       	cbi	0x0b, 7	; 11
				spi_start_transmission();
    1c6a:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <spi_start_transmission>
				LM95071_spi_transmission_active = 1;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	90 93 fa 06 	sts	0x06FA, r25
    1c76:	80 93 f9 06 	sts	0x06F9, r24
    1c7a:	08 95       	ret

00001c7c <spi_init_master>:
volatile spi_t spi;		//Variablendeklaration für Zugriff auf SPI-Datenstruktur

void spi_init_master(uint8_t prescaler)
{
	/* Set MOSI and SCK as output, MISO will be set to input automatically when SPI-Interface is finally enabled */
	DDRB |= (1<<PORTB1)|(1<<PORTB7);
    1c7c:	94 b1       	in	r25, 0x04	; 4
    1c7e:	92 68       	ori	r25, 0x82	; 130
    1c80:	94 b9       	out	0x04, r25	; 4
	/* Set _SS as output to protect SPI-Module from being switched to slave mode accidentally */
	DDRD  |=  (1<<PORTD3);
    1c82:	53 9a       	sbi	0x0a, 3	; 10
	/* Enable SPI, Master, set clock rate */
	switch (prescaler)
    1c84:	80 31       	cpi	r24, 0x10	; 16
    1c86:	09 f1       	breq	.+66     	; 0x1cca <spi_init_master+0x4e>
    1c88:	38 f4       	brcc	.+14     	; 0x1c98 <spi_init_master+0x1c>
    1c8a:	84 30       	cpi	r24, 0x04	; 4
    1c8c:	91 f0       	breq	.+36     	; 0x1cb2 <spi_init_master+0x36>
    1c8e:	88 30       	cpi	r24, 0x08	; 8
    1c90:	b1 f0       	breq	.+44     	; 0x1cbe <spi_init_master+0x42>
    1c92:	82 30       	cpi	r24, 0x02	; 2
    1c94:	89 f5       	brne	.+98     	; 0x1cf8 <spi_init_master+0x7c>
    1c96:	07 c0       	rjmp	.+14     	; 0x1ca6 <spi_init_master+0x2a>
    1c98:	80 34       	cpi	r24, 0x40	; 64
    1c9a:	19 f1       	breq	.+70     	; 0x1ce2 <spi_init_master+0x66>
    1c9c:	80 38       	cpi	r24, 0x80	; 128
    1c9e:	39 f1       	breq	.+78     	; 0x1cee <spi_init_master+0x72>
    1ca0:	80 32       	cpi	r24, 0x20	; 32
    1ca2:	51 f5       	brne	.+84     	; 0x1cf8 <spi_init_master+0x7c>
    1ca4:	18 c0       	rjmp	.+48     	; 0x1cd6 <spi_init_master+0x5a>
	{
	case 2:		SPSR |= (1<<SPI2X);
    1ca6:	8d b5       	in	r24, 0x2d	; 45
    1ca8:	81 60       	ori	r24, 0x01	; 1
    1caa:	8d bd       	out	0x2d, r24	; 45
				SPCR = (1<<SPE)|(1<<MSTR);
    1cac:	80 e5       	ldi	r24, 0x50	; 80
    1cae:	8c bd       	out	0x2c, r24	; 44
				break;
    1cb0:	23 c0       	rjmp	.+70     	; 0x1cf8 <spi_init_master+0x7c>

	case 4:		SPSR &= ~(1<<SPI2X);
    1cb2:	8d b5       	in	r24, 0x2d	; 45
    1cb4:	8e 7f       	andi	r24, 0xFE	; 254
    1cb6:	8d bd       	out	0x2d, r24	; 45
				SPCR = (1<<SPE)|(1<<MSTR);
    1cb8:	80 e5       	ldi	r24, 0x50	; 80
    1cba:	8c bd       	out	0x2c, r24	; 44
				break;
    1cbc:	1d c0       	rjmp	.+58     	; 0x1cf8 <spi_init_master+0x7c>

	case 8:		SPSR |= (1<<SPI2X);
    1cbe:	8d b5       	in	r24, 0x2d	; 45
    1cc0:	81 60       	ori	r24, 0x01	; 1
    1cc2:	8d bd       	out	0x2d, r24	; 45
				SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1cc4:	81 e5       	ldi	r24, 0x51	; 81
    1cc6:	8c bd       	out	0x2c, r24	; 44
				break;
    1cc8:	17 c0       	rjmp	.+46     	; 0x1cf8 <spi_init_master+0x7c>

	case 16:	SPSR &= ~(1<<SPI2X);
    1cca:	8d b5       	in	r24, 0x2d	; 45
    1ccc:	8e 7f       	andi	r24, 0xFE	; 254
    1cce:	8d bd       	out	0x2d, r24	; 45
				SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1cd0:	81 e5       	ldi	r24, 0x51	; 81
    1cd2:	8c bd       	out	0x2c, r24	; 44
				break;
    1cd4:	11 c0       	rjmp	.+34     	; 0x1cf8 <spi_init_master+0x7c>

	case 32:	SPSR |= (1<<SPI2X);
    1cd6:	8d b5       	in	r24, 0x2d	; 45
    1cd8:	81 60       	ori	r24, 0x01	; 1
    1cda:	8d bd       	out	0x2d, r24	; 45
				SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);
    1cdc:	82 e5       	ldi	r24, 0x52	; 82
    1cde:	8c bd       	out	0x2c, r24	; 44
				break;
    1ce0:	0b c0       	rjmp	.+22     	; 0x1cf8 <spi_init_master+0x7c>

	case 64:	SPSR &= ~(1<<SPI2X);
    1ce2:	8d b5       	in	r24, 0x2d	; 45
    1ce4:	8e 7f       	andi	r24, 0xFE	; 254
    1ce6:	8d bd       	out	0x2d, r24	; 45
				SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1);
    1ce8:	82 e5       	ldi	r24, 0x52	; 82
    1cea:	8c bd       	out	0x2c, r24	; 44
				break;
    1cec:	05 c0       	rjmp	.+10     	; 0x1cf8 <spi_init_master+0x7c>

	case 128:	SPSR &= ~(1<<SPI2X);
    1cee:	8d b5       	in	r24, 0x2d	; 45
    1cf0:	8e 7f       	andi	r24, 0xFE	; 254
    1cf2:	8d bd       	out	0x2d, r24	; 45
				SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);
    1cf4:	83 e5       	ldi	r24, 0x53	; 83
    1cf6:	8c bd       	out	0x2c, r24	; 44
				break;
	}
	#ifdef SPI_INTERRUPT
		SPCR |= (1<<SPIE);								//enable SPI Interrupt
    1cf8:	8c b5       	in	r24, 0x2c	; 44
    1cfa:	80 68       	ori	r24, 0x80	; 128
    1cfc:	8c bd       	out	0x2c, r24	; 44
		sei();											//enable Interrupts globally
    1cfe:	78 94       	sei
    1d00:	08 95       	ret

00001d02 <spi_start_transmission>:



uint8_t spi_start_transmission()
{
	if (spi.locked)
    1d02:	80 91 6e 07 	lds	r24, 0x076E
    1d06:	81 11       	cpse	r24, r1
    1d08:	13 c0       	rjmp	.+38     	; 0x1d30 <spi_start_transmission+0x2e>
		return 0;
	}
	else
	{
		
		spi.flag = 0;
    1d0a:	10 92 6f 07 	sts	0x076F, r1
		spi.locked = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	80 93 6e 07 	sts	0x076E, r24
		spi.current_byte = 1;
    1d14:	80 93 6d 07 	sts	0x076D, r24
        if (spi.bytes > 16) spi.bytes = 16;                   //avoid memory leaks
    1d18:	80 91 6c 07 	lds	r24, 0x076C
    1d1c:	81 31       	cpi	r24, 0x11	; 17
    1d1e:	18 f0       	brcs	.+6      	; 0x1d26 <spi_start_transmission+0x24>
    1d20:	80 e1       	ldi	r24, 0x10	; 16
    1d22:	80 93 6c 07 	sts	0x076C, r24
		//uint8_t dummy_read;
		//SPCR |= (1<<SPIE);								//enable SPI Interrupt
		//dummy_read = SPSR;
		//dummy_read = SPDR;
		SPDR = spi.tx_buffer.b[0];  //start SPI transfer with MSB of tx-buffer data
    1d26:	80 91 4c 07 	lds	r24, 0x074C
    1d2a:	8e bd       	out	0x2e, r24	; 46
		return 1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	08 95       	ret

uint8_t spi_start_transmission()
{
	if (spi.locked)
	{
		return 0;
    1d30:	80 e0       	ldi	r24, 0x00	; 0
		//dummy_read = SPSR;
		//dummy_read = SPDR;
		SPDR = spi.tx_buffer.b[0];  //start SPI transfer with MSB of tx-buffer data
		return 1;
	}	
}
    1d32:	08 95       	ret

00001d34 <spi_task>:


uint8_t spi_task()							
{
	//DIGOUT_SET_GPIO1_HIGH;								//debug
	if(SPSR & (1<<SPIF))
    1d34:	0d b4       	in	r0, 0x2d	; 45
    1d36:	07 fe       	sbrs	r0, 7
    1d38:	1d c0       	rjmp	.+58     	; 0x1d74 <spi_task+0x40>
	{
		spi.rx_buffer.b[(spi.current_byte-1)] = SPDR;		//save last transmission's received data 
    1d3a:	ed e6       	ldi	r30, 0x6D	; 109
    1d3c:	f7 e0       	ldi	r31, 0x07	; 7
    1d3e:	a0 81       	ld	r26, Z
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	8e b5       	in	r24, 0x2e	; 46
    1d44:	a5 5b       	subi	r26, 0xB5	; 181
    1d46:	b8 4f       	sbci	r27, 0xF8	; 248
    1d48:	50 96       	adiw	r26, 0x10	; 16
    1d4a:	8c 93       	st	X, r24
		if (spi.current_byte < spi.bytes)								//not all bytes transmitted yet? -> start new transmission
    1d4c:	90 81       	ld	r25, Z
    1d4e:	80 91 6c 07 	lds	r24, 0x076C
    1d52:	98 17       	cp	r25, r24
    1d54:	58 f4       	brcc	.+22     	; 0x1d6c <spi_task+0x38>
		{
			spi.current_byte++;												//next byte
    1d56:	80 81       	ld	r24, Z
    1d58:	8f 5f       	subi	r24, 0xFF	; 255
    1d5a:	80 83       	st	Z, r24
			SPDR = spi.tx_buffer.b[(spi.current_byte-1)];	//start transfer
    1d5c:	e0 81       	ld	r30, Z
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	e5 5b       	subi	r30, 0xB5	; 181
    1d62:	f8 4f       	sbci	r31, 0xF8	; 248
    1d64:	80 81       	ld	r24, Z
    1d66:	8e bd       	out	0x2e, r24	; 46
			//DIGOUT_SET_GPIO1_LOW;							//debug
			return 0;
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	08 95       	ret
		}
		else
		{
			spi.flag = 1;											//transmission complete
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	80 93 6f 07 	sts	0x076F, r24
			//DIGOUT_SET_GPIO1_LOW;							//debug
			return 1;
    1d72:	08 95       	ret
		}
	}
	else
	{
			//DIGOUT_SET_GPIO1_LOW;							//debug
			return 0;
    1d74:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1d76:	08 95       	ret

00001d78 <__vector_26>:

#ifdef SPI_INTERRUPT
ISR(SPI_STC_vect)
{
    1d78:	1f 92       	push	r1
    1d7a:	0f 92       	push	r0
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	0f 92       	push	r0
    1d80:	11 24       	eor	r1, r1
    1d82:	8f 93       	push	r24
    1d84:	9f 93       	push	r25
    1d86:	af 93       	push	r26
    1d88:	bf 93       	push	r27
    1d8a:	ef 93       	push	r30
    1d8c:	ff 93       	push	r31
	//DIGOUT_SET_GPIO2_HIGH;								//debug
	spi.rx_buffer.b[(spi.current_byte-1)] = SPDR;		//save last transmission's received data
    1d8e:	ed e6       	ldi	r30, 0x6D	; 109
    1d90:	f7 e0       	ldi	r31, 0x07	; 7
    1d92:	a0 81       	ld	r26, Z
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	8e b5       	in	r24, 0x2e	; 46
    1d98:	a5 5b       	subi	r26, 0xB5	; 181
    1d9a:	b8 4f       	sbci	r27, 0xF8	; 248
    1d9c:	50 96       	adiw	r26, 0x10	; 16
    1d9e:	8c 93       	st	X, r24
	if (spi.current_byte < spi.bytes)							//not all bytes transmitted yet? -> start new transmission
    1da0:	90 81       	ld	r25, Z
    1da2:	80 91 6c 07 	lds	r24, 0x076C
    1da6:	98 17       	cp	r25, r24
    1da8:	50 f4       	brcc	.+20     	; 0x1dbe <__vector_26+0x46>
	{
		spi.current_byte++;										//next byte
    1daa:	80 81       	ld	r24, Z
    1dac:	8f 5f       	subi	r24, 0xFF	; 255
    1dae:	80 83       	st	Z, r24
		SPDR = spi.tx_buffer.b[(spi.current_byte-1)];	//start transfer
    1db0:	e0 81       	ld	r30, Z
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	e5 5b       	subi	r30, 0xB5	; 181
    1db6:	f8 4f       	sbci	r31, 0xF8	; 248
    1db8:	80 81       	ld	r24, Z
    1dba:	8e bd       	out	0x2e, r24	; 46
    1dbc:	03 c0       	rjmp	.+6      	; 0x1dc4 <__vector_26+0x4c>
	}
	else
	{
		spi.flag = 1;											//transmission complete
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	80 93 6f 07 	sts	0x076F, r24
	}
	
	//DIGOUT_SET_GPIO2_LOW;									//debug
}
    1dc4:	ff 91       	pop	r31
    1dc6:	ef 91       	pop	r30
    1dc8:	bf 91       	pop	r27
    1dca:	af 91       	pop	r26
    1dcc:	9f 91       	pop	r25
    1dce:	8f 91       	pop	r24
    1dd0:	0f 90       	pop	r0
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	0f 90       	pop	r0
    1dd6:	1f 90       	pop	r1
    1dd8:	18 95       	reti

00001dda <timer_init>:
volatile uint32_t millisec_count = 0;
volatile uint8_t flag_1ms = 0;

void timer_init(void)
{
	TCCR1A |= (1<<WGM11);
    1dda:	e0 e8       	ldi	r30, 0x80	; 128
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	82 60       	ori	r24, 0x02	; 2
    1de2:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13)|(1<<WGM12)|(1<<CS11);		//CS11 -> Prescaler = 8; Timer-Clk = ClkIO / 8 -> Timer-Clk = 16MHz / 8 = 2MHz
    1de4:	e1 e8       	ldi	r30, 0x81	; 129
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	8a 61       	ori	r24, 0x1A	; 26
    1dec:	80 83       	st	Z, r24
	ICR1 = 2000;
    1dee:	80 ed       	ldi	r24, 0xD0	; 208
    1df0:	97 e0       	ldi	r25, 0x07	; 7
    1df2:	90 93 87 00 	sts	0x0087, r25
    1df6:	80 93 86 00 	sts	0x0086, r24
	TIMSK1 |= (1<<TOIE1);
    1dfa:	ef e6       	ldi	r30, 0x6F	; 111
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	81 60       	ori	r24, 0x01	; 1
    1e02:	80 83       	st	Z, r24
	sei();
    1e04:	78 94       	sei
    1e06:	08 95       	ret

00001e08 <__vector_14>:
	
}


ISR(TIMER1_OVF_vect)
{
    1e08:	1f 92       	push	r1
    1e0a:	0f 92       	push	r0
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	0f 92       	push	r0
    1e10:	11 24       	eor	r1, r1
    1e12:	8f 93       	push	r24
    1e14:	9f 93       	push	r25
    1e16:	af 93       	push	r26
    1e18:	bf 93       	push	r27
	millisec_count++;
    1e1a:	80 91 fe 06 	lds	r24, 0x06FE
    1e1e:	90 91 ff 06 	lds	r25, 0x06FF
    1e22:	a0 91 00 07 	lds	r26, 0x0700
    1e26:	b0 91 01 07 	lds	r27, 0x0701
    1e2a:	01 96       	adiw	r24, 0x01	; 1
    1e2c:	a1 1d       	adc	r26, r1
    1e2e:	b1 1d       	adc	r27, r1
    1e30:	80 93 fe 06 	sts	0x06FE, r24
    1e34:	90 93 ff 06 	sts	0x06FF, r25
    1e38:	a0 93 00 07 	sts	0x0700, r26
    1e3c:	b0 93 01 07 	sts	0x0701, r27
	flag_1ms = 1;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	80 93 fd 06 	sts	0x06FD, r24
}
    1e46:	bf 91       	pop	r27
    1e48:	af 91       	pop	r26
    1e4a:	9f 91       	pop	r25
    1e4c:	8f 91       	pop	r24
    1e4e:	0f 90       	pop	r0
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	0f 90       	pop	r0
    1e54:	1f 90       	pop	r1
    1e56:	18 95       	reti

00001e58 <timer_task>:



void timer_task()
{
	if (flag_1ms == 1)		//triggered every ms - 1 kHz task
    1e58:	80 91 fd 06 	lds	r24, 0x06FD
    1e5c:	81 30       	cpi	r24, 0x01	; 1
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <timer_task+0xa>
    1e60:	4d c0       	rjmp	.+154    	; 0x1efc <timer_task+0xa4>
	{
		static uint16_t ms_count = 1;
		
		flag_1ms = 0;
    1e62:	10 92 fd 06 	sts	0x06FD, r1
		
		timer_1ms_task();	//1 kHz user task
    1e66:	0e 94 6d 11 	call	0x22da	; 0x22da <timer_1ms_task>
		
		if (ms_count < 1000)
    1e6a:	80 91 03 01 	lds	r24, 0x0103
    1e6e:	90 91 04 01 	lds	r25, 0x0104
    1e72:	88 3e       	cpi	r24, 0xE8	; 232
    1e74:	23 e0       	ldi	r18, 0x03	; 3
    1e76:	92 07       	cpc	r25, r18
    1e78:	30 f4       	brcc	.+12     	; 0x1e86 <timer_task+0x2e>
		{
			ms_count++;
    1e7a:	01 96       	adiw	r24, 0x01	; 1
    1e7c:	90 93 04 01 	sts	0x0104, r25
    1e80:	80 93 03 01 	sts	0x0103, r24
    1e84:	08 c0       	rjmp	.+16     	; 0x1e96 <timer_task+0x3e>
		}
		else
		{
			//divide by 1000 - 1Hz task - offset by 1ms to all other tasks
			timer_1s_task();	//1 Hz
    1e86:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <timer_1s_task>
			ms_count = 1;
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	90 93 04 01 	sts	0x0104, r25
    1e92:	80 93 03 01 	sts	0x0103, r24
		}
        static uint8_t count1 = 1;
		if (count1 < 5)		//divide by 5 - 200Hz task
    1e96:	80 91 02 01 	lds	r24, 0x0102
    1e9a:	85 30       	cpi	r24, 0x05	; 5
    1e9c:	20 f4       	brcc	.+8      	; 0x1ea6 <timer_task+0x4e>
		{
            count1++;
    1e9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ea0:	80 93 02 01 	sts	0x0102, r24
    1ea4:	08 95       	ret
        }
        else
        {
            count1 = 1;
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	80 93 02 01 	sts	0x0102, r24
            
			timer_5ms_task();	//200 Hz user task
    1eac:	0e 94 6e 11 	call	0x22dc	; 0x22dc <timer_5ms_task>
		
			if (!(ms_count & 0x01))	//divide by 2 - 100 Hz task
    1eb0:	80 91 03 01 	lds	r24, 0x0103
    1eb4:	80 fd       	sbrc	r24, 0
    1eb6:	22 c0       	rjmp	.+68     	; 0x1efc <timer_task+0xa4>
			{
				timer_10ms_task();	//100 Hz user task
    1eb8:	0e 94 6f 11 	call	0x22de	; 0x22de <timer_10ms_task>

				static uint8_t count2 = 1;
                if (count2 < 5)		//divide by 5 - 20Hz task
    1ebc:	80 91 01 01 	lds	r24, 0x0101
    1ec0:	85 30       	cpi	r24, 0x05	; 5
    1ec2:	20 f4       	brcc	.+8      	; 0x1ecc <timer_task+0x74>
                {
                    count2++;
    1ec4:	8f 5f       	subi	r24, 0xFF	; 255
    1ec6:	80 93 01 01 	sts	0x0101, r24
    1eca:	08 95       	ret
                }
                else
                {
                    count2 = 1;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	80 93 01 01 	sts	0x0101, r24
                
                    timer_50ms_task();	//20 Hz user task
    1ed2:	0e 94 70 11 	call	0x22e0	; 0x22e0 <timer_50ms_task>

					if (!(ms_count & 0x02))	//divide by 2 - 10Hz task
    1ed6:	80 91 03 01 	lds	r24, 0x0103
    1eda:	81 fd       	sbrc	r24, 1
    1edc:	0f c0       	rjmp	.+30     	; 0x1efc <timer_task+0xa4>
					{
						timer_100ms_task();	//10 Hz user task
    1ede:	0e 94 c5 12 	call	0x258a	; 0x258a <timer_100ms_task>

                        static uint8_t count3 = 1;
                        if (count3 < 5)     //divide by 5 - 2Hz task
    1ee2:	80 91 00 01 	lds	r24, 0x0100
    1ee6:	85 30       	cpi	r24, 0x05	; 5
    1ee8:	20 f4       	brcc	.+8      	; 0x1ef2 <timer_task+0x9a>
                        {
                            count3++;
    1eea:	8f 5f       	subi	r24, 0xFF	; 255
    1eec:	80 93 00 01 	sts	0x0100, r24
    1ef0:	08 95       	ret
                        }
                        else
                        {
                            count3 = 1;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	80 93 00 01 	sts	0x0100, r24
						
							timer_500ms_task();	//2 Hz user task
    1ef8:	0e 94 c6 12 	call	0x258c	; 0x258c <timer_500ms_task>
    1efc:	08 95       	ret

00001efe <main>:
char uart_out[10];
//***************************************************************************************************************************************************************************************

int main(void)
{
	timer_init();
    1efe:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <timer_init>
	main_init_task();
    1f02:	0e 94 3c 10 	call	0x2078	; 0x2078 <main_init_task>
	spi_task();
    1f06:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <spi_task>
	adc_task();
    1f0a:	0e 94 06 01 	call	0x20c	; 0x20c <adc_task>
	can_task();	
    1f0e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <can_task>

	while(!(freigabe_task()))
    1f12:	06 c0       	rjmp	.+12     	; 0x1f20 <main+0x22>
	{
		can_task();
    1f14:	0e 94 57 0d 	call	0x1aae	; 0x1aae <can_task>
		spi_task();
    1f18:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <spi_task>
		adc_task();
    1f1c:	0e 94 06 01 	call	0x20c	; 0x20c <adc_task>
	main_init_task();
	spi_task();
	adc_task();
	can_task();	

	while(!(freigabe_task()))
    1f20:	0e 94 77 10 	call	0x20ee	; 0x20ee <freigabe_task>
    1f24:	88 23       	and	r24, r24
    1f26:	b1 f3       	breq	.-20     	; 0x1f14 <main+0x16>
	while(1)
	{		
		#ifndef SPI_INTERRUPT
		spi_task();
		#endif
		LM95071_task();
    1f28:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <LM95071_task>
		spi_task();
    1f2c:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <spi_task>
		adc_task();
    1f30:	0e 94 06 01 	call	0x20c	; 0x20c <adc_task>
		can_task();
    1f34:	0e 94 57 0d 	call	0x1aae	; 0x1aae <can_task>
		timer_task();
    1f38:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <timer_task>
		main_loop_task();
    1f3c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <main_loop_task>
		//_delay_ms(5); 
		
	}
    1f40:	f3 cf       	rjmp	.-26     	; 0x1f28 <main+0x2a>

00001f42 <usart_init>:
#include "header.h"

//basic polling usart

void usart_init(uint32_t baudrate)
{
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	9b 01       	movw	r18, r22
    1f48:	ac 01       	movw	r20, r24
	LINCR |= (1<<LSWRES);
    1f4a:	c8 ec       	ldi	r28, 0xC8	; 200
    1f4c:	d0 e0       	ldi	r29, 0x00	; 0
    1f4e:	88 81       	ld	r24, Y
    1f50:	80 68       	ori	r24, 0x80	; 128
    1f52:	88 83       	st	Y, r24
	LINBRR = (((F_CPU/baudrate)/32)-1);
    1f54:	60 e2       	ldi	r22, 0x20	; 32
    1f56:	71 ea       	ldi	r23, 0xA1	; 161
    1f58:	87 e0       	ldi	r24, 0x07	; 7
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__udivmodsi4>
    1f60:	21 50       	subi	r18, 0x01	; 1
    1f62:	31 09       	sbc	r19, r1
    1f64:	30 93 ce 00 	sts	0x00CE, r19
    1f68:	20 93 cd 00 	sts	0x00CD, r18
	LINCR |= (1<<LENA)|(1<<LCMD2)|(1<<LCMD1)|(1<<LCMD0);
    1f6c:	88 81       	ld	r24, Y
    1f6e:	8f 60       	ori	r24, 0x0F	; 15
    1f70:	88 83       	st	Y, r24
	DDRD  |=  (1<<PORTD3);      // output UART_TX Pin 2
    1f72:	53 9a       	sbi	0x0a, 3	; 10
	DDRD  &= ~(1<<PORTD4);       // input UART_RX Pin 12
    1f74:	54 98       	cbi	0x0a, 4	; 10
}
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	08 95       	ret

00001f7c <usart_transmit_char>:


uint8_t usart_transmit_char(uint8_t byte)
{
	if (!(LINSIR & (1 << LBUSY)))				//check: UART not busy?
    1f7c:	90 91 c9 00 	lds	r25, 0x00C9
    1f80:	94 fd       	sbrc	r25, 4
    1f82:	04 c0       	rjmp	.+8      	; 0x1f8c <usart_transmit_char+0x10>
	{
		LINDAT = byte;
    1f84:	80 93 d2 00 	sts	0x00D2, r24
		return 1;	
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	08 95       	ret
	}
	else
	{
		return 0;
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1f8e:	08 95       	ret

00001f90 <usart_transmit_string>:

void usart_transmit_string(char *string) //waits for transmission, slow! faster version -> use usart_interrupt
{
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	ec 01       	movw	r28, r24
	while (*string)
    1f96:	88 81       	ld	r24, Y
    1f98:	88 23       	and	r24, r24
    1f9a:	49 f0       	breq	.+18     	; 0x1fae <usart_transmit_string+0x1e>
	{
		while (!(usart_transmit_char(*string)));
    1f9c:	88 81       	ld	r24, Y
    1f9e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    1fa2:	88 23       	and	r24, r24
    1fa4:	d9 f3       	breq	.-10     	; 0x1f9c <usart_transmit_string+0xc>
		string++;
    1fa6:	21 96       	adiw	r28, 0x01	; 1
	}
}

void usart_transmit_string(char *string) //waits for transmission, slow! faster version -> use usart_interrupt
{
	while (*string)
    1fa8:	88 81       	ld	r24, Y
    1faa:	81 11       	cpse	r24, r1
    1fac:	f7 cf       	rjmp	.-18     	; 0x1f9c <usart_transmit_string+0xc>
	{
		while (!(usart_transmit_char(*string)));
		string++;
	}
}
    1fae:	df 91       	pop	r29
    1fb0:	cf 91       	pop	r28
    1fb2:	08 95       	ret

00001fb4 <usart_receive>:



uint8_t usart_receive(char *receive_buffer) //abgeaendert
{
    1fb4:	fc 01       	movw	r30, r24
	if (LINSIR & (1 << LRXOK))				//check: new data received?
    1fb6:	90 91 c9 00 	lds	r25, 0x00C9
    1fba:	89 2f       	mov	r24, r25
    1fbc:	81 70       	andi	r24, 0x01	; 1
    1fbe:	90 ff       	sbrs	r25, 0
    1fc0:	04 c0       	rjmp	.+8      	; 0x1fca <usart_receive+0x16>
	{          
		*receive_buffer = LINDAT;
    1fc2:	80 91 d2 00 	lds	r24, 0x00D2
    1fc6:	80 83       	st	Z, r24
		return 1;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return 0;
	}
}
    1fca:	08 95       	ret

00001fcc <__vector_20>:
		return 1;
	}
}

ISR(LIN_TC_vect)
{
    1fcc:	1f 92       	push	r1
    1fce:	0f 92       	push	r0
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	0f 92       	push	r0
    1fd4:	11 24       	eor	r1, r1
    1fd6:	2f 93       	push	r18
    1fd8:	8f 93       	push	r24
    1fda:	9f 93       	push	r25
    1fdc:	ef 93       	push	r30
    1fde:	ff 93       	push	r31
    if ((LINSIR & (1<<LRXOK))) //receive interrupt?
    1fe0:	80 91 c9 00 	lds	r24, 0x00C9
    1fe4:	80 ff       	sbrs	r24, 0
    1fe6:	19 c0       	rjmp	.+50     	; 0x201a <__vector_20+0x4e>
	{
		*rx_write_pointer = LINDAT;	//empfangenes Datenbyte abspeichern
    1fe8:	e0 91 72 07 	lds	r30, 0x0772
    1fec:	f0 91 73 07 	lds	r31, 0x0773
    1ff0:	80 91 d2 00 	lds	r24, 0x00D2
    1ff4:	80 83       	st	Z, r24
		rx_write_pointer++;
    1ff6:	80 91 72 07 	lds	r24, 0x0772
    1ffa:	90 91 73 07 	lds	r25, 0x0773
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	90 93 73 07 	sts	0x0773, r25
    2004:	80 93 72 07 	sts	0x0772, r24
		if (rx_write_pointer == (rx_buffer + USART_RECEIVE_BUFFER_SIZE)) rx_write_pointer = rx_buffer;
    2008:	86 58       	subi	r24, 0x86	; 134
    200a:	97 40       	sbci	r25, 0x07	; 7
    200c:	31 f4       	brne	.+12     	; 0x201a <__vector_20+0x4e>
    200e:	86 e7       	ldi	r24, 0x76	; 118
    2010:	97 e0       	ldi	r25, 0x07	; 7
    2012:	90 93 73 07 	sts	0x0773, r25
    2016:	80 93 72 07 	sts	0x0772, r24
	}
	
	if((LINSIR & (1<<LTXOK))) //transmit interrupt?
    201a:	80 91 c9 00 	lds	r24, 0x00C9
    201e:	81 ff       	sbrs	r24, 1
    2020:	21 c0       	rjmp	.+66     	; 0x2064 <__vector_20+0x98>
	{
		/* Wenn nicht das Ende der Zeichenkette erreicht wurde,
		   dann weiteres Zeichen senden */
		if ( *tx_read_pointer != '\0' ) {
    2022:	e0 91 74 07 	lds	r30, 0x0774
    2026:	f0 91 75 07 	lds	r31, 0x0775
    202a:	80 81       	ld	r24, Z
    202c:	88 23       	and	r24, r24
    202e:	69 f0       	breq	.+26     	; 0x204a <__vector_20+0x7e>
			LINDAT = *tx_read_pointer;
    2030:	80 81       	ld	r24, Z
    2032:	80 93 d2 00 	sts	0x00D2, r24
			tx_read_pointer++;
    2036:	80 91 74 07 	lds	r24, 0x0774
    203a:	90 91 75 07 	lds	r25, 0x0775
    203e:	01 96       	adiw	r24, 0x01	; 1
    2040:	90 93 75 07 	sts	0x0775, r25
    2044:	80 93 74 07 	sts	0x0774, r24
    2048:	0d c0       	rjmp	.+26     	; 0x2064 <__vector_20+0x98>
		}
		else
		{
			// Flag setzen, das der String gesendet wurde
			usart_tx_complete = 1;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	80 93 05 01 	sts	0x0105, r24

			// Interrupt deaktivieren
			LINENIR &= ~(1<<LENTXOK);
    2050:	ea ec       	ldi	r30, 0xCA	; 202
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	8d 7f       	andi	r24, 0xFD	; 253
    2058:	80 83       	st	Z, r24
			LINSIR |= (1<<LTXOK);
    205a:	e9 ec       	ldi	r30, 0xC9	; 201
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	82 60       	ori	r24, 0x02	; 2
    2062:	80 83       	st	Z, r24
		}
	}
    2064:	ff 91       	pop	r31
    2066:	ef 91       	pop	r30
    2068:	9f 91       	pop	r25
    206a:	8f 91       	pop	r24
    206c:	2f 91       	pop	r18
    206e:	0f 90       	pop	r0
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	0f 90       	pop	r0
    2074:	1f 90       	pop	r1
    2076:	18 95       	reti

00002078 <main_init_task>:

// *** Initialisierung der Schnittstellen **************************************************
void main_init_task()
{

	LM95071_init();
    2078:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <LM95071_init>
	digital_output_init(SPI_CS_LTC6804_PIN);				//Init des SPI-CS-Outputs
    207c:	8c e6       	ldi	r24, 0x6C	; 108
    207e:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <digital_output_init>
	SPI_CS_LTC6804_HIGH;
    2082:	41 9a       	sbi	0x08, 1	; 8
	digital_output_init(S_Box_active_PIN);					//Init des SBox-Pins
    2084:	83 ed       	ldi	r24, 0xD3	; 211
    2086:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <digital_output_init>
	S_Box_NOT_active;
    208a:	72 98       	cbi	0x0e, 2	; 14
	usart_init(115200);										//Init UART für RS232-Schnittstelle mit Baudrate
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	72 ec       	ldi	r23, 0xC2	; 194
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <usart_init>
	can_init(500);											//Init CAN Bus mit 500kbps (moeglich 1Mbps, 500kbps, 250kbps, 125kbps)
    2098:	84 ef       	ldi	r24, 0xF4	; 244
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	0e 94 bf 0b 	call	0x177e	; 0x177e <can_init>
	adc_init();												//Init Moertl-Boeard-ADC
    20a0:	0e 94 cc 00 	call	0x198	; 0x198 <adc_init>
	adc_background_read_init(ADC_IN_AN3 | ADC_IN_AN4);		//Init des AN3 Ref-Pin. AN4 Stromwert
    20a4:	88 e2       	ldi	r24, 0x28	; 40
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <adc_background_read_init>
	spi_init_master(16);									//Prescaler 32 -> 0.5MHz spi clock @ 16MHz CPU clock
    20ac:	80 e1       	ldi	r24, 0x10	; 16
    20ae:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <spi_init_master>
	SPCR |= (1 << CPOL) | (1 << CPHA);
    20b2:	8c b5       	in	r24, 0x2c	; 44
    20b4:	8c 60       	ori	r24, 0x0C	; 12
    20b6:	8c bd       	out	0x2c, r24	; 44
	bmschip_init(UNDERVOLT, OVERVOLT);						
    20b8:	60 e1       	ldi	r22, 0x10	; 16
    20ba:	74 ea       	ldi	r23, 0xA4	; 164
    20bc:	88 ea       	ldi	r24, 0xA8	; 168
    20be:	91 e6       	ldi	r25, 0x61	; 97
    20c0:	0e 94 10 04 	call	0x820	; 0x820 <bmschip_init>

	//Nach Initialisierung -> Freigabe an ARM
	Init_flag = 1;
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	80 93 0e 07 	sts	0x070E, r24
	CAN_SCHEDULE_MESSAGE0;
    20ca:	80 91 4b 07 	lds	r24, 0x074B
    20ce:	81 60       	ori	r24, 0x01	; 1
    20d0:	80 93 4b 07 	sts	0x074B, r24
	
	usart_transmit_string("\f");
    20d4:	8d e2       	ldi	r24, 0x2D	; 45
    20d6:	93 e0       	ldi	r25, 0x03	; 3
    20d8:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	usart_transmit_string("AVR-Initialisierung erfolgreich!\r\n");	
    20dc:	8f e2       	ldi	r24, 0x2F	; 47
    20de:	93 e0       	ldi	r25, 0x03	; 3
    20e0:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	usart_transmit_string("Warte auf Test-Freigabe!");	
    20e4:	82 e5       	ldi	r24, 0x52	; 82
    20e6:	93 e0       	ldi	r25, 0x03	; 3
    20e8:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
    20ec:	08 95       	ret

000020ee <freigabe_task>:
}
// *****************************************************************************************

// *** Test des Systems ********************************************************************
uint8_t freigabe_task()
{
    20ee:	cf 92       	push	r12
    20f0:	df 92       	push	r13
    20f2:	ef 92       	push	r14
    20f4:	ff 92       	push	r15
    20f6:	0f 93       	push	r16
    20f8:	1f 93       	push	r17
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
	uint8_t i, i1, ret = 0;
	uint32_t wait_milli;

	//Anzahl der Slave-Boards bestimmen
	if(Init_flag == 1 && Test_flag == 1 && Freigabe_flag == 0)
    20fe:	80 91 0e 07 	lds	r24, 0x070E
    2102:	81 30       	cpi	r24, 0x01	; 1
    2104:	09 f0       	breq	.+2      	; 0x2108 <freigabe_task+0x1a>
    2106:	ca c0       	rjmp	.+404    	; 0x229c <freigabe_task+0x1ae>
    2108:	80 91 0d 07 	lds	r24, 0x070D
    210c:	81 30       	cpi	r24, 0x01	; 1
    210e:	09 f0       	breq	.+2      	; 0x2112 <freigabe_task+0x24>
    2110:	c5 c0       	rjmp	.+394    	; 0x229c <freigabe_task+0x1ae>
    2112:	80 91 0c 07 	lds	r24, 0x070C
    2116:	81 11       	cpse	r24, r1
    2118:	c1 c0       	rjmp	.+386    	; 0x229c <freigabe_task+0x1ae>
	{
		slave_boards = slave;
    211a:	80 91 0b 07 	lds	r24, 0x070B
    211e:	80 93 26 07 	sts	0x0726, r24
		i1 = 0;
	
		for(i=1; i<6;i++)
    2122:	d1 e0       	ldi	r29, 0x01	; 1
				//Wenn Stromsensor angeschlossen:
				//bms.cur.cur_flag = 0x00;
				//bmschip_read_IntADC(&bms.cur.V_cur, &bms.cur.V_reference);
				//bms.cur.cur_transmit = evaluate_Current(bms.cur.V_cur, bms.cur.V_reference, &bms.cur.cur_flag, curDirect);
				//Wenn Stromsensor nicht angeschlossen:
				bms.cur.cur_transmit = 0;
    2124:	0f 2e       	mov	r0, r31
    2126:	f8 e5       	ldi	r31, 0x58	; 88
    2128:	ef 2e       	mov	r14, r31
    212a:	f9 e0       	ldi	r31, 0x09	; 9
    212c:	ff 2e       	mov	r15, r31
    212e:	f0 2d       	mov	r31, r0
					CAN_SCHEDULE_MESSAGE0;
					SET_FALSE(flagOverVol);
					Test_flag = 0;
					break;							
				}
				else if(bms.temp.temp_max>=OVERTEMP)
    2130:	0f 2e       	mov	r0, r31
    2132:	f5 e2       	ldi	r31, 0x25	; 37
    2134:	cf 2e       	mov	r12, r31
    2136:	fa e0       	ldi	r31, 0x0A	; 10
    2138:	df 2e       	mov	r13, r31
    213a:	f0 2d       	mov	r31, r0
		slave_boards = slave;
		i1 = 0;
	
		for(i=1; i<6;i++)
		{
			usart_transmit_string("\r\n Test ");
    213c:	8b e6       	ldi	r24, 0x6B	; 107
    213e:	93 e0       	ldi	r25, 0x03	; 3
    2140:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
			while(!(usart_transmit_char(48+i)));
    2144:	c0 e3       	ldi	r28, 0x30	; 48
    2146:	cd 0f       	add	r28, r29
    2148:	8c 2f       	mov	r24, r28
    214a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    214e:	88 23       	and	r24, r24
    2150:	d9 f3       	breq	.-10     	; 0x2148 <freigabe_task+0x5a>
			if(bmschip_getVoltages(bms.volt.val) == 1)
    2152:	8d ec       	ldi	r24, 0xCD	; 205
    2154:	97 e0       	ldi	r25, 0x07	; 7
    2156:	0e 94 ae 04 	call	0x95c	; 0x95c <bmschip_getVoltages>
    215a:	81 30       	cpi	r24, 0x01	; 1
    215c:	a9 f4       	brne	.+42     	; 0x2188 <freigabe_task+0x9a>
			{
				
				usart_transmit_string("\r\n Fehler: Kommunikation!");
    215e:	84 e7       	ldi	r24, 0x74	; 116
    2160:	93 e0       	ldi	r25, 0x03	; 3
    2162:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
				usart_transmit_string("\r\n Test erneut starten!\r\n");	
    2166:	8e e8       	ldi	r24, 0x8E	; 142
    2168:	93 e0       	ldi	r25, 0x03	; 3
    216a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
				SET_TRUE(flagCommunication);
    216e:	eb ec       	ldi	r30, 0xCB	; 203
    2170:	f7 e0       	ldi	r31, 0x07	; 7
    2172:	80 81       	ld	r24, Z
				CAN_SCHEDULE_MESSAGE0;		
    2174:	90 91 4b 07 	lds	r25, 0x074B
    2178:	91 60       	ori	r25, 0x01	; 1
    217a:	90 93 4b 07 	sts	0x074B, r25
				SET_FALSE(flagCommunication);
    217e:	8f 7e       	andi	r24, 0xEF	; 239
    2180:	80 83       	st	Z, r24
				Test_flag = 0;
    2182:	10 92 0d 07 	sts	0x070D, r1
				break;
    2186:	75 c0       	rjmp	.+234    	; 0x2272 <freigabe_task+0x184>
			}
			else
			{
				bmschip_evaluate(bms.volt.val, &bms.volt.max, &bms.volt.min,  &bms.volt.avg, &bms.volt.NumOfCells);
    2188:	03 e5       	ldi	r16, 0x53	; 83
    218a:	19 e0       	ldi	r17, 0x09	; 9
    218c:	21 e5       	ldi	r18, 0x51	; 81
    218e:	39 e0       	ldi	r19, 0x09	; 9
    2190:	4f e4       	ldi	r20, 0x4F	; 79
    2192:	59 e0       	ldi	r21, 0x09	; 9
    2194:	6d e4       	ldi	r22, 0x4D	; 77
    2196:	79 e0       	ldi	r23, 0x09	; 9
    2198:	8d ec       	ldi	r24, 0xCD	; 205
    219a:	97 e0       	ldi	r25, 0x07	; 7
    219c:	0e 94 8f 09 	call	0x131e	; 0x131e <bmschip_evaluate>
				bmschip_getTemperature(3);
    21a0:	83 e0       	ldi	r24, 0x03	; 3
    21a2:	0e 94 83 06 	call	0xd06	; 0xd06 <bmschip_getTemperature>
				//Wenn Stromsensor angeschlossen:
				//bms.cur.cur_flag = 0x00;
				//bmschip_read_IntADC(&bms.cur.V_cur, &bms.cur.V_reference);
				//bms.cur.cur_transmit = evaluate_Current(bms.cur.V_cur, bms.cur.V_reference, &bms.cur.cur_flag, curDirect);
				//Wenn Stromsensor nicht angeschlossen:
				bms.cur.cur_transmit = 0;
    21a6:	f7 01       	movw	r30, r14
    21a8:	10 82       	st	Z, r1
    21aa:	11 82       	std	Z+1, r1	; 0x01
    21ac:	12 82       	std	Z+2, r1	; 0x02
    21ae:	13 82       	std	Z+3, r1	; 0x03
// ********************************************************************************************************************************************************************************************************************************	
					
				if(bms.volt.min<=UNDERVOLT)
    21b0:	80 91 4f 09 	lds	r24, 0x094F
    21b4:	90 91 50 09 	lds	r25, 0x0950
    21b8:	89 3a       	cpi	r24, 0xA9	; 169
    21ba:	91 46       	sbci	r25, 0x61	; 97
    21bc:	a8 f4       	brcc	.+42     	; 0x21e8 <freigabe_task+0xfa>
				{
					usart_transmit_string("\r\n Fehler: Undervoltage!");
    21be:	88 ea       	ldi	r24, 0xA8	; 168
    21c0:	93 e0       	ldi	r25, 0x03	; 3
    21c2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
					usart_transmit_string("\r\n Test erneut starten!\r\n");		
    21c6:	8e e8       	ldi	r24, 0x8E	; 142
    21c8:	93 e0       	ldi	r25, 0x03	; 3
    21ca:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
					SET_TRUE(flagUnderVol);
    21ce:	eb ec       	ldi	r30, 0xCB	; 203
    21d0:	f7 e0       	ldi	r31, 0x07	; 7
    21d2:	80 81       	ld	r24, Z
					CAN_SCHEDULE_MESSAGE0;
    21d4:	90 91 4b 07 	lds	r25, 0x074B
    21d8:	91 60       	ori	r25, 0x01	; 1
    21da:	90 93 4b 07 	sts	0x074B, r25
					SET_FALSE(flagUnderVol);				
    21de:	8b 7f       	andi	r24, 0xFB	; 251
    21e0:	80 83       	st	Z, r24
					Test_flag = 0;
    21e2:	10 92 0d 07 	sts	0x070D, r1
					break;		
    21e6:	45 c0       	rjmp	.+138    	; 0x2272 <freigabe_task+0x184>
				}
				else if(bms.volt.max>=OVERVOLT)
    21e8:	80 91 4d 09 	lds	r24, 0x094D
    21ec:	90 91 4e 09 	lds	r25, 0x094E
    21f0:	80 31       	cpi	r24, 0x10	; 16
    21f2:	94 4a       	sbci	r25, 0xA4	; 164
    21f4:	a8 f0       	brcs	.+42     	; 0x2220 <freigabe_task+0x132>
				{
					usart_transmit_string("\r\n Fehler: Overvoltage!");
    21f6:	81 ec       	ldi	r24, 0xC1	; 193
    21f8:	93 e0       	ldi	r25, 0x03	; 3
    21fa:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
					usart_transmit_string("\r\n Test erneut starten!\r\n");										
    21fe:	8e e8       	ldi	r24, 0x8E	; 142
    2200:	93 e0       	ldi	r25, 0x03	; 3
    2202:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
					SET_TRUE(flagOverVol);
    2206:	eb ec       	ldi	r30, 0xCB	; 203
    2208:	f7 e0       	ldi	r31, 0x07	; 7
    220a:	80 81       	ld	r24, Z
					CAN_SCHEDULE_MESSAGE0;
    220c:	90 91 4b 07 	lds	r25, 0x074B
    2210:	91 60       	ori	r25, 0x01	; 1
    2212:	90 93 4b 07 	sts	0x074B, r25
					SET_FALSE(flagOverVol);
    2216:	8d 7f       	andi	r24, 0xFD	; 253
    2218:	80 83       	st	Z, r24
					Test_flag = 0;
    221a:	10 92 0d 07 	sts	0x070D, r1
					break;							
    221e:	29 c0       	rjmp	.+82     	; 0x2272 <freigabe_task+0x184>
				}
				else if(bms.temp.temp_max>=OVERTEMP)
    2220:	f6 01       	movw	r30, r12
    2222:	80 81       	ld	r24, Z
    2224:	91 81       	ldd	r25, Z+1	; 0x01
    2226:	a2 81       	ldd	r26, Z+2	; 0x02
    2228:	b3 81       	ldd	r27, Z+3	; 0x03
    222a:	80 37       	cpi	r24, 0x70	; 112
    222c:	97 41       	sbci	r25, 0x17	; 23
    222e:	a1 05       	cpc	r26, r1
    2230:	b1 05       	cpc	r27, r1
    2232:	ac f0       	brlt	.+42     	; 0x225e <freigabe_task+0x170>
				{
					usart_transmit_string("\r\n Fehler: Overtemperature!");
    2234:	89 ed       	ldi	r24, 0xD9	; 217
    2236:	93 e0       	ldi	r25, 0x03	; 3
    2238:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
					usart_transmit_string("\r\n Test erneut starten!\r\n");					
    223c:	8e e8       	ldi	r24, 0x8E	; 142
    223e:	93 e0       	ldi	r25, 0x03	; 3
    2240:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
					SET_TRUE(flagOverTemp);
    2244:	eb ec       	ldi	r30, 0xCB	; 203
    2246:	f7 e0       	ldi	r31, 0x07	; 7
    2248:	80 81       	ld	r24, Z
					CAN_SCHEDULE_MESSAGE0;
    224a:	90 91 4b 07 	lds	r25, 0x074B
    224e:	91 60       	ori	r25, 0x01	; 1
    2250:	90 93 4b 07 	sts	0x074B, r25
					SET_FALSE(flagOverTemp);
    2254:	87 7f       	andi	r24, 0xF7	; 247
    2256:	80 83       	st	Z, r24
					Test_flag = 0;
    2258:	10 92 0d 07 	sts	0x070D, r1
					break;		
    225c:	0a c0       	rjmp	.+20     	; 0x2272 <freigabe_task+0x184>
				else
				{
					i1++;
				}
				
				if(i1 == 5)
    225e:	d5 30       	cpi	r29, 0x05	; 5
    2260:	21 f4       	brne	.+8      	; 0x226a <freigabe_task+0x17c>
				{
					Freigabe_flag = 1;
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	80 93 0c 07 	sts	0x070C, r24
    2268:	04 c0       	rjmp	.+8      	; 0x2272 <freigabe_task+0x184>
	if(Init_flag == 1 && Test_flag == 1 && Freigabe_flag == 0)
	{
		slave_boards = slave;
		i1 = 0;
	
		for(i=1; i<6;i++)
    226a:	df 5f       	subi	r29, 0xFF	; 255
    226c:	d6 30       	cpi	r29, 0x06	; 6
    226e:	09 f0       	breq	.+2      	; 0x2272 <freigabe_task+0x184>
    2270:	65 cf       	rjmp	.-310    	; 0x213c <freigabe_task+0x4e>
					Freigabe_flag = 1;
				}
			}
		}
		
		if(Freigabe_flag == 1)
    2272:	80 91 0c 07 	lds	r24, 0x070C
    2276:	81 30       	cpi	r24, 0x01	; 1
    2278:	01 f5       	brne	.+64     	; 0x22ba <freigabe_task+0x1cc>
		{
			usart_transmit_string("\r\n\n Test-Durchlauf erfolgreich!");
    227a:	85 ef       	ldi	r24, 0xF5	; 245
    227c:	93 e0       	ldi	r25, 0x03	; 3
    227e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
			usart_transmit_string("\r\n Warte auf endgueltige Freigabe!");
    2282:	85 e1       	ldi	r24, 0x15	; 21
    2284:	94 e0       	ldi	r25, 0x04	; 4
    2286:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
			Test_flag = 0;
    228a:	10 92 0d 07 	sts	0x070D, r1
			CAN_SCHEDULE_MESSAGE0;			
    228e:	80 91 4b 07 	lds	r24, 0x074B
    2292:	81 60       	ori	r24, 0x01	; 1
    2294:	80 93 4b 07 	sts	0x074B, r24
// *****************************************************************************************

// *** Test des Systems ********************************************************************
uint8_t freigabe_task()
{
	uint8_t i, i1, ret = 0;
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	16 c0       	rjmp	.+44     	; 0x22c8 <freigabe_task+0x1da>
			usart_transmit_string("\r\n Warte auf endgueltige Freigabe!");
			Test_flag = 0;
			CAN_SCHEDULE_MESSAGE0;			
		}
	}
	else if (STM_flag == 1 && Freigabe_flag == 1 && Test_flag == 0)
    229c:	80 91 0f 07 	lds	r24, 0x070F
    22a0:	81 30       	cpi	r24, 0x01	; 1
    22a2:	69 f4       	brne	.+26     	; 0x22be <freigabe_task+0x1d0>
    22a4:	80 91 0c 07 	lds	r24, 0x070C
    22a8:	81 30       	cpi	r24, 0x01	; 1
    22aa:	59 f4       	brne	.+22     	; 0x22c2 <freigabe_task+0x1d4>
    22ac:	80 91 0d 07 	lds	r24, 0x070D
    22b0:	81 11       	cpse	r24, r1
    22b2:	09 c0       	rjmp	.+18     	; 0x22c6 <freigabe_task+0x1d8>
	{
		S_Box_active;
    22b4:	72 9a       	sbi	0x0e, 2	; 14
		ret = 1;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	07 c0       	rjmp	.+14     	; 0x22c8 <freigabe_task+0x1da>
// *****************************************************************************************

// *** Test des Systems ********************************************************************
uint8_t freigabe_task()
{
	uint8_t i, i1, ret = 0;
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	05 c0       	rjmp	.+10     	; 0x22c8 <freigabe_task+0x1da>
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	03 c0       	rjmp	.+6      	; 0x22c8 <freigabe_task+0x1da>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	01 c0       	rjmp	.+2      	; 0x22c8 <freigabe_task+0x1da>
    22c6:	80 e0       	ldi	r24, 0x00	; 0
	{
		S_Box_active;
		ret = 1;
	}
	return(ret);
}
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
    22d0:	ff 90       	pop	r15
    22d2:	ef 90       	pop	r14
    22d4:	df 90       	pop	r13
    22d6:	cf 90       	pop	r12
    22d8:	08 95       	ret

000022da <timer_1ms_task>:
// *****************************************************************************************

void timer_1ms_task()	//1 kHz
{
    22da:	08 95       	ret

000022dc <timer_5ms_task>:
	
	//----------------
}

void timer_5ms_task()	//200 Hz
{
    22dc:	08 95       	ret

000022de <timer_10ms_task>:
	
	//----------------
}

void timer_10ms_task()	//100 Hz
{
    22de:	08 95       	ret

000022e0 <timer_50ms_task>:

void timer_50ms_task()	//20 Hz
{

// *** Balancing ***************************************************************************
if(usart_receive(&eingabe))
    22e0:	8f e2       	ldi	r24, 0x2F	; 47
    22e2:	9a e0       	ldi	r25, 0x0A	; 10
    22e4:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <usart_receive>
    22e8:	88 23       	and	r24, r24
    22ea:	a1 f0       	breq	.+40     	; 0x2314 <timer_50ms_task+0x34>
{
	switch (eingabe)
    22ec:	80 91 2f 0a 	lds	r24, 0x0A2F
    22f0:	80 33       	cpi	r24, 0x30	; 48
    22f2:	19 f0       	breq	.+6      	; 0x22fa <timer_50ms_task+0x1a>
    22f4:	81 33       	cpi	r24, 0x31	; 49
    22f6:	49 f0       	breq	.+18     	; 0x230a <timer_50ms_task+0x2a>
    22f8:	0d c0       	rjmp	.+26     	; 0x2314 <timer_50ms_task+0x34>
	{
		case 48:	SET_FALSE(flagBalActiv);
    22fa:	eb ec       	ldi	r30, 0xCB	; 203
    22fc:	f7 e0       	ldi	r31, 0x07	; 7
    22fe:	80 81       	ld	r24, Z
    2300:	8f 7b       	andi	r24, 0xBF	; 191
    2302:	80 83       	st	Z, r24
		bmschip_writeConfig();
    2304:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <bmschip_writeConfig>
		break;
    2308:	05 c0       	rjmp	.+10     	; 0x2314 <timer_50ms_task+0x34>
		case 49:	SET_TRUE(flagBalActiv);
    230a:	eb ec       	ldi	r30, 0xCB	; 203
    230c:	f7 e0       	ldi	r31, 0x07	; 7
    230e:	80 81       	ld	r24, Z
    2310:	80 64       	ori	r24, 0x40	; 64
    2312:	80 83       	st	Z, r24
		break;
		default:	break;
	}
}

if(IS_FALSE(flagBalActiv)) mode = 48;		//Ausgabe: 0
    2314:	80 91 cb 07 	lds	r24, 0x07CB
    2318:	86 fd       	sbrc	r24, 6
    231a:	33 c1       	rjmp	.+614    	; 0x2582 <timer_50ms_task+0x2a2>
    231c:	80 e3       	ldi	r24, 0x30	; 48
    231e:	80 93 06 01 	sts	0x0106, r24
if(IS_TRUE(flagBalActiv)) mode = 49;		//Ausgabe: 1

//Balancing empfohlen?
Rec = bmschip_recommendBalancing(bms.volt.val, bms.volt.min, bms.balancing.undervoltage, bms.balancing.RecCells);
    2322:	40 91 a1 09 	lds	r20, 0x09A1
    2326:	50 91 a2 09 	lds	r21, 0x09A2
    232a:	60 91 4f 09 	lds	r22, 0x094F
    232e:	70 91 50 09 	lds	r23, 0x0950
    2332:	2d e7       	ldi	r18, 0x7D	; 125
    2334:	39 e0       	ldi	r19, 0x09	; 9
    2336:	8d ec       	ldi	r24, 0xCD	; 205
    2338:	97 e0       	ldi	r25, 0x07	; 7
    233a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <bmschip_recommendBalancing>
    233e:	80 93 03 07 	sts	0x0703, r24

//Balancing erlaubt?
if(IS_TRUE(flagBalActiv))
    2342:	80 91 cb 07 	lds	r24, 0x07CB
    2346:	86 ff       	sbrs	r24, 6
    2348:	14 c0       	rjmp	.+40     	; 0x2372 <timer_50ms_task+0x92>
{
	bmschip_checkBalancing(bms.volt.val, bms.volt.min, bms.balancing.undervoltage, bms.balancing.cells);
    234a:	40 91 a1 09 	lds	r20, 0x09A1
    234e:	50 91 a2 09 	lds	r21, 0x09A2
    2352:	60 91 4f 09 	lds	r22, 0x094F
    2356:	70 91 50 09 	lds	r23, 0x0950
    235a:	2d e5       	ldi	r18, 0x5D	; 93
    235c:	39 e0       	ldi	r19, 0x09	; 9
    235e:	8d ec       	ldi	r24, 0xCD	; 205
    2360:	97 e0       	ldi	r25, 0x07	; 7
    2362:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <bmschip_checkBalancing>
	bmschip_writeConfig();
    2366:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <bmschip_writeConfig>
}

if(IS_FALSE(flagBalActiv))
    236a:	80 91 cb 07 	lds	r24, 0x07CB
    236e:	86 fd       	sbrc	r24, 6
    2370:	12 c0       	rjmp	.+36     	; 0x2396 <timer_50ms_task+0xb6>
{
	bmschip_writeConfig();
    2372:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <bmschip_writeConfig>
	for(i=0;i<slave_boards;i++)
    2376:	10 92 2d 0a 	sts	0x0A2D, r1
    237a:	90 91 26 07 	lds	r25, 0x0726
    237e:	99 23       	and	r25, r25
    2380:	51 f0       	breq	.+20     	; 0x2396 <timer_50ms_task+0xb6>
    2382:	ed e5       	ldi	r30, 0x5D	; 93
    2384:	f9 e0       	ldi	r31, 0x09	; 9
    2386:	80 e0       	ldi	r24, 0x00	; 0
	{
		bms.balancing.cells[i] = 0x0000;
    2388:	11 92       	st	Z+, r1
    238a:	11 92       	st	Z+, r1
}

if(IS_FALSE(flagBalActiv))
{
	bmschip_writeConfig();
	for(i=0;i<slave_boards;i++)
    238c:	8f 5f       	subi	r24, 0xFF	; 255
    238e:	89 17       	cp	r24, r25
    2390:	d8 f3       	brcs	.-10     	; 0x2388 <timer_50ms_task+0xa8>
    2392:	80 93 2d 0a 	sts	0x0A2D, r24
	}
}
// *****************************************************************************************

// *** Strommessung ************************************************************************
bms.cur.cur_flag = 0x00;
    2396:	10 92 5c 09 	sts	0x095C, r1
// ********************************************************************************************************************************************************************************************************************************
//Wenn Strommessung angeschlossen:
//bmschip_read_IntADC(&bms.cur.V_cur, &bms.cur.V_reference);
//bms.cur.cur_transmit = evaluate_Current(bms.cur.V_cur, bms.cur.V_reference, &bms.cur.cur_flag, curDirect);
//Wenn Stromsensor nicht Angeschlossen:
bms.cur.cur_transmit = 0;
    239a:	10 92 58 09 	sts	0x0958, r1
    239e:	10 92 59 09 	sts	0x0959, r1
    23a2:	10 92 5a 09 	sts	0x095A, r1
    23a6:	10 92 5b 09 	sts	0x095B, r1
	SET_TRUE(flagOverCur);
}
// *****************************************************************************************

// *** Temperaturmessung *******************************************************************
bmschip_getTemperature(3);
    23aa:	83 e0       	ldi	r24, 0x03	; 3
    23ac:	0e 94 83 06 	call	0xd06	; 0xd06 <bmschip_getTemperature>
if(bms.temp.temp_max>=OVERTEMP)
    23b0:	80 91 25 0a 	lds	r24, 0x0A25
    23b4:	90 91 26 0a 	lds	r25, 0x0A26
    23b8:	a0 91 27 0a 	lds	r26, 0x0A27
    23bc:	b0 91 28 0a 	lds	r27, 0x0A28
    23c0:	80 37       	cpi	r24, 0x70	; 112
    23c2:	97 41       	sbci	r25, 0x17	; 23
    23c4:	a1 05       	cpc	r26, r1
    23c6:	b1 05       	cpc	r27, r1
    23c8:	2c f0       	brlt	.+10     	; 0x23d4 <timer_50ms_task+0xf4>
{
	SET_TRUE(flagOverTemp);
    23ca:	eb ec       	ldi	r30, 0xCB	; 203
    23cc:	f7 e0       	ldi	r31, 0x07	; 7
    23ce:	80 81       	ld	r24, Z
    23d0:	88 60       	ori	r24, 0x08	; 8
    23d2:	80 83       	st	Z, r24
}
// *****************************************************************************************

// *** S-Box Freigabe überprüfen ***********************************************************
if(STM_flag && !Test_flag)
    23d4:	80 91 0f 07 	lds	r24, 0x070F
    23d8:	88 23       	and	r24, r24
    23da:	09 f4       	brne	.+2      	; 0x23de <timer_50ms_task+0xfe>
    23dc:	c4 c0       	rjmp	.+392    	; 0x2566 <timer_50ms_task+0x286>
    23de:	80 91 0d 07 	lds	r24, 0x070D
    23e2:	81 11       	cpse	r24, r1
    23e4:	c3 c0       	rjmp	.+390    	; 0x256c <timer_50ms_task+0x28c>
{
	//S-Box-Timer inaktiv
	if(S_Box_Timer == 0)
    23e6:	80 91 09 07 	lds	r24, 0x0709
    23ea:	81 11       	cpse	r24, r1
    23ec:	ab c0       	rjmp	.+342    	; 0x2544 <timer_50ms_task+0x264>
	{
		//Erstmaliges Überschreiten Strom
		if((Overcur_Timer == 0) && (bms.bms_flag & flagOverCur))
    23ee:	80 91 08 07 	lds	r24, 0x0708
    23f2:	81 11       	cpse	r24, r1
    23f4:	08 c0       	rjmp	.+16     	; 0x2406 <timer_50ms_task+0x126>
    23f6:	80 91 cb 07 	lds	r24, 0x07CB
    23fa:	80 ff       	sbrs	r24, 0
    23fc:	1a c0       	rjmp	.+52     	; 0x2432 <timer_50ms_task+0x152>
		{
			Overcur_Timer = 1;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	80 93 08 07 	sts	0x0708, r24
    2404:	16 c0       	rjmp	.+44     	; 0x2432 <timer_50ms_task+0x152>
		}
		else if((Overcur_Timer > 0) && !(bms.bms_flag & flagOverCur))
    2406:	90 91 cb 07 	lds	r25, 0x07CB
    240a:	90 fd       	sbrc	r25, 0
    240c:	04 c0       	rjmp	.+8      	; 0x2416 <timer_50ms_task+0x136>
		{
			Overcur_Timer--;
    240e:	81 50       	subi	r24, 0x01	; 1
    2410:	80 93 08 07 	sts	0x0708, r24
    2414:	0e c0       	rjmp	.+28     	; 0x2432 <timer_50ms_task+0x152>
		}
		else if((Overcur_Timer > 0) && (bms.bms_flag & flagOverCur))
		{
			Overcur_Timer++;
    2416:	8f 5f       	subi	r24, 0xFF	; 255
			if (Overcur_Timer >= ENTPRELLUNG)
    2418:	84 30       	cpi	r24, 0x04	; 4
    241a:	18 f4       	brcc	.+6      	; 0x2422 <timer_50ms_task+0x142>
		{
			Overcur_Timer--;
		}
		else if((Overcur_Timer > 0) && (bms.bms_flag & flagOverCur))
		{
			Overcur_Timer++;
    241c:	80 93 08 07 	sts	0x0708, r24
    2420:	08 c0       	rjmp	.+16     	; 0x2432 <timer_50ms_task+0x152>
			if (Overcur_Timer >= ENTPRELLUNG)
			{
				Overcur_Timer = 0;
    2422:	10 92 08 07 	sts	0x0708, r1
				S_Box_Timer = 1;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	80 93 09 07 	sts	0x0709, r24
				SET_TRUE(flagCritical);
    242c:	90 62       	ori	r25, 0x20	; 32
    242e:	90 93 cb 07 	sts	0x07CB, r25
			}
		}

		//Erstmaliges Überschreiten Spannung
		if((Overvolt_Timer == 0) && (bms.bms_flag & flagOverVol))
    2432:	80 91 07 07 	lds	r24, 0x0707
    2436:	81 11       	cpse	r24, r1
    2438:	08 c0       	rjmp	.+16     	; 0x244a <timer_50ms_task+0x16a>
    243a:	80 91 cb 07 	lds	r24, 0x07CB
    243e:	81 ff       	sbrs	r24, 1
    2440:	1a c0       	rjmp	.+52     	; 0x2476 <timer_50ms_task+0x196>
		{
			Overvolt_Timer = 1;
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	80 93 07 07 	sts	0x0707, r24
    2448:	16 c0       	rjmp	.+44     	; 0x2476 <timer_50ms_task+0x196>
		}
		else if((Overvolt_Timer > 0) && !(bms.bms_flag & flagOverVol))
    244a:	90 91 cb 07 	lds	r25, 0x07CB
    244e:	91 fd       	sbrc	r25, 1
    2450:	04 c0       	rjmp	.+8      	; 0x245a <timer_50ms_task+0x17a>
		{
			Overvolt_Timer--;
    2452:	81 50       	subi	r24, 0x01	; 1
    2454:	80 93 07 07 	sts	0x0707, r24
    2458:	0e c0       	rjmp	.+28     	; 0x2476 <timer_50ms_task+0x196>
		}
		else if((Overvolt_Timer > 0) && (bms.bms_flag & flagOverVol))
		{
			Overvolt_Timer++;
    245a:	8f 5f       	subi	r24, 0xFF	; 255
			if (Overvolt_Timer >= ENTPRELLUNG)
    245c:	84 30       	cpi	r24, 0x04	; 4
    245e:	18 f4       	brcc	.+6      	; 0x2466 <timer_50ms_task+0x186>
		{
			Overvolt_Timer--;
		}
		else if((Overvolt_Timer > 0) && (bms.bms_flag & flagOverVol))
		{
			Overvolt_Timer++;
    2460:	80 93 07 07 	sts	0x0707, r24
    2464:	08 c0       	rjmp	.+16     	; 0x2476 <timer_50ms_task+0x196>
			if (Overvolt_Timer >= ENTPRELLUNG)
			{
				Overvolt_Timer = 0;
    2466:	10 92 07 07 	sts	0x0707, r1
				S_Box_Timer = 1;
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	80 93 09 07 	sts	0x0709, r24
				SET_TRUE(flagCritical);
    2470:	90 62       	ori	r25, 0x20	; 32
    2472:	90 93 cb 07 	sts	0x07CB, r25
			}
		}

		//Erstmaliges Unterschreiten Spannung
		if((Undervolt_Timer == 0) && (bms.bms_flag & flagUnderVol))
    2476:	80 91 06 07 	lds	r24, 0x0706
    247a:	81 11       	cpse	r24, r1
    247c:	08 c0       	rjmp	.+16     	; 0x248e <timer_50ms_task+0x1ae>
    247e:	80 91 cb 07 	lds	r24, 0x07CB
    2482:	82 ff       	sbrs	r24, 2
    2484:	1a c0       	rjmp	.+52     	; 0x24ba <timer_50ms_task+0x1da>
		{
			Undervolt_Timer = 1;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	80 93 06 07 	sts	0x0706, r24
    248c:	16 c0       	rjmp	.+44     	; 0x24ba <timer_50ms_task+0x1da>
		}
		else if((Undervolt_Timer > 0) && !(bms.bms_flag & flagUnderVol))
    248e:	90 91 cb 07 	lds	r25, 0x07CB
    2492:	92 fd       	sbrc	r25, 2
    2494:	04 c0       	rjmp	.+8      	; 0x249e <timer_50ms_task+0x1be>
		{
			Undervolt_Timer--;
    2496:	81 50       	subi	r24, 0x01	; 1
    2498:	80 93 06 07 	sts	0x0706, r24
    249c:	0e c0       	rjmp	.+28     	; 0x24ba <timer_50ms_task+0x1da>
		}
		else if((Undervolt_Timer > 0) && (bms.bms_flag & flagUnderVol))
		{
			Undervolt_Timer++;
    249e:	8f 5f       	subi	r24, 0xFF	; 255
			if (Undervolt_Timer >= ENTPRELLUNG)
    24a0:	84 30       	cpi	r24, 0x04	; 4
    24a2:	18 f4       	brcc	.+6      	; 0x24aa <timer_50ms_task+0x1ca>
		{
			Undervolt_Timer--;
		}
		else if((Undervolt_Timer > 0) && (bms.bms_flag & flagUnderVol))
		{
			Undervolt_Timer++;
    24a4:	80 93 06 07 	sts	0x0706, r24
    24a8:	08 c0       	rjmp	.+16     	; 0x24ba <timer_50ms_task+0x1da>
			if (Undervolt_Timer >= ENTPRELLUNG)
			{
				Undervolt_Timer = 0;
    24aa:	10 92 06 07 	sts	0x0706, r1
				S_Box_Timer = 1;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	80 93 09 07 	sts	0x0709, r24
				SET_TRUE(flagCritical);
    24b4:	90 62       	ori	r25, 0x20	; 32
    24b6:	90 93 cb 07 	sts	0x07CB, r25
			}
		}

		//Erstmaliges Überschreiten Temperatur
		if((Overtemp_Timer == 0) && (bms.bms_flag & flagOverTemp))
    24ba:	80 91 05 07 	lds	r24, 0x0705
    24be:	81 11       	cpse	r24, r1
    24c0:	08 c0       	rjmp	.+16     	; 0x24d2 <timer_50ms_task+0x1f2>
    24c2:	80 91 cb 07 	lds	r24, 0x07CB
    24c6:	83 ff       	sbrs	r24, 3
    24c8:	1a c0       	rjmp	.+52     	; 0x24fe <timer_50ms_task+0x21e>
		{
			Overtemp_Timer = 1;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	80 93 05 07 	sts	0x0705, r24
    24d0:	16 c0       	rjmp	.+44     	; 0x24fe <timer_50ms_task+0x21e>
		}
		else if((Overtemp_Timer > 0) && !(bms.bms_flag & flagOverTemp))
    24d2:	90 91 cb 07 	lds	r25, 0x07CB
    24d6:	93 fd       	sbrc	r25, 3
    24d8:	04 c0       	rjmp	.+8      	; 0x24e2 <timer_50ms_task+0x202>
		{
			Overtemp_Timer--;
    24da:	81 50       	subi	r24, 0x01	; 1
    24dc:	80 93 05 07 	sts	0x0705, r24
    24e0:	0e c0       	rjmp	.+28     	; 0x24fe <timer_50ms_task+0x21e>
		}
		else if((Overtemp_Timer > 0) && (bms.bms_flag & flagOverTemp))
		{
			Overtemp_Timer++;
    24e2:	8f 5f       	subi	r24, 0xFF	; 255
			if (Overtemp_Timer >= ENTPRELLUNG)
    24e4:	84 30       	cpi	r24, 0x04	; 4
    24e6:	18 f4       	brcc	.+6      	; 0x24ee <timer_50ms_task+0x20e>
		{
			Overtemp_Timer--;
		}
		else if((Overtemp_Timer > 0) && (bms.bms_flag & flagOverTemp))
		{
			Overtemp_Timer++;
    24e8:	80 93 05 07 	sts	0x0705, r24
    24ec:	08 c0       	rjmp	.+16     	; 0x24fe <timer_50ms_task+0x21e>
			if (Overtemp_Timer >= ENTPRELLUNG)
			{
				Overtemp_Timer = 0;
    24ee:	10 92 05 07 	sts	0x0705, r1
				S_Box_Timer = 1;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	80 93 09 07 	sts	0x0709, r24
				SET_TRUE(flagCritical);
    24f8:	90 62       	ori	r25, 0x20	; 32
    24fa:	90 93 cb 07 	sts	0x07CB, r25
			}
		}
		
		//Erstmaliger Kommunikationsfehler
		if((Communication_Timer == 0) && (bms.bms_flag & flagCommunication))
    24fe:	80 91 04 07 	lds	r24, 0x0704
    2502:	81 11       	cpse	r24, r1
    2504:	08 c0       	rjmp	.+16     	; 0x2516 <timer_50ms_task+0x236>
    2506:	80 91 cb 07 	lds	r24, 0x07CB
    250a:	84 ff       	sbrs	r24, 4
    250c:	2f c0       	rjmp	.+94     	; 0x256c <timer_50ms_task+0x28c>
		{
			Communication_Timer = 1;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	80 93 04 07 	sts	0x0704, r24
    2514:	2b c0       	rjmp	.+86     	; 0x256c <timer_50ms_task+0x28c>
		}
		else if((Communication_Timer > 0) && !(bms.bms_flag & flagCommunication))
    2516:	90 91 cb 07 	lds	r25, 0x07CB
    251a:	94 fd       	sbrc	r25, 4
    251c:	04 c0       	rjmp	.+8      	; 0x2526 <timer_50ms_task+0x246>
		{
			Communication_Timer--;
    251e:	81 50       	subi	r24, 0x01	; 1
    2520:	80 93 04 07 	sts	0x0704, r24
    2524:	23 c0       	rjmp	.+70     	; 0x256c <timer_50ms_task+0x28c>
		}
		else if((Communication_Timer > 0) && (bms.bms_flag & flagCommunication))
		{
			Communication_Timer++;
    2526:	8f 5f       	subi	r24, 0xFF	; 255
			if(Communication_Timer >= ENTPRELLUNGCOM)
    2528:	8a 30       	cpi	r24, 0x0A	; 10
    252a:	18 f4       	brcc	.+6      	; 0x2532 <timer_50ms_task+0x252>
		{
			Communication_Timer--;
		}
		else if((Communication_Timer > 0) && (bms.bms_flag & flagCommunication))
		{
			Communication_Timer++;
    252c:	80 93 04 07 	sts	0x0704, r24
    2530:	1d c0       	rjmp	.+58     	; 0x256c <timer_50ms_task+0x28c>
			if(Communication_Timer >= ENTPRELLUNGCOM)
			{
				Communication_Timer = 0;
    2532:	10 92 04 07 	sts	0x0704, r1
				S_Box_Timer = 1;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	80 93 09 07 	sts	0x0709, r24
				SET_TRUE(flagCritical);
    253c:	90 62       	ori	r25, 0x20	; 32
    253e:	90 93 cb 07 	sts	0x07CB, r25
    2542:	14 c0       	rjmp	.+40     	; 0x256c <timer_50ms_task+0x28c>
		}

	} //Entprellung ueberschritten -> S-Box-Timer aktiv
	else if((S_Box_Timer >= 1))
	{
		S_Box_Timer++;
    2544:	8f 5f       	subi	r24, 0xFF	; 255
    2546:	80 93 09 07 	sts	0x0709, r24
		if(S_Box_Timer >= SBOXLIMIT)
    254a:	88 32       	cpi	r24, 0x28	; 40
    254c:	78 f0       	brcs	.+30     	; 0x256c <timer_50ms_task+0x28c>
		{
			S_Box_NOT_active;
    254e:	72 98       	cbi	0x0e, 2	; 14
			S_Box_Timer = 0;
    2550:	10 92 09 07 	sts	0x0709, r1
			S_Box_Timer_Done = 1;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	80 93 c8 07 	sts	0x07C8, r24
			SET_FALSE(flagCritical);
    255a:	eb ec       	ldi	r30, 0xCB	; 203
    255c:	f7 e0       	ldi	r31, 0x07	; 7
    255e:	80 81       	ld	r24, Z
    2560:	8f 7d       	andi	r24, 0xDF	; 223
    2562:	80 83       	st	Z, r24
    2564:	03 c0       	rjmp	.+6      	; 0x256c <timer_50ms_task+0x28c>
		S_Box_active;
	}
}
else if(STM_flag == 0) //Sofortige Abschaltung durch USER
{
	S_Box_NOT_active;
    2566:	72 98       	cbi	0x0e, 2	; 14
	S_Box_Timer=0;
    2568:	10 92 09 07 	sts	0x0709, r1
}

//CAN_SCHEDULE_MESSAGE1;
CAN_SCHEDULE_MESSAGE2;
CAN_SCHEDULE_MESSAGE3;
CAN_SCHEDULE_MESSAGE4;
    256c:	80 91 4b 07 	lds	r24, 0x074B
    2570:	8c 61       	ori	r24, 0x1C	; 28
    2572:	80 93 4b 07 	sts	0x074B, r24
//BMS-Flag Reset fuer naechsten Durchgang
SET_FALSE(flagCommunication);
SET_FALSE(flagOverCur);
SET_FALSE(flagOverTemp);
SET_FALSE(flagOverVol);
SET_FALSE(flagUnderVol);
    2576:	eb ec       	ldi	r30, 0xCB	; 203
    2578:	f7 e0       	ldi	r31, 0x07	; 7
    257a:	80 81       	ld	r24, Z
    257c:	80 7e       	andi	r24, 0xE0	; 224
    257e:	80 83       	st	Z, r24
    2580:	08 95       	ret
		default:	break;
	}
}

if(IS_FALSE(flagBalActiv)) mode = 48;		//Ausgabe: 0
if(IS_TRUE(flagBalActiv)) mode = 49;		//Ausgabe: 1
    2582:	81 e3       	ldi	r24, 0x31	; 49
    2584:	80 93 06 01 	sts	0x0106, r24
    2588:	cc ce       	rjmp	.-616    	; 0x2322 <timer_50ms_task+0x42>

0000258a <timer_100ms_task>:
SET_FALSE(flagUnderVol);
// *****************************************************************************************
}

void timer_100ms_task()	//10 Hz
{
    258a:	08 95       	ret

0000258c <timer_500ms_task>:

		
}

void timer_500ms_task()	//2 Hz
{
    258c:	cf 92       	push	r12
    258e:	df 92       	push	r13
    2590:	ef 92       	push	r14
    2592:	ff 92       	push	r15
    2594:	0f 93       	push	r16
    2596:	1f 93       	push	r17
    2598:	cf 93       	push	r28
    259a:	df 93       	push	r29
// *** Spannungsmessung ********************************************************************
//Falls Balancing-flag gesetzt -> Balancing deaktivieren
bal = 0x00;
    259c:	10 92 02 07 	sts	0x0702, r1
if(IS_TRUE(flagBalActiv))
    25a0:	80 91 cb 07 	lds	r24, 0x07CB
    25a4:	86 ff       	sbrs	r24, 6
    25a6:	08 c0       	rjmp	.+16     	; 0x25b8 <timer_500ms_task+0x2c>
{
	bal = 0x01;
    25a8:	91 e0       	ldi	r25, 0x01	; 1
    25aa:	90 93 02 07 	sts	0x0702, r25
	SET_FALSE(flagBalActiv);
    25ae:	8f 7b       	andi	r24, 0xBF	; 191
    25b0:	80 93 cb 07 	sts	0x07CB, r24
	bmschip_writeConfig();
    25b4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <bmschip_writeConfig>
}

//Messung
if (bmschip_getVoltages(bms.volt.val) && !(bal))
    25b8:	8d ec       	ldi	r24, 0xCD	; 205
    25ba:	97 e0       	ldi	r25, 0x07	; 7
    25bc:	0e 94 ae 04 	call	0x95c	; 0x95c <bmschip_getVoltages>
    25c0:	88 23       	and	r24, r24
    25c2:	49 f0       	breq	.+18     	; 0x25d6 <timer_500ms_task+0x4a>
    25c4:	80 91 02 07 	lds	r24, 0x0702
    25c8:	81 11       	cpse	r24, r1
    25ca:	05 c0       	rjmp	.+10     	; 0x25d6 <timer_500ms_task+0x4a>
{
	SET_TRUE(flagCommunication);
    25cc:	eb ec       	ldi	r30, 0xCB	; 203
    25ce:	f7 e0       	ldi	r31, 0x07	; 7
    25d0:	80 81       	ld	r24, Z
    25d2:	80 61       	ori	r24, 0x10	; 16
    25d4:	80 83       	st	Z, r24
}

//Falls Balancing-flag gesetzt -> Balancing aktivieren
if(IS_FALSE(flagBalActiv) && bal == 0x01)
    25d6:	80 91 cb 07 	lds	r24, 0x07CB
    25da:	86 fd       	sbrc	r24, 6
    25dc:	09 c0       	rjmp	.+18     	; 0x25f0 <timer_500ms_task+0x64>
    25de:	90 91 02 07 	lds	r25, 0x0702
    25e2:	91 30       	cpi	r25, 0x01	; 1
    25e4:	29 f4       	brne	.+10     	; 0x25f0 <timer_500ms_task+0x64>
{
	SET_TRUE(flagBalActiv);
    25e6:	80 64       	ori	r24, 0x40	; 64
    25e8:	80 93 cb 07 	sts	0x07CB, r24
	bmschip_writeConfig();
    25ec:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <bmschip_writeConfig>
}

bmschip_evaluate(bms.volt.val, &bms.volt.max, &bms.volt.min, &bms.volt.avg, &bms.volt.NumOfCells);
    25f0:	03 e5       	ldi	r16, 0x53	; 83
    25f2:	19 e0       	ldi	r17, 0x09	; 9
    25f4:	21 e5       	ldi	r18, 0x51	; 81
    25f6:	39 e0       	ldi	r19, 0x09	; 9
    25f8:	4f e4       	ldi	r20, 0x4F	; 79
    25fa:	59 e0       	ldi	r21, 0x09	; 9
    25fc:	6d e4       	ldi	r22, 0x4D	; 77
    25fe:	79 e0       	ldi	r23, 0x09	; 9
    2600:	8d ec       	ldi	r24, 0xCD	; 205
    2602:	97 e0       	ldi	r25, 0x07	; 7
    2604:	0e 94 8f 09 	call	0x131e	; 0x131e <bmschip_evaluate>
if(bms.volt.min<=UNDERVOLT)
    2608:	80 91 4f 09 	lds	r24, 0x094F
    260c:	90 91 50 09 	lds	r25, 0x0950
    2610:	89 3a       	cpi	r24, 0xA9	; 169
    2612:	91 46       	sbci	r25, 0x61	; 97
    2614:	28 f4       	brcc	.+10     	; 0x2620 <timer_500ms_task+0x94>
{
	SET_TRUE(flagUnderVol);
    2616:	eb ec       	ldi	r30, 0xCB	; 203
    2618:	f7 e0       	ldi	r31, 0x07	; 7
    261a:	80 81       	ld	r24, Z
    261c:	84 60       	ori	r24, 0x04	; 4
    261e:	80 83       	st	Z, r24
}
if(bms.volt.max>=OVERVOLT)
    2620:	80 91 4d 09 	lds	r24, 0x094D
    2624:	90 91 4e 09 	lds	r25, 0x094E
    2628:	80 31       	cpi	r24, 0x10	; 16
    262a:	94 4a       	sbci	r25, 0xA4	; 164
    262c:	28 f0       	brcs	.+10     	; 0x2638 <timer_500ms_task+0xac>
{
	SET_TRUE(flagOverVol);
    262e:	eb ec       	ldi	r30, 0xCB	; 203
    2630:	f7 e0       	ldi	r31, 0x07	; 7
    2632:	80 81       	ld	r24, Z
    2634:	82 60       	ori	r24, 0x02	; 2
    2636:	80 83       	st	Z, r24
// *****************************************************************************************	
	
	
	// *** Ausgabe via UART ********************************************************************
	//SBox Timer aktiv
	usart_transmit_string("\f");
    2638:	8d e2       	ldi	r24, 0x2D	; 45
    263a:	93 e0       	ldi	r25, 0x03	; 3
    263c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
    2640:	80 91 cb 07 	lds	r24, 0x07CB
    2644:	8f 71       	andi	r24, 0x1F	; 31
	if(IS_TRUE(flagCommunication) || IS_TRUE(flagOverCur) || IS_TRUE(flagOverVol) || IS_TRUE(flagOverTemp) || IS_TRUE(flagUnderVol))
    2646:	a1 f0       	breq	.+40     	; 0x2670 <timer_500ms_task+0xe4>
	{
		utoa(S_Box_Timer, uart_out, 10);	//int in ASCII (uart_out ist ASCII-buffer)
    2648:	80 91 09 07 	lds	r24, 0x0709
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    264c:	4a e0       	ldi	r20, 0x0A	; 10
    264e:	61 e4       	ldi	r22, 0x41	; 65
    2650:	77 e0       	ldi	r23, 0x07	; 7
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__utoa_ncheck>
		usart_transmit_string(" S-Box Timer: ");
    2658:	88 e3       	ldi	r24, 0x38	; 56
    265a:	94 e0       	ldi	r25, 0x04	; 4
    265c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		usart_transmit_string(&uart_out[0]);
    2660:	81 e4       	ldi	r24, 0x41	; 65
    2662:	97 e0       	ldi	r25, 0x07	; 7
    2664:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		usart_transmit_string("\r\n\n");	
    2668:	87 e7       	ldi	r24, 0x77	; 119
    266a:	95 e0       	ldi	r25, 0x05	; 5
    266c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	}
	
	//Fehlerausgabe
	if(IS_TRUE(flagCommunication))
    2670:	80 91 cb 07 	lds	r24, 0x07CB
    2674:	84 ff       	sbrs	r24, 4
    2676:	04 c0       	rjmp	.+8      	; 0x2680 <timer_500ms_task+0xf4>
	{
		usart_transmit_string(" Fehler: Kommunikation!\r\n");
    2678:	87 e4       	ldi	r24, 0x47	; 71
    267a:	94 e0       	ldi	r25, 0x04	; 4
    267c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	}                                           
	if(bms.volt.min<=UNDERVOLT)
    2680:	80 91 4f 09 	lds	r24, 0x094F
    2684:	90 91 50 09 	lds	r25, 0x0950
    2688:	89 3a       	cpi	r24, 0xA9	; 169
    268a:	91 46       	sbci	r25, 0x61	; 97
    268c:	20 f4       	brcc	.+8      	; 0x2696 <timer_500ms_task+0x10a>
	{
		usart_transmit_string(" Fehler: Undervoltage!\r\n");
    268e:	81 e6       	ldi	r24, 0x61	; 97
    2690:	94 e0       	ldi	r25, 0x04	; 4
    2692:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	}
	if(bms.volt.max>=OVERVOLT)
    2696:	80 91 4d 09 	lds	r24, 0x094D
    269a:	90 91 4e 09 	lds	r25, 0x094E
    269e:	80 31       	cpi	r24, 0x10	; 16
    26a0:	94 4a       	sbci	r25, 0xA4	; 164
    26a2:	20 f0       	brcs	.+8      	; 0x26ac <timer_500ms_task+0x120>
	{
		usart_transmit_string(" Fehler: Overvoltage!\r\n");
    26a4:	8a e7       	ldi	r24, 0x7A	; 122
    26a6:	94 e0       	ldi	r25, 0x04	; 4
    26a8:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	}
	if(bms.temp.temp_max>=OVERTEMP)
    26ac:	80 91 25 0a 	lds	r24, 0x0A25
    26b0:	90 91 26 0a 	lds	r25, 0x0A26
    26b4:	a0 91 27 0a 	lds	r26, 0x0A27
    26b8:	b0 91 28 0a 	lds	r27, 0x0A28
    26bc:	80 37       	cpi	r24, 0x70	; 112
    26be:	97 41       	sbci	r25, 0x17	; 23
    26c0:	a1 05       	cpc	r26, r1
    26c2:	b1 05       	cpc	r27, r1
    26c4:	24 f0       	brlt	.+8      	; 0x26ce <timer_500ms_task+0x142>
	{
		usart_transmit_string(" Fehler: Overtemperature!\r\n");
    26c6:	82 e9       	ldi	r24, 0x92	; 146
    26c8:	94 e0       	ldi	r25, 0x04	; 4
    26ca:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	}
	if(bms.cur.cur_transmit>=OVERCURRENT)
    26ce:	80 91 58 09 	lds	r24, 0x0958
    26d2:	90 91 59 09 	lds	r25, 0x0959
    26d6:	a0 91 5a 09 	lds	r26, 0x095A
    26da:	b0 91 5b 09 	lds	r27, 0x095B
    26de:	80 38       	cpi	r24, 0x80	; 128
    26e0:	91 4d       	sbci	r25, 0xD1	; 209
    26e2:	a0 4f       	sbci	r26, 0xF0	; 240
    26e4:	b8 40       	sbci	r27, 0x08	; 8
    26e6:	20 f0       	brcs	.+8      	; 0x26f0 <timer_500ms_task+0x164>
	{
		usart_transmit_string(" Fehler: OverCurrent!\r\n");
    26e8:	8e ea       	ldi	r24, 0xAE	; 174
    26ea:	94 e0       	ldi	r25, 0x04	; 4
    26ec:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	}
	
	//Formatierte Ausgabe der einzelnen Spannungswerte
	usart_transmit_string("            \t");
    26f0:	86 ec       	ldi	r24, 0xC6	; 198
    26f2:	94 e0       	ldi	r25, 0x04	; 4
    26f4:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	for(i=0; i<slave_boards; i++)
    26f8:	10 92 2d 0a 	sts	0x0A2D, r1
    26fc:	80 91 26 07 	lds	r24, 0x0726
    2700:	88 23       	and	r24, r24
    2702:	11 f1       	breq	.+68     	; 0x2748 <timer_500ms_task+0x1bc>
    2704:	c1 e4       	ldi	r28, 0x41	; 65
    2706:	d7 e0       	ldi	r29, 0x07	; 7
	{
		usart_transmit_string("Slave ");
    2708:	84 ed       	ldi	r24, 0xD4	; 212
    270a:	94 e0       	ldi	r25, 0x04	; 4
    270c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		utoa(i+1, uart_out, 10);
    2710:	80 91 2d 0a 	lds	r24, 0x0A2D
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	4a e0       	ldi	r20, 0x0A	; 10
    2718:	be 01       	movw	r22, r28
    271a:	01 96       	adiw	r24, 0x01	; 1
    271c:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__utoa_ncheck>
		while(!(usart_transmit_char(uart_out[0])));
    2720:	88 81       	ld	r24, Y
    2722:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    2726:	88 23       	and	r24, r24
    2728:	d9 f3       	breq	.-10     	; 0x2720 <timer_500ms_task+0x194>
		usart_transmit_string(":\t");
    272a:	8b ed       	ldi	r24, 0xDB	; 219
    272c:	94 e0       	ldi	r25, 0x04	; 4
    272e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		usart_transmit_string(" Fehler: OverCurrent!\r\n");
	}
	
	//Formatierte Ausgabe der einzelnen Spannungswerte
	usart_transmit_string("            \t");
	for(i=0; i<slave_boards; i++)
    2732:	80 91 2d 0a 	lds	r24, 0x0A2D
    2736:	8f 5f       	subi	r24, 0xFF	; 255
    2738:	80 93 2d 0a 	sts	0x0A2D, r24
    273c:	90 91 26 07 	lds	r25, 0x0726
    2740:	89 17       	cp	r24, r25
    2742:	10 f3       	brcs	.-60     	; 0x2708 <timer_500ms_task+0x17c>
		utoa(i+1, uart_out, 10);
		while(!(usart_transmit_char(uart_out[0])));
		usart_transmit_string(":\t");
	}
	
	for(i=0; i<12; i++)
    2744:	10 92 2d 0a 	sts	0x0A2D, r1
    2748:	c1 e4       	ldi	r28, 0x41	; 65
    274a:	d7 e0       	ldi	r29, 0x07	; 7
	{
		usart_transmit_string(" \r\n");
		usart_transmit_string(" Zelle ");
		utoa(i+1, uart_out, 10);
		while(!(usart_transmit_char(uart_out[0])));
    274c:	ec 2e       	mov	r14, r28
    274e:	fd 2e       	mov	r15, r29
		while(!(usart_transmit_char(uart_out[1])));
		usart_transmit_string(": \t");
		
		for(i1=0; i1<slave_boards; i1++)
		{
			if(cells_per_board[i1] & (1<<i))
    2750:	01 e0       	ldi	r16, 0x01	; 1
    2752:	10 e0       	ldi	r17, 0x00	; 0
		usart_transmit_string(":\t");
	}
	
	for(i=0; i<12; i++)
	{
		usart_transmit_string(" \r\n");
    2754:	84 e7       	ldi	r24, 0x74	; 116
    2756:	96 e0       	ldi	r25, 0x06	; 6
    2758:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		usart_transmit_string(" Zelle ");
    275c:	8e ed       	ldi	r24, 0xDE	; 222
    275e:	94 e0       	ldi	r25, 0x04	; 4
    2760:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		utoa(i+1, uart_out, 10);
    2764:	80 91 2d 0a 	lds	r24, 0x0A2D
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	4a e0       	ldi	r20, 0x0A	; 10
    276c:	be 01       	movw	r22, r28
    276e:	01 96       	adiw	r24, 0x01	; 1
    2770:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__utoa_ncheck>
		while(!(usart_transmit_char(uart_out[0])));
    2774:	88 81       	ld	r24, Y
    2776:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    277a:	88 23       	and	r24, r24
    277c:	d9 f3       	breq	.-10     	; 0x2774 <timer_500ms_task+0x1e8>
		while(!(usart_transmit_char(uart_out[1])));
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    2784:	88 23       	and	r24, r24
    2786:	d9 f3       	breq	.-10     	; 0x277e <timer_500ms_task+0x1f2>
		usart_transmit_string(": \t");
    2788:	86 ee       	ldi	r24, 0xE6	; 230
    278a:	94 e0       	ldi	r25, 0x04	; 4
    278c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		
		for(i1=0; i1<slave_boards; i1++)
    2790:	10 92 2e 0a 	sts	0x0A2E, r1
    2794:	80 91 26 07 	lds	r24, 0x0726
    2798:	88 23       	and	r24, r24
    279a:	09 f4       	brne	.+2      	; 0x279e <timer_500ms_task+0x212>
    279c:	7c c0       	rjmp	.+248    	; 0x2896 <timer_500ms_task+0x30a>
    279e:	20 e0       	ldi	r18, 0x00	; 0
		{
			if(cells_per_board[i1] & (1<<i))
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	80 91 2d 0a 	lds	r24, 0x0A2D
    27a6:	48 2f       	mov	r20, r24
    27a8:	50 e0       	ldi	r21, 0x00	; 0
    27aa:	f9 01       	movw	r30, r18
    27ac:	ee 0f       	add	r30, r30
    27ae:	ff 1f       	adc	r31, r31
    27b0:	e0 53       	subi	r30, 0x30	; 48
    27b2:	f9 4f       	sbci	r31, 0xF9	; 249
    27b4:	b8 01       	movw	r22, r16
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <timer_500ms_task+0x230>
    27b8:	66 0f       	add	r22, r22
    27ba:	77 1f       	adc	r23, r23
    27bc:	8a 95       	dec	r24
    27be:	e2 f7       	brpl	.-8      	; 0x27b8 <timer_500ms_task+0x22c>
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	86 23       	and	r24, r22
    27c6:	97 23       	and	r25, r23
    27c8:	89 2b       	or	r24, r25
    27ca:	09 f4       	brne	.+2      	; 0x27ce <timer_500ms_task+0x242>
    27cc:	56 c0       	rjmp	.+172    	; 0x287a <timer_500ms_task+0x2ee>
			{
				if(bms.volt.val[((i1*12)+i)] >= 10000)
    27ce:	c9 01       	movw	r24, r18
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	28 0f       	add	r18, r24
    27d6:	39 1f       	adc	r19, r25
    27d8:	22 0f       	add	r18, r18
    27da:	33 1f       	adc	r19, r19
    27dc:	22 0f       	add	r18, r18
    27de:	33 1f       	adc	r19, r19
    27e0:	f9 01       	movw	r30, r18
    27e2:	e4 0f       	add	r30, r20
    27e4:	f5 1f       	adc	r31, r21
    27e6:	ee 0f       	add	r30, r30
    27e8:	ff 1f       	adc	r31, r31
    27ea:	e3 53       	subi	r30, 0x33	; 51
    27ec:	f8 4f       	sbci	r31, 0xF8	; 248
    27ee:	80 81       	ld	r24, Z
    27f0:	91 81       	ldd	r25, Z+1	; 0x01
    27f2:	80 31       	cpi	r24, 0x10	; 16
    27f4:	27 e2       	ldi	r18, 0x27	; 39
    27f6:	92 07       	cpc	r25, r18
    27f8:	c0 f0       	brcs	.+48     	; 0x282a <timer_500ms_task+0x29e>
    27fa:	4a e0       	ldi	r20, 0x0A	; 10
    27fc:	6e 2d       	mov	r22, r14
    27fe:	7f 2d       	mov	r23, r15
    2800:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__utoa_ncheck>
				{
					utoa(bms.volt.val[((i1*12)+i)], uart_out, 10);
					while(!(usart_transmit_char(uart_out[0])));
    2804:	88 81       	ld	r24, Y
    2806:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    280a:	88 23       	and	r24, r24
    280c:	d9 f3       	breq	.-10     	; 0x2804 <timer_500ms_task+0x278>
					while(!(usart_transmit_char(',')));
    280e:	8c e2       	ldi	r24, 0x2C	; 44
    2810:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    2814:	88 23       	and	r24, r24
    2816:	d9 f3       	breq	.-10     	; 0x280e <timer_500ms_task+0x282>
					usart_transmit_string(&uart_out[1]);
    2818:	82 e4       	ldi	r24, 0x42	; 66
    281a:	97 e0       	ldi	r25, 0x07	; 7
    281c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
					usart_transmit_string(" V\t");
    2820:	8a ee       	ldi	r24, 0xEA	; 234
    2822:	94 e0       	ldi	r25, 0x04	; 4
    2824:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
    2828:	2c c0       	rjmp	.+88     	; 0x2882 <timer_500ms_task+0x2f6>
				}
				else
				{
					usart_transmit_string("0,");
    282a:	8e ee       	ldi	r24, 0xEE	; 238
    282c:	94 e0       	ldi	r25, 0x04	; 4
    282e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
					utoa(bms.volt.val[((i1*12)+i)], uart_out, 10);
    2832:	80 91 2e 0a 	lds	r24, 0x0A2E
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	20 91 2d 0a 	lds	r18, 0x0A2D
    283c:	fc 01       	movw	r30, r24
    283e:	ee 0f       	add	r30, r30
    2840:	ff 1f       	adc	r31, r31
    2842:	e8 0f       	add	r30, r24
    2844:	f9 1f       	adc	r31, r25
    2846:	ee 0f       	add	r30, r30
    2848:	ff 1f       	adc	r31, r31
    284a:	ee 0f       	add	r30, r30
    284c:	ff 1f       	adc	r31, r31
    284e:	e2 0f       	add	r30, r18
    2850:	f1 1d       	adc	r31, r1
    2852:	ee 0f       	add	r30, r30
    2854:	ff 1f       	adc	r31, r31
    2856:	e3 53       	subi	r30, 0x33	; 51
    2858:	f8 4f       	sbci	r31, 0xF8	; 248
    285a:	4a e0       	ldi	r20, 0x0A	; 10
    285c:	6e 2d       	mov	r22, r14
    285e:	7f 2d       	mov	r23, r15
    2860:	80 81       	ld	r24, Z
    2862:	91 81       	ldd	r25, Z+1	; 0x01
    2864:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__utoa_ncheck>
					usart_transmit_string(&uart_out[0]);
    2868:	8e 2d       	mov	r24, r14
    286a:	9f 2d       	mov	r25, r15
    286c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
					usart_transmit_string(" V\t");
    2870:	8a ee       	ldi	r24, 0xEA	; 234
    2872:	94 e0       	ldi	r25, 0x04	; 4
    2874:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
    2878:	04 c0       	rjmp	.+8      	; 0x2882 <timer_500ms_task+0x2f6>
				}
			}
			else
			{
				usart_transmit_string("Keine Zelle\t");
    287a:	81 ef       	ldi	r24, 0xF1	; 241
    287c:	94 e0       	ldi	r25, 0x04	; 4
    287e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		utoa(i+1, uart_out, 10);
		while(!(usart_transmit_char(uart_out[0])));
		while(!(usart_transmit_char(uart_out[1])));
		usart_transmit_string(": \t");
		
		for(i1=0; i1<slave_boards; i1++)
    2882:	20 91 2e 0a 	lds	r18, 0x0A2E
    2886:	2f 5f       	subi	r18, 0xFF	; 255
    2888:	20 93 2e 0a 	sts	0x0A2E, r18
    288c:	80 91 26 07 	lds	r24, 0x0726
    2890:	28 17       	cp	r18, r24
    2892:	08 f4       	brcc	.+2      	; 0x2896 <timer_500ms_task+0x30a>
    2894:	85 cf       	rjmp	.-246    	; 0x27a0 <timer_500ms_task+0x214>
		utoa(i+1, uart_out, 10);
		while(!(usart_transmit_char(uart_out[0])));
		usart_transmit_string(":\t");
	}
	
	for(i=0; i<12; i++)
    2896:	80 91 2d 0a 	lds	r24, 0x0A2D
    289a:	8f 5f       	subi	r24, 0xFF	; 255
    289c:	80 93 2d 0a 	sts	0x0A2D, r24
    28a0:	8c 30       	cpi	r24, 0x0C	; 12
    28a2:	08 f4       	brcc	.+2      	; 0x28a6 <timer_500ms_task+0x31a>
    28a4:	57 cf       	rjmp	.-338    	; 0x2754 <timer_500ms_task+0x1c8>
			{
				usart_transmit_string("Keine Zelle\t");
			}
		}
	}
	usart_transmit_string(" \r\n\n");
    28a6:	86 e7       	ldi	r24, 0x76	; 118
    28a8:	95 e0       	ldi	r25, 0x05	; 5
    28aa:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
    28ae:	4a e0       	ldi	r20, 0x0A	; 10
    28b0:	61 e4       	ldi	r22, 0x41	; 65
    28b2:	77 e0       	ldi	r23, 0x07	; 7
    28b4:	80 91 4f 09 	lds	r24, 0x094F
    28b8:	90 91 50 09 	lds	r25, 0x0950
    28bc:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__utoa_ncheck>

	//Min. Voltage
	utoa(bms.volt.min, uart_out, 10);	//int in ASCII (uart_out ist ASCII-buffer)
	usart_transmit_string(" min. Voltage:\t ");
    28c0:	8e ef       	ldi	r24, 0xFE	; 254
    28c2:	94 e0       	ldi	r25, 0x04	; 4
    28c4:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	while(!(usart_transmit_char(uart_out[0])));
    28c8:	c1 e4       	ldi	r28, 0x41	; 65
    28ca:	d7 e0       	ldi	r29, 0x07	; 7
    28cc:	88 81       	ld	r24, Y
    28ce:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    28d2:	88 23       	and	r24, r24
    28d4:	d9 f3       	breq	.-10     	; 0x28cc <timer_500ms_task+0x340>
	while(!(usart_transmit_char(',')));
    28d6:	8c e2       	ldi	r24, 0x2C	; 44
    28d8:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    28dc:	88 23       	and	r24, r24
    28de:	d9 f3       	breq	.-10     	; 0x28d6 <timer_500ms_task+0x34a>
	usart_transmit_string(&uart_out[1]);
    28e0:	82 e4       	ldi	r24, 0x42	; 66
    28e2:	97 e0       	ldi	r25, 0x07	; 7
    28e4:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	usart_transmit_string(" V");
    28e8:	8f e0       	ldi	r24, 0x0F	; 15
    28ea:	95 e0       	ldi	r25, 0x05	; 5
    28ec:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
    28f0:	4a e0       	ldi	r20, 0x0A	; 10
    28f2:	61 e4       	ldi	r22, 0x41	; 65
    28f4:	77 e0       	ldi	r23, 0x07	; 7
    28f6:	80 91 51 09 	lds	r24, 0x0951
    28fa:	90 91 52 09 	lds	r25, 0x0952
    28fe:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__utoa_ncheck>
	
	//Avg. Voltage
	utoa(bms.volt.avg, uart_out, 10);
	usart_transmit_string("\r\n avg. Voltage:\t ");
    2902:	82 e1       	ldi	r24, 0x12	; 18
    2904:	95 e0       	ldi	r25, 0x05	; 5
    2906:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	while(!(usart_transmit_char(uart_out[0])));
    290a:	c1 e4       	ldi	r28, 0x41	; 65
    290c:	d7 e0       	ldi	r29, 0x07	; 7
    290e:	88 81       	ld	r24, Y
    2910:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    2914:	88 23       	and	r24, r24
    2916:	d9 f3       	breq	.-10     	; 0x290e <timer_500ms_task+0x382>
	while(!(usart_transmit_char(',')));
    2918:	8c e2       	ldi	r24, 0x2C	; 44
    291a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    291e:	88 23       	and	r24, r24
    2920:	d9 f3       	breq	.-10     	; 0x2918 <timer_500ms_task+0x38c>
	usart_transmit_string(&uart_out[1]);
    2922:	82 e4       	ldi	r24, 0x42	; 66
    2924:	97 e0       	ldi	r25, 0x07	; 7
    2926:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	usart_transmit_string(" V");
    292a:	8f e0       	ldi	r24, 0x0F	; 15
    292c:	95 e0       	ldi	r25, 0x05	; 5
    292e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
    2932:	4a e0       	ldi	r20, 0x0A	; 10
    2934:	61 e4       	ldi	r22, 0x41	; 65
    2936:	77 e0       	ldi	r23, 0x07	; 7
    2938:	80 91 4d 09 	lds	r24, 0x094D
    293c:	90 91 4e 09 	lds	r25, 0x094E
    2940:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__utoa_ncheck>
	
	//Max. Voltage
	utoa(bms.volt.max, uart_out, 10);
	usart_transmit_string("\r\n max. Voltage:\t ");
    2944:	85 e2       	ldi	r24, 0x25	; 37
    2946:	95 e0       	ldi	r25, 0x05	; 5
    2948:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	while(!(usart_transmit_char(uart_out[0])));
    294c:	c1 e4       	ldi	r28, 0x41	; 65
    294e:	d7 e0       	ldi	r29, 0x07	; 7
    2950:	88 81       	ld	r24, Y
    2952:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    2956:	88 23       	and	r24, r24
    2958:	d9 f3       	breq	.-10     	; 0x2950 <timer_500ms_task+0x3c4>
	while(!(usart_transmit_char(',')));
    295a:	8c e2       	ldi	r24, 0x2C	; 44
    295c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    2960:	88 23       	and	r24, r24
    2962:	d9 f3       	breq	.-10     	; 0x295a <timer_500ms_task+0x3ce>
	usart_transmit_string(&uart_out[1]);
    2964:	82 e4       	ldi	r24, 0x42	; 66
    2966:	97 e0       	ldi	r25, 0x07	; 7
    2968:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	usart_transmit_string(" V\r\n");
    296c:	88 e3       	ldi	r24, 0x38	; 56
    296e:	95 e0       	ldi	r25, 0x05	; 5
    2970:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	
	
	//Ausgabe der Temperaturen des LTC6804
	for(i=0; i<slave_boards; i++)
    2974:	10 92 2d 0a 	sts	0x0A2D, r1
    2978:	80 91 26 07 	lds	r24, 0x0726
    297c:	88 23       	and	r24, r24
    297e:	09 f4       	brne	.+2      	; 0x2982 <timer_500ms_task+0x3f6>
    2980:	71 c0       	rjmp	.+226    	; 0x2a64 <timer_500ms_task+0x4d8>
    2982:	c1 e4       	ldi	r28, 0x41	; 65
    2984:	d7 e0       	ldi	r29, 0x07	; 7
		usart_transmit_string("\r\n Temperatur ");
		utoa(i+1, uart_out, 10);
		while(!(usart_transmit_char(uart_out[0])));
		usart_transmit_string(":\t");
		
		tempspeicher = (sint16_t)(bms.temp.temp_transmit[i]/100);	//Temp vor dem Komma
    2986:	0f 2e       	mov	r0, r31
    2988:	f4 e6       	ldi	r31, 0x64	; 100
    298a:	cf 2e       	mov	r12, r31
    298c:	d1 2c       	mov	r13, r1
    298e:	e1 2c       	mov	r14, r1
    2990:	f1 2c       	mov	r15, r1
    2992:	f0 2d       	mov	r31, r0
	
	
	//Ausgabe der Temperaturen des LTC6804
	for(i=0; i<slave_boards; i++)
	{
		usart_transmit_string("\r\n Temperatur ");
    2994:	8d e3       	ldi	r24, 0x3D	; 61
    2996:	95 e0       	ldi	r25, 0x05	; 5
    2998:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		utoa(i+1, uart_out, 10);
    299c:	80 91 2d 0a 	lds	r24, 0x0A2D
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	4a e0       	ldi	r20, 0x0A	; 10
    29a4:	be 01       	movw	r22, r28
    29a6:	01 96       	adiw	r24, 0x01	; 1
    29a8:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__utoa_ncheck>
		while(!(usart_transmit_char(uart_out[0])));
    29ac:	88 81       	ld	r24, Y
    29ae:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    29b2:	88 23       	and	r24, r24
    29b4:	d9 f3       	breq	.-10     	; 0x29ac <timer_500ms_task+0x420>
		usart_transmit_string(":\t");
    29b6:	8b ed       	ldi	r24, 0xDB	; 219
    29b8:	94 e0       	ldi	r25, 0x04	; 4
    29ba:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		
		tempspeicher = (sint16_t)(bms.temp.temp_transmit[i]/100);	//Temp vor dem Komma
    29be:	e0 91 2d 0a 	lds	r30, 0x0A2D
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	ee 0f       	add	r30, r30
    29c6:	ff 1f       	adc	r31, r31
    29c8:	ee 0f       	add	r30, r30
    29ca:	ff 1f       	adc	r31, r31
    29cc:	eb 51       	subi	r30, 0x1B	; 27
    29ce:	f6 4f       	sbci	r31, 0xF6	; 246
    29d0:	60 81       	ld	r22, Z
    29d2:	71 81       	ldd	r23, Z+1	; 0x01
    29d4:	82 81       	ldd	r24, Z+2	; 0x02
    29d6:	93 81       	ldd	r25, Z+3	; 0x03
    29d8:	a7 01       	movw	r20, r14
    29da:	96 01       	movw	r18, r12
    29dc:	0e 94 85 18 	call	0x310a	; 0x310a <__divmodsi4>
    29e0:	da 01       	movw	r26, r20
    29e2:	c9 01       	movw	r24, r18
    29e4:	30 93 ca 07 	sts	0x07CA, r19
    29e8:	20 93 c9 07 	sts	0x07C9, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    29ec:	4a e0       	ldi	r20, 0x0A	; 10
    29ee:	be 01       	movw	r22, r28
    29f0:	0e 94 ac 19 	call	0x3358	; 0x3358 <__itoa_ncheck>
		itoa(tempspeicher, uart_out, 10);
		usart_transmit_string(uart_out);
    29f4:	ce 01       	movw	r24, r28
    29f6:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		while(!(usart_transmit_char(',')));
    29fa:	8c e2       	ldi	r24, 0x2C	; 44
    29fc:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    2a00:	88 23       	and	r24, r24
    2a02:	d9 f3       	breq	.-10     	; 0x29fa <timer_500ms_task+0x46e>
		tempspeicher = (sint16_t)(bms.temp.temp_transmit[i]%100);	//Temp hinter dem Komma
    2a04:	e0 91 2d 0a 	lds	r30, 0x0A2D
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	ee 0f       	add	r30, r30
    2a0c:	ff 1f       	adc	r31, r31
    2a0e:	ee 0f       	add	r30, r30
    2a10:	ff 1f       	adc	r31, r31
    2a12:	eb 51       	subi	r30, 0x1B	; 27
    2a14:	f6 4f       	sbci	r31, 0xF6	; 246
    2a16:	60 81       	ld	r22, Z
    2a18:	71 81       	ldd	r23, Z+1	; 0x01
    2a1a:	82 81       	ldd	r24, Z+2	; 0x02
    2a1c:	93 81       	ldd	r25, Z+3	; 0x03
    2a1e:	a7 01       	movw	r20, r14
    2a20:	96 01       	movw	r18, r12
    2a22:	0e 94 85 18 	call	0x310a	; 0x310a <__divmodsi4>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	90 93 ca 07 	sts	0x07CA, r25
    2a2e:	80 93 c9 07 	sts	0x07C9, r24
    2a32:	4a e0       	ldi	r20, 0x0A	; 10
    2a34:	be 01       	movw	r22, r28
    2a36:	0e 94 ac 19 	call	0x3358	; 0x3358 <__itoa_ncheck>
		itoa(tempspeicher, uart_out, 10);
		usart_transmit_string(uart_out);
    2a3a:	ce 01       	movw	r24, r28
    2a3c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		usart_transmit_string(" C");
    2a40:	8c e4       	ldi	r24, 0x4C	; 76
    2a42:	95 e0       	ldi	r25, 0x05	; 5
    2a44:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		tempspeicher=0;
    2a48:	10 92 ca 07 	sts	0x07CA, r1
    2a4c:	10 92 c9 07 	sts	0x07C9, r1
	usart_transmit_string(&uart_out[1]);
	usart_transmit_string(" V\r\n");
	
	
	//Ausgabe der Temperaturen des LTC6804
	for(i=0; i<slave_boards; i++)
    2a50:	80 91 2d 0a 	lds	r24, 0x0A2D
    2a54:	8f 5f       	subi	r24, 0xFF	; 255
    2a56:	80 93 2d 0a 	sts	0x0A2D, r24
    2a5a:	90 91 26 07 	lds	r25, 0x0726
    2a5e:	89 17       	cp	r24, r25
    2a60:	08 f4       	brcc	.+2      	; 0x2a64 <timer_500ms_task+0x4d8>
    2a62:	98 cf       	rjmp	.-208    	; 0x2994 <timer_500ms_task+0x408>
		usart_transmit_string(" C");
		tempspeicher=0;
	}

	//Ausgabe des Stroms
	if(curDirect == 1)		//Entladen
    2a64:	80 91 0a 07 	lds	r24, 0x070A
    2a68:	81 30       	cpi	r24, 0x01	; 1
    2a6a:	29 f4       	brne	.+10     	; 0x2a76 <timer_500ms_task+0x4ea>
	{
		usart_transmit_string("\r\n\n Entlade-Strom: ");
    2a6c:	8f e4       	ldi	r24, 0x4F	; 79
    2a6e:	95 e0       	ldi	r25, 0x05	; 5
    2a70:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
    2a74:	06 c0       	rjmp	.+12     	; 0x2a82 <timer_500ms_task+0x4f6>
	}
	else if(curDirect==0)	//Laden
    2a76:	81 11       	cpse	r24, r1
    2a78:	04 c0       	rjmp	.+8      	; 0x2a82 <timer_500ms_task+0x4f6>
	{
		usart_transmit_string("\r\n\n Lade-Strom: ");
    2a7a:	83 e6       	ldi	r24, 0x63	; 99
    2a7c:	95 e0       	ldi	r25, 0x05	; 5
    2a7e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	
//	usart_transmit_string("\r\n\n S-Box-Signal: ");	
//	usart_transmit_char(S_Box_active);
		
	
	if(bms.cur.cur_transmit >= 100000000) // >100A
    2a82:	60 91 58 09 	lds	r22, 0x0958
    2a86:	70 91 59 09 	lds	r23, 0x0959
    2a8a:	80 91 5a 09 	lds	r24, 0x095A
    2a8e:	90 91 5b 09 	lds	r25, 0x095B
    2a92:	61 15       	cp	r22, r1
    2a94:	21 ee       	ldi	r18, 0xE1	; 225
    2a96:	72 07       	cpc	r23, r18
    2a98:	25 ef       	ldi	r18, 0xF5	; 245
    2a9a:	82 07       	cpc	r24, r18
    2a9c:	25 e0       	ldi	r18, 0x05	; 5
    2a9e:	92 07       	cpc	r25, r18
    2aa0:	08 f4       	brcc	.+2      	; 0x2aa4 <timer_500ms_task+0x518>
    2aa2:	42 c0       	rjmp	.+132    	; 0x2b28 <timer_500ms_task+0x59c>
	{
		curSpeicher = (bms.cur.cur_transmit) / 1000000;
    2aa4:	20 e4       	ldi	r18, 0x40	; 64
    2aa6:	32 e4       	ldi	r19, 0x42	; 66
    2aa8:	4f e0       	ldi	r20, 0x0F	; 15
    2aaa:	50 e0       	ldi	r21, 0x00	; 0
    2aac:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__udivmodsi4>
    2ab0:	da 01       	movw	r26, r20
    2ab2:	c9 01       	movw	r24, r18
    2ab4:	20 93 29 0a 	sts	0x0A29, r18
    2ab8:	30 93 2a 0a 	sts	0x0A2A, r19
    2abc:	40 93 2b 0a 	sts	0x0A2B, r20
    2ac0:	50 93 2c 0a 	sts	0x0A2C, r21
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    2ac4:	4a e0       	ldi	r20, 0x0A	; 10
    2ac6:	61 e4       	ldi	r22, 0x41	; 65
    2ac8:	77 e0       	ldi	r23, 0x07	; 7
    2aca:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__utoa_ncheck>
		utoa(curSpeicher, uart_out, 10);
		usart_transmit_string(&uart_out[0]);
    2ace:	81 e4       	ldi	r24, 0x41	; 65
    2ad0:	97 e0       	ldi	r25, 0x07	; 7
    2ad2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		while(!(usart_transmit_char(',')));
    2ad6:	8c e2       	ldi	r24, 0x2C	; 44
    2ad8:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    2adc:	88 23       	and	r24, r24
    2ade:	d9 f3       	breq	.-10     	; 0x2ad6 <timer_500ms_task+0x54a>
		curSpeicher = (bms.cur.cur_transmit) % 1000000;
    2ae0:	60 91 58 09 	lds	r22, 0x0958
    2ae4:	70 91 59 09 	lds	r23, 0x0959
    2ae8:	80 91 5a 09 	lds	r24, 0x095A
    2aec:	90 91 5b 09 	lds	r25, 0x095B
    2af0:	20 e4       	ldi	r18, 0x40	; 64
    2af2:	32 e4       	ldi	r19, 0x42	; 66
    2af4:	4f e0       	ldi	r20, 0x0F	; 15
    2af6:	50 e0       	ldi	r21, 0x00	; 0
    2af8:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__udivmodsi4>
    2afc:	60 93 29 0a 	sts	0x0A29, r22
    2b00:	70 93 2a 0a 	sts	0x0A2A, r23
    2b04:	80 93 2b 0a 	sts	0x0A2B, r24
    2b08:	90 93 2c 0a 	sts	0x0A2C, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    2b0c:	2a e0       	ldi	r18, 0x0A	; 10
    2b0e:	41 e4       	ldi	r20, 0x41	; 65
    2b10:	57 e0       	ldi	r21, 0x07	; 7
    2b12:	0e 94 b7 19 	call	0x336e	; 0x336e <__ultoa_ncheck>
		ultoa(curSpeicher, uart_out, 10);
		usart_transmit_string(&uart_out[0]);
    2b16:	81 e4       	ldi	r24, 0x41	; 65
    2b18:	97 e0       	ldi	r25, 0x07	; 7
    2b1a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		usart_transmit_string(" A \r\n\n");
    2b1e:	84 e7       	ldi	r24, 0x74	; 116
    2b20:	95 e0       	ldi	r25, 0x05	; 5
    2b22:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
    2b26:	ca c0       	rjmp	.+404    	; 0x2cbc <timer_500ms_task+0x730>
	}
	else if (bms.cur.cur_transmit >= 10000000) //>10A
    2b28:	60 38       	cpi	r22, 0x80	; 128
    2b2a:	26 e9       	ldi	r18, 0x96	; 150
    2b2c:	72 07       	cpc	r23, r18
    2b2e:	28 e9       	ldi	r18, 0x98	; 152
    2b30:	82 07       	cpc	r24, r18
    2b32:	91 05       	cpc	r25, r1
    2b34:	08 f4       	brcc	.+2      	; 0x2b38 <timer_500ms_task+0x5ac>
    2b36:	42 c0       	rjmp	.+132    	; 0x2bbc <timer_500ms_task+0x630>
	{
		curSpeicher = (bms.cur.cur_transmit) / 1000000;
    2b38:	20 e4       	ldi	r18, 0x40	; 64
    2b3a:	32 e4       	ldi	r19, 0x42	; 66
    2b3c:	4f e0       	ldi	r20, 0x0F	; 15
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__udivmodsi4>
    2b44:	da 01       	movw	r26, r20
    2b46:	c9 01       	movw	r24, r18
    2b48:	20 93 29 0a 	sts	0x0A29, r18
    2b4c:	30 93 2a 0a 	sts	0x0A2A, r19
    2b50:	40 93 2b 0a 	sts	0x0A2B, r20
    2b54:	50 93 2c 0a 	sts	0x0A2C, r21
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    2b58:	4a e0       	ldi	r20, 0x0A	; 10
    2b5a:	61 e4       	ldi	r22, 0x41	; 65
    2b5c:	77 e0       	ldi	r23, 0x07	; 7
    2b5e:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__utoa_ncheck>
		utoa(curSpeicher, uart_out, 10);
		usart_transmit_string(&uart_out[0]);
    2b62:	81 e4       	ldi	r24, 0x41	; 65
    2b64:	97 e0       	ldi	r25, 0x07	; 7
    2b66:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		while(!(usart_transmit_char(',')));
    2b6a:	8c e2       	ldi	r24, 0x2C	; 44
    2b6c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    2b70:	88 23       	and	r24, r24
    2b72:	d9 f3       	breq	.-10     	; 0x2b6a <timer_500ms_task+0x5de>
		curSpeicher = (bms.cur.cur_transmit) % 1000000;
    2b74:	60 91 58 09 	lds	r22, 0x0958
    2b78:	70 91 59 09 	lds	r23, 0x0959
    2b7c:	80 91 5a 09 	lds	r24, 0x095A
    2b80:	90 91 5b 09 	lds	r25, 0x095B
    2b84:	20 e4       	ldi	r18, 0x40	; 64
    2b86:	32 e4       	ldi	r19, 0x42	; 66
    2b88:	4f e0       	ldi	r20, 0x0F	; 15
    2b8a:	50 e0       	ldi	r21, 0x00	; 0
    2b8c:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__udivmodsi4>
    2b90:	60 93 29 0a 	sts	0x0A29, r22
    2b94:	70 93 2a 0a 	sts	0x0A2A, r23
    2b98:	80 93 2b 0a 	sts	0x0A2B, r24
    2b9c:	90 93 2c 0a 	sts	0x0A2C, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    2ba0:	2a e0       	ldi	r18, 0x0A	; 10
    2ba2:	41 e4       	ldi	r20, 0x41	; 65
    2ba4:	57 e0       	ldi	r21, 0x07	; 7
    2ba6:	0e 94 b7 19 	call	0x336e	; 0x336e <__ultoa_ncheck>
		ultoa(curSpeicher, uart_out, 10);
		usart_transmit_string(&uart_out[0]);
    2baa:	81 e4       	ldi	r24, 0x41	; 65
    2bac:	97 e0       	ldi	r25, 0x07	; 7
    2bae:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		usart_transmit_string(" A \r\n");
    2bb2:	8b e7       	ldi	r24, 0x7B	; 123
    2bb4:	95 e0       	ldi	r25, 0x05	; 5
    2bb6:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
    2bba:	80 c0       	rjmp	.+256    	; 0x2cbc <timer_500ms_task+0x730>
	}
	else if (bms.cur.cur_transmit >= 1000000) //>1A
    2bbc:	60 34       	cpi	r22, 0x40	; 64
    2bbe:	22 e4       	ldi	r18, 0x42	; 66
    2bc0:	72 07       	cpc	r23, r18
    2bc2:	2f e0       	ldi	r18, 0x0F	; 15
    2bc4:	82 07       	cpc	r24, r18
    2bc6:	91 05       	cpc	r25, r1
    2bc8:	08 f4       	brcc	.+2      	; 0x2bcc <timer_500ms_task+0x640>
    2bca:	42 c0       	rjmp	.+132    	; 0x2c50 <timer_500ms_task+0x6c4>
	{
		curSpeicher = (bms.cur.cur_transmit) / 1000000;
    2bcc:	20 e4       	ldi	r18, 0x40	; 64
    2bce:	32 e4       	ldi	r19, 0x42	; 66
    2bd0:	4f e0       	ldi	r20, 0x0F	; 15
    2bd2:	50 e0       	ldi	r21, 0x00	; 0
    2bd4:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__udivmodsi4>
    2bd8:	da 01       	movw	r26, r20
    2bda:	c9 01       	movw	r24, r18
    2bdc:	20 93 29 0a 	sts	0x0A29, r18
    2be0:	30 93 2a 0a 	sts	0x0A2A, r19
    2be4:	40 93 2b 0a 	sts	0x0A2B, r20
    2be8:	50 93 2c 0a 	sts	0x0A2C, r21
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    2bec:	4a e0       	ldi	r20, 0x0A	; 10
    2bee:	61 e4       	ldi	r22, 0x41	; 65
    2bf0:	77 e0       	ldi	r23, 0x07	; 7
    2bf2:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__utoa_ncheck>
		utoa(curSpeicher, uart_out, 10);
		usart_transmit_string(&uart_out[0]);
    2bf6:	81 e4       	ldi	r24, 0x41	; 65
    2bf8:	97 e0       	ldi	r25, 0x07	; 7
    2bfa:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		while(!(usart_transmit_char(',')));
    2bfe:	8c e2       	ldi	r24, 0x2C	; 44
    2c00:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    2c04:	88 23       	and	r24, r24
    2c06:	d9 f3       	breq	.-10     	; 0x2bfe <timer_500ms_task+0x672>
		curSpeicher = (bms.cur.cur_transmit) % 1000000;
    2c08:	60 91 58 09 	lds	r22, 0x0958
    2c0c:	70 91 59 09 	lds	r23, 0x0959
    2c10:	80 91 5a 09 	lds	r24, 0x095A
    2c14:	90 91 5b 09 	lds	r25, 0x095B
    2c18:	20 e4       	ldi	r18, 0x40	; 64
    2c1a:	32 e4       	ldi	r19, 0x42	; 66
    2c1c:	4f e0       	ldi	r20, 0x0F	; 15
    2c1e:	50 e0       	ldi	r21, 0x00	; 0
    2c20:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__udivmodsi4>
    2c24:	60 93 29 0a 	sts	0x0A29, r22
    2c28:	70 93 2a 0a 	sts	0x0A2A, r23
    2c2c:	80 93 2b 0a 	sts	0x0A2B, r24
    2c30:	90 93 2c 0a 	sts	0x0A2C, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    2c34:	2a e0       	ldi	r18, 0x0A	; 10
    2c36:	41 e4       	ldi	r20, 0x41	; 65
    2c38:	57 e0       	ldi	r21, 0x07	; 7
    2c3a:	0e 94 b7 19 	call	0x336e	; 0x336e <__ultoa_ncheck>
		ultoa(curSpeicher, uart_out, 10);
		usart_transmit_string(&uart_out[0]);
    2c3e:	81 e4       	ldi	r24, 0x41	; 65
    2c40:	97 e0       	ldi	r25, 0x07	; 7
    2c42:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		usart_transmit_string(" A \r\n");
    2c46:	8b e7       	ldi	r24, 0x7B	; 123
    2c48:	95 e0       	ldi	r25, 0x05	; 5
    2c4a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
    2c4e:	36 c0       	rjmp	.+108    	; 0x2cbc <timer_500ms_task+0x730>
	}
	else if (bms.cur.cur_transmit >= 100000) //>0.1A
    2c50:	60 3a       	cpi	r22, 0xA0	; 160
    2c52:	76 48       	sbci	r23, 0x86	; 134
    2c54:	81 40       	sbci	r24, 0x01	; 1
    2c56:	91 05       	cpc	r25, r1
    2c58:	40 f1       	brcs	.+80     	; 0x2caa <timer_500ms_task+0x71e>
	{
		while(!(usart_transmit_char('0')));
    2c5a:	80 e3       	ldi	r24, 0x30	; 48
    2c5c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    2c60:	88 23       	and	r24, r24
    2c62:	d9 f3       	breq	.-10     	; 0x2c5a <timer_500ms_task+0x6ce>
		while(!(usart_transmit_char(',')));
    2c64:	8c e2       	ldi	r24, 0x2C	; 44
    2c66:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    2c6a:	88 23       	and	r24, r24
    2c6c:	d9 f3       	breq	.-10     	; 0x2c64 <timer_500ms_task+0x6d8>
		curSpeicher = (bms.cur.cur_transmit);
    2c6e:	60 91 58 09 	lds	r22, 0x0958
    2c72:	70 91 59 09 	lds	r23, 0x0959
    2c76:	80 91 5a 09 	lds	r24, 0x095A
    2c7a:	90 91 5b 09 	lds	r25, 0x095B
    2c7e:	60 93 29 0a 	sts	0x0A29, r22
    2c82:	70 93 2a 0a 	sts	0x0A2A, r23
    2c86:	80 93 2b 0a 	sts	0x0A2B, r24
    2c8a:	90 93 2c 0a 	sts	0x0A2C, r25
    2c8e:	2a e0       	ldi	r18, 0x0A	; 10
    2c90:	41 e4       	ldi	r20, 0x41	; 65
    2c92:	57 e0       	ldi	r21, 0x07	; 7
    2c94:	0e 94 b7 19 	call	0x336e	; 0x336e <__ultoa_ncheck>
		ultoa(curSpeicher, uart_out, 10);
		usart_transmit_string(&uart_out[0]);
    2c98:	81 e4       	ldi	r24, 0x41	; 65
    2c9a:	97 e0       	ldi	r25, 0x07	; 7
    2c9c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
		usart_transmit_string(" A \r\n");
    2ca0:	8b e7       	ldi	r24, 0x7B	; 123
    2ca2:	95 e0       	ldi	r25, 0x05	; 5
    2ca4:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
    2ca8:	09 c0       	rjmp	.+18     	; 0x2cbc <timer_500ms_task+0x730>
	}
	else
	{
		while(!(usart_transmit_char('0')));
    2caa:	80 e3       	ldi	r24, 0x30	; 48
    2cac:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    2cb0:	88 23       	and	r24, r24
    2cb2:	d9 f3       	breq	.-10     	; 0x2caa <timer_500ms_task+0x71e>
		usart_transmit_string(" A \r\n");
    2cb4:	8b e7       	ldi	r24, 0x7B	; 123
    2cb6:	95 e0       	ldi	r25, 0x05	; 5
    2cb8:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	}

	//Ausgabe Strom-Status
	if(bms.cur.cur_flag & 0x01)
    2cbc:	80 91 5c 09 	lds	r24, 0x095C
    2cc0:	80 ff       	sbrs	r24, 0
    2cc2:	05 c0       	rjmp	.+10     	; 0x2cce <timer_500ms_task+0x742>
	{
		usart_transmit_string(" Strom befindet sich in kritischem Bereich: -2A ... 0A \r\n");
    2cc4:	81 e8       	ldi	r24, 0x81	; 129
    2cc6:	95 e0       	ldi	r25, 0x05	; 5
    2cc8:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
    2ccc:	1b c0       	rjmp	.+54     	; 0x2d04 <timer_500ms_task+0x778>
	}
	else if(bms.cur.cur_flag & 0x02)
    2cce:	81 ff       	sbrs	r24, 1
    2cd0:	05 c0       	rjmp	.+10     	; 0x2cdc <timer_500ms_task+0x750>
	{
		usart_transmit_string(" Fehler: Strom fliesst in den Speicher! \r\n");
    2cd2:	8b eb       	ldi	r24, 0xBB	; 187
    2cd4:	95 e0       	ldi	r25, 0x05	; 5
    2cd6:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
    2cda:	14 c0       	rjmp	.+40     	; 0x2d04 <timer_500ms_task+0x778>
	}
	else if(bms.cur.cur_flag & 0x04)
    2cdc:	82 ff       	sbrs	r24, 2
    2cde:	05 c0       	rjmp	.+10     	; 0x2cea <timer_500ms_task+0x75e>
	{
		usart_transmit_string(" Strom befindet sich in kritischem Bereich: 0A ... +2A \r\n");
    2ce0:	86 ee       	ldi	r24, 0xE6	; 230
    2ce2:	95 e0       	ldi	r25, 0x05	; 5
    2ce4:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
    2ce8:	0d c0       	rjmp	.+26     	; 0x2d04 <timer_500ms_task+0x778>
	}
	else if(bms.cur.cur_flag & 0x08)
    2cea:	83 ff       	sbrs	r24, 3
    2cec:	05 c0       	rjmp	.+10     	; 0x2cf8 <timer_500ms_task+0x76c>
	{
		usart_transmit_string(" Fehler: Strom fliesst aus dem Speicher! \r\n");
    2cee:	80 e2       	ldi	r24, 0x20	; 32
    2cf0:	96 e0       	ldi	r25, 0x06	; 6
    2cf2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
    2cf6:	06 c0       	rjmp	.+12     	; 0x2d04 <timer_500ms_task+0x778>
	}
	else if(bms.cur.cur_flag & 0x10)
    2cf8:	84 ff       	sbrs	r24, 4
    2cfa:	04 c0       	rjmp	.+8      	; 0x2d04 <timer_500ms_task+0x778>
	{
		usart_transmit_string(" Fehler: Betriebsbereich ueberschritten! \r\n");
    2cfc:	8c e4       	ldi	r24, 0x4C	; 76
    2cfe:	96 e0       	ldi	r25, 0x06	; 6
    2d00:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	}
	// *****************************************************************************************

	// *** Balancing Eingabe via UART **********************************************************
	usart_transmit_string("\r\n Balancing empfohlen an ");
    2d04:	88 e7       	ldi	r24, 0x78	; 120
    2d06:	96 e0       	ldi	r25, 0x06	; 6
    2d08:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	utoa(Rec, uart_out, 10);
    2d0c:	80 91 03 07 	lds	r24, 0x0703
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
    2d10:	4a e0       	ldi	r20, 0x0A	; 10
    2d12:	61 e4       	ldi	r22, 0x41	; 65
    2d14:	77 e0       	ldi	r23, 0x07	; 7
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__utoa_ncheck>
	usart_transmit_string(&uart_out[0]);
    2d1c:	81 e4       	ldi	r24, 0x41	; 65
    2d1e:	97 e0       	ldi	r25, 0x07	; 7
    2d20:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	usart_transmit_string(" Zellen.");
    2d24:	83 e9       	ldi	r24, 0x93	; 147
    2d26:	96 e0       	ldi	r25, 0x06	; 6
    2d28:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	usart_transmit_string("\r\n Balancing-Mode:    ");
    2d2c:	8c e9       	ldi	r24, 0x9C	; 156
    2d2e:	96 e0       	ldi	r25, 0x06	; 6
    2d30:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	while(!(usart_transmit_char(mode)));
    2d34:	80 91 06 01 	lds	r24, 0x0106
    2d38:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <usart_transmit_char>
    2d3c:	88 23       	and	r24, r24
    2d3e:	d1 f3       	breq	.-12     	; 0x2d34 <timer_500ms_task+0x7a8>
	usart_transmit_string("\r\n <1> Charge ");
    2d40:	83 eb       	ldi	r24, 0xB3	; 179
    2d42:	96 e0       	ldi	r25, 0x06	; 6
    2d44:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	usart_transmit_string("\r\n <0> Drive ");
    2d48:	82 ec       	ldi	r24, 0xC2	; 194
    2d4a:	96 e0       	ldi	r25, 0x06	; 6
    2d4c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <usart_transmit_string>
	// *****************************************************************************************

}
    2d50:	df 91       	pop	r29
    2d52:	cf 91       	pop	r28
    2d54:	1f 91       	pop	r17
    2d56:	0f 91       	pop	r16
    2d58:	ff 90       	pop	r15
    2d5a:	ef 90       	pop	r14
    2d5c:	df 90       	pop	r13
    2d5e:	cf 90       	pop	r12
    2d60:	08 95       	ret

00002d62 <timer_1s_task>:


void timer_1s_task()		//1 Hz
{
    2d62:	08 95       	ret

00002d64 <main_loop_task>:
	//----------------
}


void main_loop_task()
{
    2d64:	08 95       	ret

00002d66 <can_receive_task>:
	//----------------
}


void can_receive_task(can_msg_t msg)
{
    2d66:	cf 92       	push	r12
    2d68:	df 92       	push	r13
    2d6a:	ef 92       	push	r14
    2d6c:	ff 92       	push	r15
    2d6e:	0f 93       	push	r16
    2d70:	1f 93       	push	r17
    2d72:	cf 93       	push	r28
    2d74:	df 93       	push	r29
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    2d7a:	2d 97       	sbiw	r28, 0x0d	; 13
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	f8 94       	cli
    2d80:	de bf       	out	0x3e, r29	; 62
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	cd bf       	out	0x3d, r28	; 61
    2d86:	c9 82       	std	Y+1, r12	; 0x01
    2d88:	da 82       	std	Y+2, r13	; 0x02
    2d8a:	eb 82       	std	Y+3, r14	; 0x03
    2d8c:	fc 82       	std	Y+4, r15	; 0x04
	switch(msg.id)
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	9a 81       	ldd	r25, Y+2	; 0x02
    2d92:	ab 81       	ldd	r26, Y+3	; 0x03
    2d94:	bc 81       	ldd	r27, Y+4	; 0x04
    2d96:	81 30       	cpi	r24, 0x01	; 1
    2d98:	91 05       	cpc	r25, r1
    2d9a:	a1 05       	cpc	r26, r1
    2d9c:	b1 05       	cpc	r27, r1
    2d9e:	31 f0       	breq	.+12     	; 0x2dac <can_receive_task+0x46>
    2da0:	81 15       	cp	r24, r1
    2da2:	91 40       	sbci	r25, 0x01	; 1
    2da4:	a1 05       	cpc	r26, r1
    2da6:	b1 05       	cpc	r27, r1
    2da8:	99 f0       	breq	.+38     	; 0x2dd0 <can_receive_task+0x6a>
    2daa:	18 c0       	rjmp	.+48     	; 0x2ddc <can_receive_task+0x76>
	{
		//Für Systemreset reserviert
		//case 0x000: if()
		
		//STM-Flag!
		case 0x001:	STM_flag = msg.data.b[0];
    2dac:	10 93 0f 07 	sts	0x070F, r17
					if((msg.data.b[1] == 1))
    2db0:	21 30       	cpi	r18, 0x01	; 1
    2db2:	31 f4       	brne	.+12     	; 0x2dc0 <can_receive_task+0x5a>
						SET_TRUE(flagBalActiv);
    2db4:	eb ec       	ldi	r30, 0xCB	; 203
    2db6:	f7 e0       	ldi	r31, 0x07	; 7
    2db8:	80 81       	ld	r24, Z
    2dba:	80 64       	ori	r24, 0x40	; 64
    2dbc:	80 83       	st	Z, r24
    2dbe:	05 c0       	rjmp	.+10     	; 0x2dca <can_receive_task+0x64>
					else
						SET_FALSE(flagBalActiv);
    2dc0:	eb ec       	ldi	r30, 0xCB	; 203
    2dc2:	f7 e0       	ldi	r31, 0x07	; 7
    2dc4:	80 81       	ld	r24, Z
    2dc6:	8f 7b       	andi	r24, 0xBF	; 191
    2dc8:	80 83       	st	Z, r24
					curDirect = msg.data.b[2];
    2dca:	30 93 0a 07 	sts	0x070A, r19
					break;
    2dce:	06 c0       	rjmp	.+12     	; 0x2ddc <can_receive_task+0x76>
	
		//Initialisierung und Testlauf erlaubt!
		case 0x100:	Test_flag = msg.data.b[0];
    2dd0:	10 93 0d 07 	sts	0x070D, r17
					slave = msg.data.b[1];
    2dd4:	20 93 0b 07 	sts	0x070B, r18
					curDirect = msg.data.b[2];
    2dd8:	30 93 0a 07 	sts	0x070A, r19
					break;
		
		default: 	break;
	}
}
    2ddc:	2d 96       	adiw	r28, 0x0d	; 13
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	de bf       	out	0x3e, r29	; 62
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	cd bf       	out	0x3d, r28	; 61
    2de8:	df 91       	pop	r29
    2dea:	cf 91       	pop	r28
    2dec:	1f 91       	pop	r17
    2dee:	0f 91       	pop	r16
    2df0:	ff 90       	pop	r15
    2df2:	ef 90       	pop	r14
    2df4:	df 90       	pop	r13
    2df6:	cf 90       	pop	r12
    2df8:	08 95       	ret

00002dfa <can_send_task>:

void can_send_task(uint8_t index)
{
    2dfa:	2f 92       	push	r2
    2dfc:	3f 92       	push	r3
    2dfe:	4f 92       	push	r4
    2e00:	5f 92       	push	r5
    2e02:	6f 92       	push	r6
    2e04:	7f 92       	push	r7
    2e06:	8f 92       	push	r8
    2e08:	9f 92       	push	r9
    2e0a:	af 92       	push	r10
    2e0c:	bf 92       	push	r11
    2e0e:	cf 92       	push	r12
    2e10:	df 92       	push	r13
    2e12:	ef 92       	push	r14
    2e14:	ff 92       	push	r15
    2e16:	0f 93       	push	r16
    2e18:	1f 93       	push	r17
    2e1a:	cf 93       	push	r28
    2e1c:	df 93       	push	r29
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
    2e22:	60 97       	sbiw	r28, 0x10	; 16
    2e24:	0f b6       	in	r0, 0x3f	; 63
    2e26:	f8 94       	cli
    2e28:	de bf       	out	0x3e, r29	; 62
    2e2a:	0f be       	out	0x3f, r0	; 63
    2e2c:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, i1;
	u32 transfer;
	can_msg_t msg;
	
	switch(index)			//index 0 - 7 equals bits set in can_tx_flags mask
    2e2e:	82 30       	cpi	r24, 0x02	; 2
    2e30:	59 f0       	breq	.+22     	; 0x2e48 <can_send_task+0x4e>
    2e32:	18 f4       	brcc	.+6      	; 0x2e3a <can_send_task+0x40>
    2e34:	88 23       	and	r24, r24
    2e36:	69 f0       	breq	.+26     	; 0x2e52 <can_send_task+0x58>
    2e38:	2d c1       	rjmp	.+602    	; 0x3094 <can_send_task+0x29a>
    2e3a:	83 30       	cpi	r24, 0x03	; 3
    2e3c:	09 f4       	brne	.+2      	; 0x2e40 <can_send_task+0x46>
    2e3e:	ec c0       	rjmp	.+472    	; 0x3018 <can_send_task+0x21e>
    2e40:	84 30       	cpi	r24, 0x04	; 4
    2e42:	09 f4       	brne	.+2      	; 0x2e46 <can_send_task+0x4c>
    2e44:	1c c1       	rjmp	.+568    	; 0x307e <can_send_task+0x284>
    2e46:	26 c1       	rjmp	.+588    	; 0x3094 <can_send_task+0x29a>
						break;*/
						
		//Spannungsmesswerte & Status
		case 2: 		
		msg.id = 0x300;
		for(i=0; i<slave_boards; i++)
    2e48:	80 91 26 07 	lds	r24, 0x0726
    2e4c:	81 11       	cpse	r24, r1
    2e4e:	99 c0       	rjmp	.+306    	; 0x2f82 <can_send_task+0x188>
    2e50:	21 c1       	rjmp	.+578    	; 0x3094 <can_send_task+0x29a>
	can_msg_t msg;
	
	switch(index)			//index 0 - 7 equals bits set in can_tx_flags mask
	{
		//Freigabesignal & Fehler
		case 0:			msg.data.b[0] = bms.bms_flag;
    2e52:	80 91 cb 07 	lds	r24, 0x07CB
    2e56:	8e 83       	std	Y+6, r24	; 0x06
						if((Freigabe_flag == 1) && (Test_flag == 0))
    2e58:	80 91 0c 07 	lds	r24, 0x070C
    2e5c:	81 30       	cpi	r24, 0x01	; 1
    2e5e:	e1 f4       	brne	.+56     	; 0x2e98 <can_send_task+0x9e>
    2e60:	80 91 0d 07 	lds	r24, 0x070D
    2e64:	81 11       	cpse	r24, r1
    2e66:	35 c0       	rjmp	.+106    	; 0x2ed2 <can_send_task+0xd8>
						{
							msg.data.b[1] = Init_flag;
    2e68:	80 91 0e 07 	lds	r24, 0x070E
    2e6c:	8f 83       	std	Y+7, r24	; 0x07
							msg.data.b[2] = Test_flag;
    2e6e:	18 86       	std	Y+8, r1	; 0x08
							msg.data.b[3] = Freigabe_flag;	
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	89 87       	std	Y+9, r24	; 0x09
							msg.id = 0x002;
			 				msg.dlc = 4;	
							while(!(can_send_message(msg.id, msg.dlc, msg.data.ll)));				
    2e74:	ce 80       	ldd	r12, Y+6	; 0x06
    2e76:	df 80       	ldd	r13, Y+7	; 0x07
    2e78:	e8 84       	ldd	r14, Y+8	; 0x08
    2e7a:	f9 84       	ldd	r15, Y+9	; 0x09
    2e7c:	0a 85       	ldd	r16, Y+10	; 0x0a
    2e7e:	1b 85       	ldd	r17, Y+11	; 0x0b
    2e80:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e82:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e84:	44 e0       	ldi	r20, 0x04	; 4
    2e86:	62 e0       	ldi	r22, 0x02	; 2
    2e88:	70 e0       	ldi	r23, 0x00	; 0
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <can_send_message>
    2e92:	88 23       	and	r24, r24
    2e94:	79 f3       	breq	.-34     	; 0x2e74 <can_send_task+0x7a>
    2e96:	fe c0       	rjmp	.+508    	; 0x3094 <can_send_task+0x29a>
						}
						else if((Freigabe_flag == 0) && (Test_flag == 1 ))
    2e98:	81 11       	cpse	r24, r1
    2e9a:	1b c0       	rjmp	.+54     	; 0x2ed2 <can_send_task+0xd8>
    2e9c:	80 91 0d 07 	lds	r24, 0x070D
    2ea0:	81 30       	cpi	r24, 0x01	; 1
    2ea2:	b9 f4       	brne	.+46     	; 0x2ed2 <can_send_task+0xd8>
						{
							msg.data.b[1] = Init_flag;							
    2ea4:	80 91 0e 07 	lds	r24, 0x070E
    2ea8:	8f 83       	std	Y+7, r24	; 0x07
							msg.data.b[2] = Test_flag;
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	88 87       	std	Y+8, r24	; 0x08
							msg.id = 0x002;
							msg.dlc = 3;
							while(!(can_send_message(msg.id, msg.dlc, msg.data.ll)));
    2eae:	ce 80       	ldd	r12, Y+6	; 0x06
    2eb0:	df 80       	ldd	r13, Y+7	; 0x07
    2eb2:	e8 84       	ldd	r14, Y+8	; 0x08
    2eb4:	f9 84       	ldd	r15, Y+9	; 0x09
    2eb6:	0a 85       	ldd	r16, Y+10	; 0x0a
    2eb8:	1b 85       	ldd	r17, Y+11	; 0x0b
    2eba:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ebc:	3d 85       	ldd	r19, Y+13	; 0x0d
    2ebe:	43 e0       	ldi	r20, 0x03	; 3
    2ec0:	62 e0       	ldi	r22, 0x02	; 2
    2ec2:	70 e0       	ldi	r23, 0x00	; 0
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <can_send_message>
    2ecc:	88 23       	and	r24, r24
    2ece:	79 f3       	breq	.-34     	; 0x2eae <can_send_task+0xb4>
    2ed0:	e1 c0       	rjmp	.+450    	; 0x3094 <can_send_task+0x29a>
						}
						else
						{
							msg.data.b[1] = Init_flag;
    2ed2:	80 91 0e 07 	lds	r24, 0x070E
    2ed6:	8f 83       	std	Y+7, r24	; 0x07
							msg.id = 0x002;
							msg.dlc = 2;
							while(!(can_send_message(msg.id, msg.dlc, msg.data.ll)));						
    2ed8:	ce 80       	ldd	r12, Y+6	; 0x06
    2eda:	df 80       	ldd	r13, Y+7	; 0x07
    2edc:	e8 84       	ldd	r14, Y+8	; 0x08
    2ede:	f9 84       	ldd	r15, Y+9	; 0x09
    2ee0:	0a 85       	ldd	r16, Y+10	; 0x0a
    2ee2:	1b 85       	ldd	r17, Y+11	; 0x0b
    2ee4:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ee6:	3d 85       	ldd	r19, Y+13	; 0x0d
    2ee8:	42 e0       	ldi	r20, 0x02	; 2
    2eea:	62 e0       	ldi	r22, 0x02	; 2
    2eec:	70 e0       	ldi	r23, 0x00	; 0
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <can_send_message>
    2ef6:	88 23       	and	r24, r24
    2ef8:	79 f3       	breq	.-34     	; 0x2ed8 <can_send_task+0xde>
    2efa:	cc c0       	rjmp	.+408    	; 0x3094 <can_send_task+0x29a>
		for(i=0; i<slave_boards; i++)
						{
							for(i1=0; i1<4; i1++)
							
							{
								msg.data.b[0] = (GET_LOW_BYTE(bms.volt.val[(i*12)+(i1*3)]));	
    2efc:	f3 01       	movw	r30, r6
    2efe:	92 81       	ldd	r25, Z+2	; 0x02
    2f00:	83 81       	ldd	r24, Z+3	; 0x03
    2f02:	9e 83       	std	Y+6, r25	; 0x06
								msg.data.b[1] = (GET_HIGH_BYTE(bms.volt.val[(i*12)+(i1*3)]));	
    2f04:	8f 83       	std	Y+7, r24	; 0x07
								msg.data.b[2] = (GET_LOW_BYTE(bms.volt.val[(i*12)+(i1*3)+1]));	
    2f06:	94 81       	ldd	r25, Z+4	; 0x04
    2f08:	85 81       	ldd	r24, Z+5	; 0x05
    2f0a:	98 87       	std	Y+8, r25	; 0x08
								msg.data.b[3] = (GET_HIGH_BYTE(bms.volt.val[(i*12)+(i1*3)+1]));	
    2f0c:	89 87       	std	Y+9, r24	; 0x09
								msg.data.b[4] = (GET_LOW_BYTE(bms.volt.val[(i*12)+(i1*3)+2]));	
    2f0e:	96 81       	ldd	r25, Z+6	; 0x06
    2f10:	87 81       	ldd	r24, Z+7	; 0x07
    2f12:	9a 87       	std	Y+10, r25	; 0x0a
								msg.data.b[5] = (GET_HIGH_BYTE(bms.volt.val[(i*12)+(i1*3)+2]));	
    2f14:	8b 87       	std	Y+11, r24	; 0x0b
								msg.data.b[6] = (i*12)+(i1*3)+3;		//Anzahl der bisher uebertragenen Werte (Die letzten 3 miteinbezogen)
    2f16:	fe 85       	ldd	r31, Y+14	; 0x0e
    2f18:	fc 87       	std	Y+12, r31	; 0x0c
								msg.data.b[7] = bms.bms_flag;
    2f1a:	eb ec       	ldi	r30, 0xCB	; 203
    2f1c:	f7 e0       	ldi	r31, 0x07	; 7
    2f1e:	80 81       	ld	r24, Z
    2f20:	8d 87       	std	Y+13, r24	; 0x0d
								
								
								msg.dlc = 8;
								while(!(can_send_message(msg.id, msg.dlc, msg.data.ll)));
    2f22:	ce 80       	ldd	r12, Y+6	; 0x06
    2f24:	df 80       	ldd	r13, Y+7	; 0x07
    2f26:	e8 84       	ldd	r14, Y+8	; 0x08
    2f28:	f9 84       	ldd	r15, Y+9	; 0x09
    2f2a:	0a 85       	ldd	r16, Y+10	; 0x0a
    2f2c:	1b 85       	ldd	r17, Y+11	; 0x0b
    2f2e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f30:	3d 85       	ldd	r19, Y+13	; 0x0d
    2f32:	48 e0       	ldi	r20, 0x08	; 8
    2f34:	c5 01       	movw	r24, r10
    2f36:	b4 01       	movw	r22, r8
    2f38:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <can_send_message>
    2f3c:	88 23       	and	r24, r24
    2f3e:	89 f3       	breq	.-30     	; 0x2f22 <can_send_task+0x128>
    2f40:	ff ef       	ldi	r31, 0xFF	; 255
    2f42:	8f 1a       	sub	r8, r31
    2f44:	9f 0a       	sbc	r9, r31
    2f46:	af 0a       	sbc	r10, r31
    2f48:	bf 0a       	sbc	r11, r31
    2f4a:	26 e0       	ldi	r18, 0x06	; 6
    2f4c:	62 0e       	add	r6, r18
    2f4e:	71 1c       	adc	r7, r1
    2f50:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f52:	3d 5f       	subi	r19, 0xFD	; 253
    2f54:	3e 87       	std	Y+14, r19	; 0x0e
		//Spannungsmesswerte & Status
		case 2: 		
		msg.id = 0x300;
		for(i=0; i<slave_boards; i++)
						{
							for(i1=0; i1<4; i1++)
    2f56:	82 14       	cp	r8, r2
    2f58:	93 04       	cpc	r9, r3
    2f5a:	a4 04       	cpc	r10, r4
    2f5c:	b5 04       	cpc	r11, r5
    2f5e:	71 f6       	brne	.-100    	; 0x2efc <can_send_task+0x102>
						break;*/
						
		//Spannungsmesswerte & Status
		case 2: 		
		msg.id = 0x300;
		for(i=0; i<slave_boards; i++)
    2f60:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f62:	8f 5f       	subi	r24, 0xFF	; 255
    2f64:	8f 87       	std	Y+15, r24	; 0x0f
    2f66:	94 e0       	ldi	r25, 0x04	; 4
    2f68:	29 0e       	add	r2, r25
    2f6a:	31 1c       	adc	r3, r1
    2f6c:	41 1c       	adc	r4, r1
    2f6e:	51 1c       	adc	r5, r1
    2f70:	e8 89       	ldd	r30, Y+16	; 0x10
    2f72:	e4 5f       	subi	r30, 0xF4	; 244
    2f74:	e8 8b       	std	Y+16, r30	; 0x10
    2f76:	80 91 26 07 	lds	r24, 0x0726
    2f7a:	ff 85       	ldd	r31, Y+15	; 0x0f
    2f7c:	f8 17       	cp	r31, r24
    2f7e:	60 f0       	brcs	.+24     	; 0x2f98 <can_send_task+0x19e>
    2f80:	89 c0       	rjmp	.+274    	; 0x3094 <can_send_task+0x29a>
    2f82:	23 e0       	ldi	r18, 0x03	; 3
    2f84:	28 8b       	std	Y+16, r18	; 0x10
    2f86:	0f 2e       	mov	r0, r31
    2f88:	f4 e0       	ldi	r31, 0x04	; 4
    2f8a:	2f 2e       	mov	r2, r31
    2f8c:	f3 e0       	ldi	r31, 0x03	; 3
    2f8e:	3f 2e       	mov	r3, r31
    2f90:	41 2c       	mov	r4, r1
    2f92:	51 2c       	mov	r5, r1
    2f94:	f0 2d       	mov	r31, r0
    2f96:	1f 86       	std	Y+15, r1	; 0x0f
						{
							for(i1=0; i1<4; i1++)
							
							{
								msg.data.b[0] = (GET_LOW_BYTE(bms.volt.val[(i*12)+(i1*3)]));	
    2f98:	3f 85       	ldd	r19, Y+15	; 0x0f
    2f9a:	83 2f       	mov	r24, r19
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	3c 01       	movw	r6, r24
    2fa0:	66 0c       	add	r6, r6
    2fa2:	77 1c       	adc	r7, r7
    2fa4:	86 0d       	add	r24, r6
    2fa6:	97 1d       	adc	r25, r7
    2fa8:	88 0f       	add	r24, r24
    2faa:	99 1f       	adc	r25, r25
    2fac:	88 0f       	add	r24, r24
    2fae:	99 1f       	adc	r25, r25
    2fb0:	88 0f       	add	r24, r24
    2fb2:	99 1f       	adc	r25, r25
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	e5 53       	subi	r30, 0x35	; 53
    2fb8:	f8 4f       	sbci	r31, 0xF8	; 248
    2fba:	3f 01       	movw	r6, r30
    2fbc:	f8 89       	ldd	r31, Y+16	; 0x10
    2fbe:	fe 87       	std	Y+14, r31	; 0x0e
    2fc0:	52 01       	movw	r10, r4
    2fc2:	41 01       	movw	r8, r2
    2fc4:	24 e0       	ldi	r18, 0x04	; 4
    2fc6:	82 1a       	sub	r8, r18
    2fc8:	91 08       	sbc	r9, r1
    2fca:	a1 08       	sbc	r10, r1
    2fcc:	b1 08       	sbc	r11, r1
    2fce:	96 cf       	rjmp	.-212    	; 0x2efc <can_send_task+0x102>
			 			break;
		
		//Balancing & Recommended & Status
		case 3:			for(i=0; i<slave_boards; i++)
						{
							msg.data.b[0] = (GET_LOW_BYTE(bms.balancing.cells[i]));	
    2fd0:	e9 2d       	mov	r30, r9
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	ee 0f       	add	r30, r30
    2fd6:	ff 1f       	adc	r31, r31
    2fd8:	e3 5a       	subi	r30, 0xA3	; 163
    2fda:	f6 4f       	sbci	r31, 0xF6	; 246
    2fdc:	90 81       	ld	r25, Z
    2fde:	81 81       	ldd	r24, Z+1	; 0x01
    2fe0:	9e 83       	std	Y+6, r25	; 0x06
							msg.data.b[1] = (GET_HIGH_BYTE(bms.balancing.cells[i]));
    2fe2:	8f 83       	std	Y+7, r24	; 0x07
							msg.data.b[2] = Rec;	
    2fe4:	80 91 03 07 	lds	r24, 0x0703
    2fe8:	88 87       	std	Y+8, r24	; 0x08
							msg.data.b[3] = (i+1);
    2fea:	93 94       	inc	r9
    2fec:	99 86       	std	Y+9, r9	; 0x09
							msg.data.b[4] = bms.bms_flag;	
    2fee:	f5 01       	movw	r30, r10
    2ff0:	80 81       	ld	r24, Z
    2ff2:	8a 87       	std	Y+10, r24	; 0x0a
							msg.id = 0x005;
							msg.dlc = 5;
							while(!(can_send_message(msg.id, msg.dlc, msg.data.ll)));
    2ff4:	ce 80       	ldd	r12, Y+6	; 0x06
    2ff6:	df 80       	ldd	r13, Y+7	; 0x07
    2ff8:	e8 84       	ldd	r14, Y+8	; 0x08
    2ffa:	f9 84       	ldd	r15, Y+9	; 0x09
    2ffc:	0a 85       	ldd	r16, Y+10	; 0x0a
    2ffe:	1b 85       	ldd	r17, Y+11	; 0x0b
    3000:	2c 85       	ldd	r18, Y+12	; 0x0c
    3002:	3d 85       	ldd	r19, Y+13	; 0x0d
    3004:	45 e0       	ldi	r20, 0x05	; 5
    3006:	65 e0       	ldi	r22, 0x05	; 5
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <can_send_message>
    3012:	88 23       	and	r24, r24
    3014:	79 f3       	breq	.-34     	; 0x2ff4 <can_send_task+0x1fa>
    3016:	07 c0       	rjmp	.+14     	; 0x3026 <can_send_task+0x22c>
{
	uint8_t i, i1;
	u32 transfer;
	can_msg_t msg;
	
	switch(index)			//index 0 - 7 equals bits set in can_tx_flags mask
    3018:	91 2c       	mov	r9, r1
			 			break;
		
		//Balancing & Recommended & Status
		case 3:			for(i=0; i<slave_boards; i++)
						{
							msg.data.b[0] = (GET_LOW_BYTE(bms.balancing.cells[i]));	
    301a:	0f 2e       	mov	r0, r31
    301c:	fb ec       	ldi	r31, 0xCB	; 203
    301e:	af 2e       	mov	r10, r31
    3020:	f7 e0       	ldi	r31, 0x07	; 7
    3022:	bf 2e       	mov	r11, r31
    3024:	f0 2d       	mov	r31, r0
							}						
						}
			 			break;
		
		//Balancing & Recommended & Status
		case 3:			for(i=0; i<slave_boards; i++)
    3026:	80 91 26 07 	lds	r24, 0x0726
    302a:	98 16       	cp	r9, r24
    302c:	88 f2       	brcs	.-94     	; 0x2fd0 <can_send_task+0x1d6>
    302e:	32 c0       	rjmp	.+100    	; 0x3094 <can_send_task+0x29a>
						break;
		
		//Temperatur & Status
		case 4:			for(i=0; i<slave_boards; i++)
						{	
							transfer.l = bms.temp.temp_transmit[i];						
    3030:	e9 2d       	mov	r30, r9
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	ee 0f       	add	r30, r30
    3036:	ff 1f       	adc	r31, r31
    3038:	ee 0f       	add	r30, r30
    303a:	ff 1f       	adc	r31, r31
    303c:	eb 51       	subi	r30, 0x1B	; 27
    303e:	f6 4f       	sbci	r31, 0xF6	; 246
    3040:	30 81       	ld	r19, Z
    3042:	21 81       	ldd	r18, Z+1	; 0x01
    3044:	92 81       	ldd	r25, Z+2	; 0x02
    3046:	83 81       	ldd	r24, Z+3	; 0x03
							msg.data.b[0] = transfer.b[0];
    3048:	3e 83       	std	Y+6, r19	; 0x06
							msg.data.b[1] = transfer.b[1];
    304a:	2f 83       	std	Y+7, r18	; 0x07
							msg.data.b[2] = transfer.b[2];
    304c:	98 87       	std	Y+8, r25	; 0x08
							msg.data.b[3] = transfer.b[3];
    304e:	89 87       	std	Y+9, r24	; 0x09
							msg.data.b[4] = (i+1);	
    3050:	93 94       	inc	r9
    3052:	9a 86       	std	Y+10, r9	; 0x0a
							msg.data.b[5] = bms.bms_flag;							
    3054:	f5 01       	movw	r30, r10
    3056:	80 81       	ld	r24, Z
    3058:	8b 87       	std	Y+11, r24	; 0x0b
							msg.id = 0x006;
							msg.dlc = 6;
							while(!(can_send_message(msg.id, msg.dlc, msg.data.ll)));
    305a:	ce 80       	ldd	r12, Y+6	; 0x06
    305c:	df 80       	ldd	r13, Y+7	; 0x07
    305e:	e8 84       	ldd	r14, Y+8	; 0x08
    3060:	f9 84       	ldd	r15, Y+9	; 0x09
    3062:	0a 85       	ldd	r16, Y+10	; 0x0a
    3064:	1b 85       	ldd	r17, Y+11	; 0x0b
    3066:	2c 85       	ldd	r18, Y+12	; 0x0c
    3068:	3d 85       	ldd	r19, Y+13	; 0x0d
    306a:	46 e0       	ldi	r20, 0x06	; 6
    306c:	66 e0       	ldi	r22, 0x06	; 6
    306e:	70 e0       	ldi	r23, 0x00	; 0
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <can_send_message>
    3078:	88 23       	and	r24, r24
    307a:	79 f3       	breq	.-34     	; 0x305a <can_send_task+0x260>
    307c:	07 c0       	rjmp	.+14     	; 0x308c <can_send_task+0x292>
{
	uint8_t i, i1;
	u32 transfer;
	can_msg_t msg;
	
	switch(index)			//index 0 - 7 equals bits set in can_tx_flags mask
    307e:	91 2c       	mov	r9, r1
						break;
		
		//Temperatur & Status
		case 4:			for(i=0; i<slave_boards; i++)
						{	
							transfer.l = bms.temp.temp_transmit[i];						
    3080:	0f 2e       	mov	r0, r31
    3082:	fb ec       	ldi	r31, 0xCB	; 203
    3084:	af 2e       	mov	r10, r31
    3086:	f7 e0       	ldi	r31, 0x07	; 7
    3088:	bf 2e       	mov	r11, r31
    308a:	f0 2d       	mov	r31, r0
							while(!(can_send_message(msg.id, msg.dlc, msg.data.ll)));
						}
						break;
		
		//Temperatur & Status
		case 4:			for(i=0; i<slave_boards; i++)
    308c:	80 91 26 07 	lds	r24, 0x0726
    3090:	98 16       	cp	r9, r24
    3092:	70 f2       	brcs	.-100    	; 0x3030 <can_send_task+0x236>
		//				can_send_message(msg.id, msg.dlc, msg.data.ll);
		//				break;
		
		default:		break;
	}
}
    3094:	60 96       	adiw	r28, 0x10	; 16
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	df 91       	pop	r29
    30a2:	cf 91       	pop	r28
    30a4:	1f 91       	pop	r17
    30a6:	0f 91       	pop	r16
    30a8:	ff 90       	pop	r15
    30aa:	ef 90       	pop	r14
    30ac:	df 90       	pop	r13
    30ae:	cf 90       	pop	r12
    30b0:	bf 90       	pop	r11
    30b2:	af 90       	pop	r10
    30b4:	9f 90       	pop	r9
    30b6:	8f 90       	pop	r8
    30b8:	7f 90       	pop	r7
    30ba:	6f 90       	pop	r6
    30bc:	5f 90       	pop	r5
    30be:	4f 90       	pop	r4
    30c0:	3f 90       	pop	r3
    30c2:	2f 90       	pop	r2
    30c4:	08 95       	ret

000030c6 <__udivmodsi4>:
    30c6:	a1 e2       	ldi	r26, 0x21	; 33
    30c8:	1a 2e       	mov	r1, r26
    30ca:	aa 1b       	sub	r26, r26
    30cc:	bb 1b       	sub	r27, r27
    30ce:	fd 01       	movw	r30, r26
    30d0:	0d c0       	rjmp	.+26     	; 0x30ec <__udivmodsi4_ep>

000030d2 <__udivmodsi4_loop>:
    30d2:	aa 1f       	adc	r26, r26
    30d4:	bb 1f       	adc	r27, r27
    30d6:	ee 1f       	adc	r30, r30
    30d8:	ff 1f       	adc	r31, r31
    30da:	a2 17       	cp	r26, r18
    30dc:	b3 07       	cpc	r27, r19
    30de:	e4 07       	cpc	r30, r20
    30e0:	f5 07       	cpc	r31, r21
    30e2:	20 f0       	brcs	.+8      	; 0x30ec <__udivmodsi4_ep>
    30e4:	a2 1b       	sub	r26, r18
    30e6:	b3 0b       	sbc	r27, r19
    30e8:	e4 0b       	sbc	r30, r20
    30ea:	f5 0b       	sbc	r31, r21

000030ec <__udivmodsi4_ep>:
    30ec:	66 1f       	adc	r22, r22
    30ee:	77 1f       	adc	r23, r23
    30f0:	88 1f       	adc	r24, r24
    30f2:	99 1f       	adc	r25, r25
    30f4:	1a 94       	dec	r1
    30f6:	69 f7       	brne	.-38     	; 0x30d2 <__udivmodsi4_loop>
    30f8:	60 95       	com	r22
    30fa:	70 95       	com	r23
    30fc:	80 95       	com	r24
    30fe:	90 95       	com	r25
    3100:	9b 01       	movw	r18, r22
    3102:	ac 01       	movw	r20, r24
    3104:	bd 01       	movw	r22, r26
    3106:	cf 01       	movw	r24, r30
    3108:	08 95       	ret

0000310a <__divmodsi4>:
    310a:	05 2e       	mov	r0, r21
    310c:	97 fb       	bst	r25, 7
    310e:	1e f4       	brtc	.+6      	; 0x3116 <__divmodsi4+0xc>
    3110:	00 94       	com	r0
    3112:	0e 94 9c 18 	call	0x3138	; 0x3138 <__negsi2>
    3116:	57 fd       	sbrc	r21, 7
    3118:	07 d0       	rcall	.+14     	; 0x3128 <__divmodsi4_neg2>
    311a:	0e 94 63 18 	call	0x30c6	; 0x30c6 <__udivmodsi4>
    311e:	07 fc       	sbrc	r0, 7
    3120:	03 d0       	rcall	.+6      	; 0x3128 <__divmodsi4_neg2>
    3122:	4e f4       	brtc	.+18     	; 0x3136 <__divmodsi4_exit>
    3124:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__negsi2>

00003128 <__divmodsi4_neg2>:
    3128:	50 95       	com	r21
    312a:	40 95       	com	r20
    312c:	30 95       	com	r19
    312e:	21 95       	neg	r18
    3130:	3f 4f       	sbci	r19, 0xFF	; 255
    3132:	4f 4f       	sbci	r20, 0xFF	; 255
    3134:	5f 4f       	sbci	r21, 0xFF	; 255

00003136 <__divmodsi4_exit>:
    3136:	08 95       	ret

00003138 <__negsi2>:
    3138:	90 95       	com	r25
    313a:	80 95       	com	r24
    313c:	70 95       	com	r23
    313e:	61 95       	neg	r22
    3140:	7f 4f       	sbci	r23, 0xFF	; 255
    3142:	8f 4f       	sbci	r24, 0xFF	; 255
    3144:	9f 4f       	sbci	r25, 0xFF	; 255
    3146:	08 95       	ret

00003148 <__tablejump2__>:
    3148:	ee 0f       	add	r30, r30
    314a:	ff 1f       	adc	r31, r31
    314c:	05 90       	lpm	r0, Z+
    314e:	f4 91       	lpm	r31, Z
    3150:	e0 2d       	mov	r30, r0
    3152:	09 94       	ijmp

00003154 <__moddi3>:
    3154:	68 94       	set
    3156:	01 c0       	rjmp	.+2      	; 0x315a <__divdi3_moddi3>

00003158 <__divdi3>:
    3158:	e8 94       	clt

0000315a <__divdi3_moddi3>:
    315a:	f9 2f       	mov	r31, r25
    315c:	f1 2b       	or	r31, r17
    315e:	12 f0       	brmi	.+4      	; 0x3164 <__divdi3_moddi3+0xa>
    3160:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <__udivdi3_umoddi3>
    3164:	a0 e0       	ldi	r26, 0x00	; 0
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	e8 eb       	ldi	r30, 0xB8	; 184
    316a:	f8 e1       	ldi	r31, 0x18	; 24
    316c:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <__prologue_saves__+0xc>
    3170:	09 2e       	mov	r0, r25
    3172:	05 94       	asr	r0
    3174:	22 f4       	brpl	.+8      	; 0x317e <__divdi3_moddi3+0x24>
    3176:	0e 94 3a 19 	call	0x3274	; 0x3274 <__negdi2>
    317a:	11 23       	and	r17, r17
    317c:	92 f4       	brpl	.+36     	; 0x31a2 <__divdi3_moddi3+0x48>
    317e:	f0 e8       	ldi	r31, 0x80	; 128
    3180:	0f 26       	eor	r0, r31
    3182:	ff ef       	ldi	r31, 0xFF	; 255
    3184:	e0 94       	com	r14
    3186:	f0 94       	com	r15
    3188:	00 95       	com	r16
    318a:	10 95       	com	r17
    318c:	b0 94       	com	r11
    318e:	c0 94       	com	r12
    3190:	d0 94       	com	r13
    3192:	a1 94       	neg	r10
    3194:	bf 0a       	sbc	r11, r31
    3196:	cf 0a       	sbc	r12, r31
    3198:	df 0a       	sbc	r13, r31
    319a:	ef 0a       	sbc	r14, r31
    319c:	ff 0a       	sbc	r15, r31
    319e:	0f 0b       	sbc	r16, r31
    31a0:	1f 0b       	sbc	r17, r31
    31a2:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__udivmod64>
    31a6:	07 fc       	sbrc	r0, 7
    31a8:	0e 94 3a 19 	call	0x3274	; 0x3274 <__negdi2>
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
    31b0:	ec e0       	ldi	r30, 0x0C	; 12
    31b2:	0c 94 6c 19 	jmp	0x32d8	; 0x32d8 <__epilogue_restores__+0xc>

000031b6 <__umoddi3>:
    31b6:	68 94       	set
    31b8:	01 c0       	rjmp	.+2      	; 0x31bc <__udivdi3_umoddi3>

000031ba <__udivdi3>:
    31ba:	e8 94       	clt

000031bc <__udivdi3_umoddi3>:
    31bc:	8f 92       	push	r8
    31be:	9f 92       	push	r9
    31c0:	cf 93       	push	r28
    31c2:	df 93       	push	r29
    31c4:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <__udivmod64>
    31c8:	df 91       	pop	r29
    31ca:	cf 91       	pop	r28
    31cc:	9f 90       	pop	r9
    31ce:	8f 90       	pop	r8
    31d0:	08 95       	ret

000031d2 <__udivmod64>:
    31d2:	88 24       	eor	r8, r8
    31d4:	99 24       	eor	r9, r9
    31d6:	f4 01       	movw	r30, r8
    31d8:	e4 01       	movw	r28, r8
    31da:	b0 e4       	ldi	r27, 0x40	; 64
    31dc:	9f 93       	push	r25
    31de:	aa 27       	eor	r26, r26
    31e0:	9a 15       	cp	r25, r10
    31e2:	8b 04       	cpc	r8, r11
    31e4:	9c 04       	cpc	r9, r12
    31e6:	ed 05       	cpc	r30, r13
    31e8:	fe 05       	cpc	r31, r14
    31ea:	cf 05       	cpc	r28, r15
    31ec:	d0 07       	cpc	r29, r16
    31ee:	a1 07       	cpc	r26, r17
    31f0:	98 f4       	brcc	.+38     	; 0x3218 <__udivmod64+0x46>
    31f2:	ad 2f       	mov	r26, r29
    31f4:	dc 2f       	mov	r29, r28
    31f6:	cf 2f       	mov	r28, r31
    31f8:	fe 2f       	mov	r31, r30
    31fa:	e9 2d       	mov	r30, r9
    31fc:	98 2c       	mov	r9, r8
    31fe:	89 2e       	mov	r8, r25
    3200:	98 2f       	mov	r25, r24
    3202:	87 2f       	mov	r24, r23
    3204:	76 2f       	mov	r23, r22
    3206:	65 2f       	mov	r22, r21
    3208:	54 2f       	mov	r21, r20
    320a:	43 2f       	mov	r20, r19
    320c:	32 2f       	mov	r19, r18
    320e:	22 27       	eor	r18, r18
    3210:	b8 50       	subi	r27, 0x08	; 8
    3212:	31 f7       	brne	.-52     	; 0x31e0 <__udivmod64+0xe>
    3214:	bf 91       	pop	r27
    3216:	27 c0       	rjmp	.+78     	; 0x3266 <__udivmod64+0x94>
    3218:	1b 2e       	mov	r1, r27
    321a:	bf 91       	pop	r27
    321c:	bb 27       	eor	r27, r27
    321e:	22 0f       	add	r18, r18
    3220:	33 1f       	adc	r19, r19
    3222:	44 1f       	adc	r20, r20
    3224:	55 1f       	adc	r21, r21
    3226:	66 1f       	adc	r22, r22
    3228:	77 1f       	adc	r23, r23
    322a:	88 1f       	adc	r24, r24
    322c:	99 1f       	adc	r25, r25
    322e:	88 1c       	adc	r8, r8
    3230:	99 1c       	adc	r9, r9
    3232:	ee 1f       	adc	r30, r30
    3234:	ff 1f       	adc	r31, r31
    3236:	cc 1f       	adc	r28, r28
    3238:	dd 1f       	adc	r29, r29
    323a:	aa 1f       	adc	r26, r26
    323c:	bb 1f       	adc	r27, r27
    323e:	8a 14       	cp	r8, r10
    3240:	9b 04       	cpc	r9, r11
    3242:	ec 05       	cpc	r30, r12
    3244:	fd 05       	cpc	r31, r13
    3246:	ce 05       	cpc	r28, r14
    3248:	df 05       	cpc	r29, r15
    324a:	a0 07       	cpc	r26, r16
    324c:	b1 07       	cpc	r27, r17
    324e:	48 f0       	brcs	.+18     	; 0x3262 <__udivmod64+0x90>
    3250:	8a 18       	sub	r8, r10
    3252:	9b 08       	sbc	r9, r11
    3254:	ec 09       	sbc	r30, r12
    3256:	fd 09       	sbc	r31, r13
    3258:	ce 09       	sbc	r28, r14
    325a:	df 09       	sbc	r29, r15
    325c:	a0 0b       	sbc	r26, r16
    325e:	b1 0b       	sbc	r27, r17
    3260:	21 60       	ori	r18, 0x01	; 1
    3262:	1a 94       	dec	r1
    3264:	e1 f6       	brne	.-72     	; 0x321e <__udivmod64+0x4c>
    3266:	2e f4       	brtc	.+10     	; 0x3272 <__udivmod64+0xa0>
    3268:	94 01       	movw	r18, r8
    326a:	af 01       	movw	r20, r30
    326c:	be 01       	movw	r22, r28
    326e:	cd 01       	movw	r24, r26
    3270:	00 0c       	add	r0, r0
    3272:	08 95       	ret

00003274 <__negdi2>:
    3274:	60 95       	com	r22
    3276:	70 95       	com	r23
    3278:	80 95       	com	r24
    327a:	90 95       	com	r25
    327c:	30 95       	com	r19
    327e:	40 95       	com	r20
    3280:	50 95       	com	r21
    3282:	21 95       	neg	r18
    3284:	3f 4f       	sbci	r19, 0xFF	; 255
    3286:	4f 4f       	sbci	r20, 0xFF	; 255
    3288:	5f 4f       	sbci	r21, 0xFF	; 255
    328a:	6f 4f       	sbci	r22, 0xFF	; 255
    328c:	7f 4f       	sbci	r23, 0xFF	; 255
    328e:	8f 4f       	sbci	r24, 0xFF	; 255
    3290:	9f 4f       	sbci	r25, 0xFF	; 255
    3292:	08 95       	ret

00003294 <__prologue_saves__>:
    3294:	2f 92       	push	r2
    3296:	3f 92       	push	r3
    3298:	4f 92       	push	r4
    329a:	5f 92       	push	r5
    329c:	6f 92       	push	r6
    329e:	7f 92       	push	r7
    32a0:	8f 92       	push	r8
    32a2:	9f 92       	push	r9
    32a4:	af 92       	push	r10
    32a6:	bf 92       	push	r11
    32a8:	cf 92       	push	r12
    32aa:	df 92       	push	r13
    32ac:	ef 92       	push	r14
    32ae:	ff 92       	push	r15
    32b0:	0f 93       	push	r16
    32b2:	1f 93       	push	r17
    32b4:	cf 93       	push	r28
    32b6:	df 93       	push	r29
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
    32bc:	ca 1b       	sub	r28, r26
    32be:	db 0b       	sbc	r29, r27
    32c0:	0f b6       	in	r0, 0x3f	; 63
    32c2:	f8 94       	cli
    32c4:	de bf       	out	0x3e, r29	; 62
    32c6:	0f be       	out	0x3f, r0	; 63
    32c8:	cd bf       	out	0x3d, r28	; 61
    32ca:	09 94       	ijmp

000032cc <__epilogue_restores__>:
    32cc:	2a 88       	ldd	r2, Y+18	; 0x12
    32ce:	39 88       	ldd	r3, Y+17	; 0x11
    32d0:	48 88       	ldd	r4, Y+16	; 0x10
    32d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    32d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    32d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    32d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    32da:	9b 84       	ldd	r9, Y+11	; 0x0b
    32dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    32de:	b9 84       	ldd	r11, Y+9	; 0x09
    32e0:	c8 84       	ldd	r12, Y+8	; 0x08
    32e2:	df 80       	ldd	r13, Y+7	; 0x07
    32e4:	ee 80       	ldd	r14, Y+6	; 0x06
    32e6:	fd 80       	ldd	r15, Y+5	; 0x05
    32e8:	0c 81       	ldd	r16, Y+4	; 0x04
    32ea:	1b 81       	ldd	r17, Y+3	; 0x03
    32ec:	aa 81       	ldd	r26, Y+2	; 0x02
    32ee:	b9 81       	ldd	r27, Y+1	; 0x01
    32f0:	ce 0f       	add	r28, r30
    32f2:	d1 1d       	adc	r29, r1
    32f4:	0f b6       	in	r0, 0x3f	; 63
    32f6:	f8 94       	cli
    32f8:	de bf       	out	0x3e, r29	; 62
    32fa:	0f be       	out	0x3f, r0	; 63
    32fc:	cd bf       	out	0x3d, r28	; 61
    32fe:	ed 01       	movw	r28, r26
    3300:	08 95       	ret

00003302 <__ashldi3>:
    3302:	0f 93       	push	r16
    3304:	08 30       	cpi	r16, 0x08	; 8
    3306:	90 f0       	brcs	.+36     	; 0x332c <__ashldi3+0x2a>
    3308:	98 2f       	mov	r25, r24
    330a:	87 2f       	mov	r24, r23
    330c:	76 2f       	mov	r23, r22
    330e:	65 2f       	mov	r22, r21
    3310:	54 2f       	mov	r21, r20
    3312:	43 2f       	mov	r20, r19
    3314:	32 2f       	mov	r19, r18
    3316:	22 27       	eor	r18, r18
    3318:	08 50       	subi	r16, 0x08	; 8
    331a:	f4 cf       	rjmp	.-24     	; 0x3304 <__ashldi3+0x2>
    331c:	22 0f       	add	r18, r18
    331e:	33 1f       	adc	r19, r19
    3320:	44 1f       	adc	r20, r20
    3322:	55 1f       	adc	r21, r21
    3324:	66 1f       	adc	r22, r22
    3326:	77 1f       	adc	r23, r23
    3328:	88 1f       	adc	r24, r24
    332a:	99 1f       	adc	r25, r25
    332c:	0a 95       	dec	r16
    332e:	b2 f7       	brpl	.-20     	; 0x331c <__ashldi3+0x1a>
    3330:	0f 91       	pop	r16
    3332:	08 95       	ret

00003334 <__adddi3>:
    3334:	2a 0d       	add	r18, r10
    3336:	3b 1d       	adc	r19, r11
    3338:	4c 1d       	adc	r20, r12
    333a:	5d 1d       	adc	r21, r13
    333c:	6e 1d       	adc	r22, r14
    333e:	7f 1d       	adc	r23, r15
    3340:	80 1f       	adc	r24, r16
    3342:	91 1f       	adc	r25, r17
    3344:	08 95       	ret

00003346 <__subdi3>:
    3346:	2a 19       	sub	r18, r10
    3348:	3b 09       	sbc	r19, r11
    334a:	4c 09       	sbc	r20, r12
    334c:	5d 09       	sbc	r21, r13
    334e:	6e 09       	sbc	r22, r14
    3350:	7f 09       	sbc	r23, r15
    3352:	80 0b       	sbc	r24, r16
    3354:	91 0b       	sbc	r25, r17
    3356:	08 95       	ret

00003358 <__itoa_ncheck>:
    3358:	bb 27       	eor	r27, r27
    335a:	4a 30       	cpi	r20, 0x0A	; 10
    335c:	31 f4       	brne	.+12     	; 0x336a <__itoa_ncheck+0x12>
    335e:	99 23       	and	r25, r25
    3360:	22 f4       	brpl	.+8      	; 0x336a <__itoa_ncheck+0x12>
    3362:	bd e2       	ldi	r27, 0x2D	; 45
    3364:	90 95       	com	r25
    3366:	81 95       	neg	r24
    3368:	9f 4f       	sbci	r25, 0xFF	; 255
    336a:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <__utoa_common>

0000336e <__ultoa_ncheck>:
    336e:	bb 27       	eor	r27, r27

00003370 <__ultoa_common>:
    3370:	fa 01       	movw	r30, r20
    3372:	a6 2f       	mov	r26, r22
    3374:	62 17       	cp	r22, r18
    3376:	71 05       	cpc	r23, r1
    3378:	81 05       	cpc	r24, r1
    337a:	91 05       	cpc	r25, r1
    337c:	33 0b       	sbc	r19, r19
    337e:	30 fb       	bst	r19, 0
    3380:	66 f0       	brts	.+24     	; 0x339a <__ultoa_common+0x2a>
    3382:	aa 27       	eor	r26, r26
    3384:	66 0f       	add	r22, r22
    3386:	77 1f       	adc	r23, r23
    3388:	88 1f       	adc	r24, r24
    338a:	99 1f       	adc	r25, r25
    338c:	aa 1f       	adc	r26, r26
    338e:	a2 17       	cp	r26, r18
    3390:	10 f0       	brcs	.+4      	; 0x3396 <__ultoa_common+0x26>
    3392:	a2 1b       	sub	r26, r18
    3394:	63 95       	inc	r22
    3396:	38 50       	subi	r19, 0x08	; 8
    3398:	a9 f7       	brne	.-22     	; 0x3384 <__ultoa_common+0x14>
    339a:	a0 5d       	subi	r26, 0xD0	; 208
    339c:	aa 33       	cpi	r26, 0x3A	; 58
    339e:	08 f0       	brcs	.+2      	; 0x33a2 <__ultoa_common+0x32>
    33a0:	a9 5d       	subi	r26, 0xD9	; 217
    33a2:	a1 93       	st	Z+, r26
    33a4:	36 f7       	brtc	.-52     	; 0x3372 <__ultoa_common+0x2>
    33a6:	b1 11       	cpse	r27, r1
    33a8:	b1 93       	st	Z+, r27
    33aa:	10 82       	st	Z, r1
    33ac:	ca 01       	movw	r24, r20
    33ae:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <strrev>

000033b2 <__utoa_ncheck>:
    33b2:	bb 27       	eor	r27, r27

000033b4 <__utoa_common>:
    33b4:	fb 01       	movw	r30, r22
    33b6:	55 27       	eor	r21, r21
    33b8:	aa 27       	eor	r26, r26
    33ba:	88 0f       	add	r24, r24
    33bc:	99 1f       	adc	r25, r25
    33be:	aa 1f       	adc	r26, r26
    33c0:	a4 17       	cp	r26, r20
    33c2:	10 f0       	brcs	.+4      	; 0x33c8 <__utoa_common+0x14>
    33c4:	a4 1b       	sub	r26, r20
    33c6:	83 95       	inc	r24
    33c8:	50 51       	subi	r21, 0x10	; 16
    33ca:	b9 f7       	brne	.-18     	; 0x33ba <__utoa_common+0x6>
    33cc:	a0 5d       	subi	r26, 0xD0	; 208
    33ce:	aa 33       	cpi	r26, 0x3A	; 58
    33d0:	08 f0       	brcs	.+2      	; 0x33d4 <__utoa_common+0x20>
    33d2:	a9 5d       	subi	r26, 0xD9	; 217
    33d4:	a1 93       	st	Z+, r26
    33d6:	00 97       	sbiw	r24, 0x00	; 0
    33d8:	79 f7       	brne	.-34     	; 0x33b8 <__utoa_common+0x4>
    33da:	b1 11       	cpse	r27, r1
    33dc:	b1 93       	st	Z+, r27
    33de:	11 92       	st	Z+, r1
    33e0:	cb 01       	movw	r24, r22
    33e2:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <strrev>

000033e6 <strrev>:
    33e6:	dc 01       	movw	r26, r24
    33e8:	fc 01       	movw	r30, r24
    33ea:	67 2f       	mov	r22, r23
    33ec:	71 91       	ld	r23, Z+
    33ee:	77 23       	and	r23, r23
    33f0:	e1 f7       	brne	.-8      	; 0x33ea <strrev+0x4>
    33f2:	32 97       	sbiw	r30, 0x02	; 2
    33f4:	04 c0       	rjmp	.+8      	; 0x33fe <strrev+0x18>
    33f6:	7c 91       	ld	r23, X
    33f8:	6d 93       	st	X+, r22
    33fa:	70 83       	st	Z, r23
    33fc:	62 91       	ld	r22, -Z
    33fe:	ae 17       	cp	r26, r30
    3400:	bf 07       	cpc	r27, r31
    3402:	c8 f3       	brcs	.-14     	; 0x33f6 <strrev+0x10>
    3404:	08 95       	ret

00003406 <_exit>:
    3406:	f8 94       	cli

00003408 <__stop_program>:
    3408:	ff cf       	rjmp	.-2      	; 0x3408 <__stop_program>
